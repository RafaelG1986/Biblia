RafaelG1986: Necesito hacer una aplicacion de escritorio, para windows

GitHub Copilot: # Creación de una Aplicación de Escritorio para Windows

Para crear una aplicación de escritorio para Windows, tienes varias opciones. Te recomiendo usar Windows Presentation Foundation (WPF) con C#, que es una tecnología moderna con buen soporte.

## Pasos para comenzar:

1. **Instala Visual Studio** (la versión Community es gratuita)
   - Durante la instalación, selecciona la carga de trabajo "Desarrollo de escritorio de .NET"

2. **Crea un nuevo proyecto**:
   - Abre Visual Studio
   - Selecciona "Crear un proyecto nuevo"
   - Busca "WPF" y selecciona "Aplicación de WPF"

3. **Ejemplo básico de estructura**:

```csharp
// MainWindow.xaml.cs
using System.Windows;

namespace MiAplicacion
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void BotonClick(object sender, RoutedEventArgs e)
        {
            MensajeTexto.Text = "¡Hola, Mundo!";
        }
    }
}
```

```xml
<!-- MainWindow.xaml -->
<Window x:Class="MiAplicacion.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Mi Aplicación" Height="350" Width="500">
    <Grid>
        <StackPanel VerticalAlignment="Center">
            <TextBlock x:Name="MensajeTexto" 
                       HorizontalAlignment="Center" 
                       FontSize="24" 
                       Margin="0,0,0,20"/>
            <Button Content="Haz clic" 
                    Width="100" 
                    Click="BotonClick"/>
        </StackPanel>
    </Grid>
</Window>
```

¿Necesitas información sobre alguna funcionalidad específica para tu aplicación?

RafaelG1986: voy a hacerla desde aca

GitHub Copilot: # Desarrollando una Aplicación de Escritorio en VS Code

Puedes crear una aplicación de escritorio para Windows directamente desde VS Code. Tienes varias opciones:

## Opción 1: Aplicación .NET (WPF o Windows Forms)

1. **Instala las herramientas necesarias**:
   - [.NET SDK](https://dotnet.microsoft.com/download)
   - Extensión "C#" de Microsoft para VS Code

2. **Crea un nuevo proyecto WPF**:
   ```bash
   dotnet new wpf -n MiAplicacion
   cd MiAplicacion
   code .
   ```

3. **Ejecuta la aplicación**:
   ```bash
   dotnet run
   ```

## Opción 2: Electron (usando JavaScript/TypeScript)

1. **Instala Node.js** desde [nodejs.org](https://nodejs.org/)

2. **Crea un proyecto Electron**:
   ```bash
   npx create-electron-app mi-aplicacion
   cd mi-aplicacion
   code .
   ```

3. **Ejecuta la aplicación**:
   ```bash
   npm start
   ```

## Opción 3: Tauri (más eficiente que Electron)

1. **Instala los prerrequisitos**:
   - [Rust](https://www.rust-lang.org/tools/install)
   - Node.js

2. **Crea un proyecto Tauri**:
   ```bash
   npm create tauri-app
   cd [nombre-proyecto]
   code .
   ```

3. **Ejecuta la aplicación**:
   ```bash
   npm run tauri dev
   ```

¿Cuál de estas opciones te interesa más? Puedo proporcionarte más detalles sobre la que prefieras.

RafaelG1986: La aplicacion que quiero es una Biblia, la Biblia Trae versiones, y cada version viene con los mismos libros. 

GitHub Copilot: # Aplicación de Biblia para Escritorio

Puedo ayudarte a diseñar una aplicación de Biblia que maneje múltiples versiones con la misma estructura de libros. Te sugiero usar WPF con C# por su rendimiento y facilidad para crear interfaces de usuario en Windows.

## Estructura propuesta

### Modelo de datos
```csharp
// Estructura básica de clases
public class BibliaApp
{
    public List<VersionBiblia> Versiones { get; set; }
}

public class VersionBiblia
{
    public string Nombre { get; set; }
    public string Idioma { get; set; }
    public List<Libro> Libros { get; set; }
}

public class Libro
{
    public string Nombre { get; set; }
    public string Abreviatura { get; set; }
    public List<Capitulo> Capitulos { get; set; }
}

public class Capitulo
{
    public int Numero { get; set; }
    public List<Versiculo> Versiculos { get; set; }
}

public class Versiculo
{
    public int Numero { get; set; }
    public string Texto { get; set; }
}
```

### Interfaz de usuario (XAML)

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Biblia App" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Barra superior -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10">
            <TextBlock Text="Versión:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <ComboBox x:Name="VersionesComboBox" Width="150" Margin="0,0,10,0"
                      SelectionChanged="VersionesComboBox_SelectionChanged"/>
            <Button Content="Buscar" Width="80"/>
        </StackPanel>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel de navegación -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Lista de libros -->
                <ListBox x:Name="LibrosListBox" Grid.Row="0" Margin="10"
                         SelectionChanged="LibrosListBox_SelectionChanged"/>
                
                <!-- Selector de capítulo -->
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
                    <TextBlock Text="Capítulo:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <ComboBox x:Name="CapitulosComboBox" Width="80" 
                              SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                </StackPanel>
            </Grid>
            
            <!-- Visualización del texto -->
            <ScrollViewer Grid.Column="1" Margin="10">
                <TextBlock x:Name="ContenidoTextBlock" TextWrapping="Wrap"/>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
```

## Pasos para implementar el proyecto

1. **Crear el proyecto WPF**:
   ```bash
   dotnet new wpf -n BibliaApp
   cd BibliaApp
   ```

2. **Organizar carpetas del proyecto**:
   - Models (para el modelo de datos)
   - Services (para obtener y almacenar los datos de la Biblia)
   - Views (para vistas adicionales)

3. **Obtención de datos**:
   - Puedes utilizar archivos XML/JSON para almacenar los textos bíblicos
   - Considerar APIs públicas como Bible.org o API.Bible

4. **Funcionalidades adicionales**:
   - Búsqueda de texto
   - Marcadores
   - Historial de lectura
   - Comparación de versiones

¿Quieres que profundice en algún aspecto específico de la aplicación?

RafaelG1986: Cual seria el siguiente paso?

GitHub Copilot: # Siguientes Pasos para tu Aplicación de Biblia

Ahora que tienes el concepto general, estos son los siguientes pasos para implementar tu aplicación:

## 1. Crear el proyecto base

```bash
mkdir BibliaApp
cd BibliaApp
dotnet new wpf
```

## 2. Configurar la estructura de carpetas

```bash
mkdir Models
mkdir Services
mkdir Views
mkdir Data
```

## 3. Implementar las clases del modelo de datos

Crea el archivo `Models/BibliaModels.cs`:

```csharp
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
        public string Idioma { get; set; }
        public List<Libro> Libros { get; set; }

        public VersionBiblia()
        {
            Libros = new List<Libro>();
        }
    }

    public class Libro
    {
        public string Nombre { get; set; }
        public string Abreviatura { get; set; }
        public List<Capitulo> Capitulos { get; set; }

        public Libro()
        {
            Capitulos = new List<Capitulo>();
        }
    }

    public class Capitulo
    {
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; }

        public Capitulo()
        {
            Versiculos = new List<Versiculo>();
        }
    }

    public class Versiculo
    {
        public int Numero { get; set; }
        public string Texto { get; set; }
    }
}
```

## 4. Crear un servicio para cargar datos

```csharp
using System.Collections.Generic;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private List<VersionBiblia> _versiones;

        public BibliaService()
        {
            _versiones = new List<VersionBiblia>();
            CargarDatosDePrueba();
        }

        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }

        public VersionBiblia ObtenerVersion(string id)
        {
            return _versiones.Find(v => v.Id == id);
        }

        private void CargarDatosDePrueba()
        {
            // Simular datos para pruebas iniciales
            var reivaValera = new VersionBiblia
            {
                Id = "rv1960",
                Nombre = "Reina Valera 1960",
                Idioma = "Español"
            };

            var genesis = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1 = new Capitulo { Numero = 1 };
            capitulo1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra." });
            capitulo1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas." });
            
            genesis.Capitulos.Add(capitulo1);
            reivaValera.Libros.Add(genesis);
            _versiones.Add(reivaValera);

            // Añadir otra versión
            var nuevaVersion = new VersionBiblia
            {
                Id = "nvi",
                Nombre = "Nueva Versión Internacional",
                Idioma = "Español"
            };
            
            var genesisNVI = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1NVI = new Capitulo { Numero = 1 };
            capitulo1NVI.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Dios, en el principio, creó los cielos y la tierra." });
            
            genesisNVI.Capitulos.Add(capitulo1NVI);
            nuevaVersion.Libros.Add(genesisNVI);
            _versiones.Add(nuevaVersion);
        }
    }
}
```

## 5. Actualizar la interfaz en MainWindow.xaml

Reemplaza el contenido de MainWindow.xaml con el diseño que te proporcioné anteriormente.

## 6. Implementar la lógica en MainWindow.xaml.cs

```csharp
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private BibliaService _bibliaService;
        private VersionBiblia _versionActual;
        private Libro _libroActual;
        private Capitulo _capituloActual;

        public MainWindow()
        {
            InitializeComponent();
            _bibliaService = new BibliaService();
            CargarVersiones();
        }

        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            VersionesComboBox.SelectedIndex = 0;
        }

        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionActual = (VersionBiblia)VersionesComboBox.SelectedItem;
            if (_versionActual != null)
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
                LibrosListBox.DisplayMemberPath = "Nombre";
                LibrosListBox.SelectedIndex = 0;
            }
        }

        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroActual = (Libro)LibrosListBox.SelectedItem;
            if (_libroActual != null)
            {
                CapitulosComboBox.ItemsSource = _libroActual.Capitulos;
                CapitulosComboBox.DisplayMemberPath = "Numero";
                CapitulosComboBox.SelectedIndex = 0;
            }
        }

        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloActual = (Capitulo)CapitulosComboBox.SelectedItem;
            if (_capituloActual != null)
            {
                MostrarCapitulo();
            }
        }

        private void MostrarCapitulo()
        {
            ContenidoTextBlock.Text = "";
            foreach (var versiculo in _capituloActual.Versiculos)
            {
                ContenidoTextBlock.Text += $"{versiculo.Numero}. {versiculo.Texto}\n\n";
            }
        }
    }
}
```

## 7. Ejecutar y probar la aplicación

```bash
dotnet run
```

Esto te dará una aplicación funcional básica. En adelante podrías:

1. Implementar la carga real de datos (JSON, XML o base de datos)
2. Añadir función de búsqueda
3. Implementar marcadores y favoritos
4. Mejorar el diseño visual

¿Quieres más detalles sobre alguna de estas funciones o cómo implementar la carga real de datos de la Biblia?

RafaelG1986: dotnet new wpf
Al crear esta plantilla, se realizarán cambios en los archivos existentes:
  Sobrescribir   ./App.xaml
  Sobrescribir   ./App.xaml.cs
  Sobrescribir   ./AssemblyInfo.cs
  Sobrescribir   ./BibliaApp.csproj
  Sobrescribir   ./MainWindow.xaml
  Sobrescribir   ./MainWindow.xaml.cs

Para crear la plantilla de todos modos, ejecute el comando con la opción '--force':
   dotnet new wpf --force


Para obtener más información sobre el código de salida, consulte https://aka.ms/templating-exit-codes#73

GitHub Copilot: # Creación del Proyecto en un Directorio Nuevo

Veo que ya existe un proyecto o archivos en el directorio actual. Vamos a crear la aplicación en un directorio nuevo para evitar conflictos:

```bash
mkdir BibliaApp
cd BibliaApp
dotnet new wpf
```

Ahora, dentro de este nuevo directorio, creamos la estructura de carpetas:

```bash
mkdir Models
mkdir Services
mkdir Views
mkdir Data
```

## Siguiente paso: Implementar las clases modelo

Crea el archivo `Models/BibliaModels.cs` con las clases que te proporcioné anteriormente:

```csharp
// VersionBiblia, Libro, Capitulo, Versiculo
```

## Después: Crear el servicio de datos

Implementa `Services/BibliaService.cs` para gestionar la carga de datos. Por ahora, usaremos datos de prueba como mostré antes.

## Modificar MainWindow

Actualiza los archivos:
- `MainWindow.xaml` con la interfaz de usuario
- `MainWindow.xaml.cs` con la lógica de la aplicación

Cuando tengas implementados estos archivos, podrás ejecutar la aplicación:

```bash
dotnet run
```

¿Necesitas ayuda para implementar alguno de estos archivos específicos?

RafaelG1986: using System.Collections.Generic;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private List<VersionBiblia> _versiones;

        public BibliaService()
        {
            _versiones = new List<VersionBiblia>();
            CargarDatosDePrueba();
        }

        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }

        public VersionBiblia ObtenerVersion(string id)
        {
            return _versiones.Find(v => v.Id == id);
        }

        private void CargarDatosDePrueba()
        {
            // Simular datos para pruebas iniciales
            var reivaValera = new VersionBiblia
            {
                Id = "rv1960",
                Nombre = "Reina Valera 1960",
                Idioma = "Español"
            };

            var genesis = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1 = new Capitulo { Numero = 1 };
            capitulo1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra." });
            capitulo1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas." });
            
            genesis.Capitulos.Add(capitulo1);
            reivaValera.Libros.Add(genesis);
            _versiones.Add(reivaValera);

            // Añadir otra versión
            var nuevaVersion = new VersionBiblia
            {
                Id = "nvi",
                Nombre = "Nueva Versión Internacional",
                Idioma = "Español"
            };
            
            var genesisNVI = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1NVI = new Capitulo { Numero = 1 };
            capitulo1NVI.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Dios, en el principio, creó los cielos y la tierra." });
            
            genesisNVI.Capitulos.Add(capitulo1NVI);
            nuevaVersion.Libros.Add(genesisNVI);
            _versiones.Add(nuevaVersion);
        }
    }
}----- donde lo agrego?

GitHub Copilot: # Creación del Servicio de Biblia

Debes guardar este código en un nuevo archivo dentro de la carpeta Services. Sigue estos pasos:

1. Crea el archivo `BibliaService.cs` en la carpeta Services:

```bash
mkdir -p Services
```

2. Crea el archivo con el código del servicio:

```csharp
using System.Collections.Generic;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private List<VersionBiblia> _versiones;

        public BibliaService()
        {
            _versiones = new List<VersionBiblia>();
            CargarDatosDePrueba();
        }

        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }

        public VersionBiblia ObtenerVersion(string id)
        {
            return _versiones.Find(v => v.Id == id);
        }

        private void CargarDatosDePrueba()
        {
            // Simular datos para pruebas iniciales
            var reivaValera = new VersionBiblia
            {
                Id = "rv1960",
                Nombre = "Reina Valera 1960",
                Idioma = "Español"
            };

            var genesis = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1 = new Capitulo { Numero = 1 };
            capitulo1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra." });
            capitulo1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas." });
            
            genesis.Capitulos.Add(capitulo1);
            reivaValera.Libros.Add(genesis);
            _versiones.Add(reivaValera);

            // Añadir otra versión
            var nuevaVersion = new VersionBiblia
            {
                Id = "nvi",
                Nombre = "Nueva Versión Internacional",
                Idioma = "Español"
            };
            
            var genesisNVI = new Libro
            {
                Nombre = "Génesis",
                Abreviatura = "Gen"
            };

            var capitulo1NVI = new Capitulo { Numero = 1 };
            capitulo1NVI.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Dios, en el principio, creó los cielos y la tierra." });
            
            genesisNVI.Capitulos.Add(capitulo1NVI);
            nuevaVersion.Libros.Add(genesisNVI);
            _versiones.Add(nuevaVersion);
        }
    }
}
```

Esta clase implementa un servicio que:
- Mantiene una lista de versiones de la Biblia
- Proporciona métodos para obtener versiones
- Carga datos iniciales de prueba con dos versiones diferentes de la Biblia

El siguiente paso sería actualizar la interfaz en MainWindow.xaml y su código detrás.

RafaelG1986: using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private BibliaService _bibliaService;
        private VersionBiblia _versionActual;
        private Libro _libroActual;
        private Capitulo _capituloActual;

        public MainWindow()
        {
            InitializeComponent();
            _bibliaService = new BibliaService();
            CargarVersiones();
        }

        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            VersionesComboBox.SelectedIndex = 0;
        }

        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionActual = (VersionBiblia)VersionesComboBox.SelectedItem;
            if (_versionActual != null)
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
                LibrosListBox.DisplayMemberPath = "Nombre";
                LibrosListBox.SelectedIndex = 0;
            }
        }

        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroActual = (Libro)LibrosListBox.SelectedItem;
            if (_libroActual != null)
            {
                CapitulosComboBox.ItemsSource = _libroActual.Capitulos;
                CapitulosComboBox.DisplayMemberPath = "Numero";
                CapitulosComboBox.SelectedIndex = 0;
            }
        }

        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloActual = (Capitulo)CapitulosComboBox.SelectedItem;
            if (_capituloActual != null)
            {
                MostrarCapitulo();
            }
        }

        private void MostrarCapitulo()
        {
            ContenidoTextBlock.Text = "";
            foreach (var versiculo in _capituloActual.Versiculos)
            {
                ContenidoTextBlock.Text += $"{versiculo.Numero}. {versiculo.Texto}\n\n";
            }
        }
    }
}---- donde lo agrego?

GitHub Copilot: # Actualización del Archivo MainWindow.xaml.cs

Este código corresponde al archivo de código detrás (code-behind) de la ventana principal. Debes guardarlo en:

```csharp
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private BibliaService _bibliaService;
        private VersionBiblia _versionActual;
        private Libro _libroActual;
        private Capitulo _capituloActual;

        public MainWindow()
        {
            InitializeComponent();
            _bibliaService = new BibliaService();
            CargarVersiones();
        }

        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            VersionesComboBox.SelectedIndex = 0;
        }

        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionActual = (VersionBiblia)VersionesComboBox.SelectedItem;
            if (_versionActual != null)
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
                LibrosListBox.DisplayMemberPath = "Nombre";
                LibrosListBox.SelectedIndex = 0;
            }
        }

        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroActual = (Libro)LibrosListBox.SelectedItem;
            if (_libroActual != null)
            {
                CapitulosComboBox.ItemsSource = _libroActual.Capitulos;
                CapitulosComboBox.DisplayMemberPath = "Numero";
                CapitulosComboBox.SelectedIndex = 0;
            }
        }

        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloActual = (Capitulo)CapitulosComboBox.SelectedItem;
            if (_capituloActual != null)
            {
                MostrarCapitulo();
            }
        }

        private void MostrarCapitulo()
        {
            ContenidoTextBlock.Text = "";
            foreach (var versiculo in _capituloActual.Versiculos)
            {
                ContenidoTextBlock.Text += $"{versiculo.Numero}. {versiculo.Texto}\n\n";
            }
        }
    }
}
```

También necesitarás actualizar la interfaz de usuario en el archivo `MainWindow.xaml`. Ese será el siguiente paso para completar la aplicación.

RafaelG1986: dame el siguiente paso

GitHub Copilot: # Siguiente Paso: Actualizar la Interfaz de Usuario en MainWindow.xaml

Ahora necesitas definir la interfaz de usuario en el archivo MainWindow.xaml. Este archivo debe incluir todos los controles que se utilizan en el código detrás (VersionesComboBox, LibrosListBox, etc.).

Crea o actualiza el archivo:

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BibliaApp"
        mc:Ignorable="d"
        Title="Biblia App" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Barra superior -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10">
            <TextBlock Text="Versión:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <ComboBox x:Name="VersionesComboBox" Width="150" Margin="0,0,10,0"
                      SelectionChanged="VersionesComboBox_SelectionChanged"/>
            <Button Content="Buscar" Width="80"/>
        </StackPanel>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel de navegación -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Lista de libros -->
                <ListBox x:Name="LibrosListBox" Grid.Row="0" Margin="10"
                         SelectionChanged="LibrosListBox_SelectionChanged"/>
                
                <!-- Selector de capítulo -->
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="10">
                    <TextBlock Text="Capítulo:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <ComboBox x:Name="CapitulosComboBox" Width="80" 
                              SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                </StackPanel>
            </Grid>
            
            <!-- Visualización del texto -->
            <ScrollViewer Grid.Column="1" Margin="10">
                <TextBlock x:Name="ContenidoTextBlock" TextWrapping="Wrap"/>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
```

## Después de este paso

Una vez que hayas actualizado MainWindow.xaml, podrás ejecutar la aplicación:

```bash
dotnet run
```

Este es un prototipo básico. El siguiente paso después de verificar que funciona podría ser:

1. Mejorar la apariencia visual con estilos y temas
2. Implementar la funcionalidad de búsqueda
3. Añadir la opción de guardar marcadores o notas
4. Implementar carga de datos reales desde archivos XML/JSON

¿Te gustaría enfocarte en alguna de estas mejoras después?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: siguiente paso

GitHub Copilot: # Siguiente Paso: Ejecutar y Probar la Aplicación

Ahora que tienes los archivos principales configurados (modelo, servicio e interfaz), es momento de ejecutar la aplicación y verificar su funcionamiento básico.

## 1. Ejecuta la aplicación

```bash
dotnet run
```

## 2. Prueba la funcionalidad básica

- Verifica que aparezcan las versiones bíblicas en el ComboBox
- Comprueba que al seleccionar una versión se muestren los libros
- Asegúrate que al seleccionar un libro se muestren sus capítulos
- Confirma que los versículos se muestren correctamente

## 3. Mejoras a implementar después de la prueba

Una vez que hayas verificado que la funcionalidad básica está operativa, puedes añadir estas mejoras:

### Ampliar los datos de prueba 

Añade más libros y capítulos a tu servicio para tener una experiencia más completa:

```csharp
// En BibliaService.cs, dentro de CargarDatosDePrueba()
// Añadir más libros como Éxodo, Salmos, etc.
var exodo = new Libro
{
    Nombre = "Éxodo",
    Abreviatura = "Ex"
};
var capitulo1Exodo = new Capitulo { Numero = 1 };
capitulo1Exodo.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Estos son los nombres de los hijos de Israel..." });
// ...
```

### Implementar búsqueda de texto

```csharp
// Agregar método en BibliaService
public List<ResultadoBusqueda> BuscarTexto(string texto)
{
    var resultados = new List<ResultadoBusqueda>();
    // Lógica de búsqueda
    return resultados;
}
```

### Mejorar el diseño visual

Puedes mejorar la apariencia usando estilos, recursos y temas.

### Cargar datos reales

Implementar la carga de datos desde archivos XML/JSON o usar APIs de Biblia disponibles.

¿Cuál de estas mejoras te gustaría implementar primero después de verificar la funcionalidad básica?

RafaelG1986: donde pongo estos codigos?

GitHub Copilot: # Archivos de la Aplicación - Todo está en su lugar

Veo que ya tienes correctamente configurados todos los archivos principales:

1. ✅ `Models/BibliaModels.cs` - Contiene las clases del modelo de datos
2. ✅ `Services/BibliaService.cs` - Implementa el servicio para cargar versiones de la Biblia
3. ✅ `MainWindow.xaml.cs` - Código detrás de la interfaz con la lógica de la aplicación
4. ✅ MainWindow.xaml - Interfaz de usuario con los controles necesarios

## No necesitas agregar más código en este momento

Ya has colocado todos los archivos básicos en las ubicaciones correctas. No hay necesidad de agregar más códigos en este momento.

## Siguiente paso: Ejecutar la aplicación

Ahora puedes probar la aplicación ejecutándola:

```bash
dotnet run
```

Esto debería compilar y ejecutar tu aplicación, mostrando la interfaz con:
- El selector de versiones de la Biblia
- La lista de libros
- El selector de capítulos
- El área de visualización de versículos

¿Funciona correctamente o encuentras algún error al ejecutarla?

RafaelG1986: Funciona bien!

GitHub Copilot: # ¡Enhorabuena! Próximos Pasos para tu Aplicación Bíblica

Es genial que la aplicación esté funcionando correctamente. Has implementado exitosamente una aplicación de Biblia con funcionalidad básica. Ahora puedes considerar estas mejoras:

## Mejoras a corto plazo

1. **Ampliar datos de prueba**:
   - Añadir más libros y capítulos para tener una experiencia más completa
   - Incluir los 66 libros estándar de la Biblia

2. **Mejorar el diseño visual**:
   - Aplicar estilos y temas
   - Mejorar la legibilidad del texto bíblico
   - Destacar versículos por categorías (promesas, mandamientos, etc.)

3. **Implementar búsqueda**:
   - Añadir búsqueda por palabra clave
   - Búsqueda por referencia (ej. "Juan 3:16")

## Mejoras a mediano plazo

1. **Marcadores y favoritos**:
   - Permitir guardar versículos favoritos
   - Crear colecciones de versículos

2. **Carga de datos reales**:
   - Implementar importación desde archivos XML/JSON
   - Conectar con API de Biblia (como Bible.API)

3. **Funcionalidades avanzadas**:
   - Comparación lado a lado de diferentes versiones
   - Notas personales por versículo
   - Historial de lectura

¿Te gustaría que te ayude a implementar alguna de estas mejoras específicas?

RafaelG1986: Listo, quiero añadir mas libros.

GitHub Copilot: # Añadir Más Libros a la Aplicación Bíblica

Para añadir más libros a tu aplicación, debemos modificar el método `CargarDatosDePrueba()` en la clase `BibliaService`. Aquí te muestro cómo ampliar los datos de prueba:

```csharp
private void CargarDatosDePrueba()
{
    // Crear versión Reina Valera 1960
    var reivaValera = new VersionBiblia
    {
        Id = "rv1960",
        Nombre = "Reina Valera 1960",
        Idioma = "Español"
    };
    
    // GÉNESIS
    var genesis = new Libro { Nombre = "Génesis", Abreviatura = "Gen" };
    var genesisC1 = new Capitulo { Numero = 1 };
    genesisC1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra." });
    genesisC1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas." });
    genesis.Capitulos.Add(genesisC1);
    
    // ÉXODO
    var exodo = new Libro { Nombre = "Éxodo", Abreviatura = "Ex" };
    var exodoC1 = new Capitulo { Numero = 1 };
    exodoC1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Estos son los nombres de los hijos de Israel que entraron en Egipto con Jacob; cada uno entró con su familia." });
    exodoC1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Rubén, Simeón, Leví, Judá," });
    exodo.Capitulos.Add(exodoC1);
    
    // SALMOS
    var salmos = new Libro { Nombre = "Salmos", Abreviatura = "Sal" };
    var salmosC1 = new Capitulo { Numero = 1 };
    salmosC1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Bienaventurado el varón que no anduvo en consejo de malos, ni estuvo en camino de pecadores, ni en silla de escarnecedores se ha sentado;" });
    salmosC1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Sino que en la ley de Jehová está su delicia, y en su ley medita de día y de noche." });
    var salmosC23 = new Capitulo { Numero = 23 };
    salmosC23.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Jehová es mi pastor; nada me faltará." });
    salmosC23.Versiculos.Add(new Versiculo { Numero = 2, Texto = "En lugares de delicados pastos me hará descansar; junto a aguas de reposo me pastoreará." });
    salmos.Capitulos.Add(salmosC1);
    salmos.Capitulos.Add(salmosC23);
    
    // JUAN
    var juan = new Libro { Nombre = "Juan", Abreviatura = "Jn" };
    var juanC1 = new Capitulo { Numero = 1 };
    juanC1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "En el principio era el Verbo, y el Verbo era con Dios, y el Verbo era Dios." });
    juanC1.Versiculos.Add(new Versiculo { Numero = 2, Texto = "Este era en el principio con Dios." });
    var juanC3 = new Capitulo { Numero = 3 };
    juanC3.Versiculos.Add(new Versiculo { Numero = 16, Texto = "Porque de tal manera amó Dios al mundo, que ha dado a su Hijo unigénito, para que todo aquel que en él cree, no se pierda, mas tenga vida eterna." });
    juan.Capitulos.Add(juanC1);
    juan.Capitulos.Add(juanC3);
    
    // Añadir libros a Reina Valera
    reivaValera.Libros.Add(genesis);
    reivaValera.Libros.Add(exodo);
    reivaValera.Libros.Add(salmos);
    reivaValera.Libros.Add(juan);
    _versiones.Add(reivaValera);

    // Crear versión NVI (similar pero con menos contenido para simplicidad)
    var nuevaVersion = new VersionBiblia
    {
        Id = "nvi",
        Nombre = "Nueva Versión Internacional",
        Idioma = "Español"
    };
    
    // GÉNESIS NVI
    var genesisNVI = new Libro { Nombre = "Génesis", Abreviatura = "Gen" };
    var genesisNVIC1 = new Capitulo { Numero = 1 };
    genesisNVIC1.Versiculos.Add(new Versiculo { Numero = 1, Texto = "Dios, en el principio, creó los cielos y la tierra." });
    genesisNVI.Capitulos.Add(genesisNVIC1);
    
    // JUAN NVI
    var juanNVI = new Libro { Nombre = "Juan", Abreviatura = "Jn" };
    var juanNVIC3 = new Capitulo { Numero = 3 };
    juanNVIC3.Versiculos.Add(new Versiculo { Numero = 16, Texto = "Porque tanto amó Dios al mundo que dio a su Hijo unigénito, para que todo el que cree en él no se pierda, sino que tenga vida eterna." });
    juanNVI.Capitulos.Add(juanNVIC3);
    
    // Añadir libros a NVI
    nuevaVersion.Libros.Add(genesisNVI);
    nuevaVersion.Libros.Add(juanNVI);
    _versiones.Add(nuevaVersion);
}
```

## Beneficios de esta implementación

1. **Más contenido para explorar**: Ahora tienes varios libros diferentes (Génesis, Éxodo, Salmos y Juan)
2. **Múltiples capítulos en algunos libros**: Salmos tiene los capítulos 1 y 23, Juan tiene los capítulos 1 y 3
3. **Versículos famosos incluidos**: Salmo 23:1-2, Juan 3:16

## Próximo paso después de esta mejora

Una vez implementado este cambio, podrías:

1. Mejorar la interfaz de usuario para mejor visualización
2. Implementar la funcionalidad de búsqueda
3. Añadir una vista detallada de cada libro (descripción, autor, etc.)

¿Alguna de estas mejoras te gustaría implementar a continuación?

RafaelG1986: Quisiera una funcion que me permitiera agregar manualmente versiones, libros, versiculos

GitHub Copilot: # Implementación de Funciones para Agregar Contenido Manualmente

Para permitirte agregar manualmente versiones, libros y versículos, vamos a implementar métodos específicos en la clase `BibliaService`. Luego crearemos una interfaz para utilizar estas funciones.

## 1. Agregar métodos al BibliaService

```csharp
// ...mantener todo el código existente y agregar estos métodos...

// Métodos para agregar contenido manualmente
public VersionBiblia AgregarVersion(string id, string nombre, string idioma)
{
    // Verificar que no exista una versión con el mismo ID
    if (_versiones.Any(v => v.Id == id))
    {
        throw new ArgumentException($"Ya existe una versión con el ID '{id}'");
    }
    
    var nuevaVersion = new VersionBiblia
    {
        Id = id,
        Nombre = nombre,
        Idioma = idioma
    };
    
    _versiones.Add(nuevaVersion);
    return nuevaVersion;
}

public Libro AgregarLibro(string versionId, string nombre, string abreviatura)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    
    // Verificar que no exista un libro con el mismo nombre en esta versión
    if (version.Libros.Any(l => l.Nombre == nombre))
    {
        throw new ArgumentException($"Ya existe un libro llamado '{nombre}' en esta versión");
    }
    
    var nuevoLibro = new Libro
    {
        Nombre = nombre,
        Abreviatura = abreviatura
    };
    
    version.Libros.Add(nuevoLibro);
    return nuevoLibro;
}

public Capitulo AgregarCapitulo(string versionId, string nombreLibro, int numeroCapitulo)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    
    var libro = version.Libros.FirstOrDefault(l => l.Nombre == nombreLibro);
    if (libro == null)
    {
        throw new ArgumentException($"No se encontró el libro '{nombreLibro}' en la versión '{version.Nombre}'");
    }
    
    // Verificar que no exista un capítulo con el mismo número
    if (libro.Capitulos.Any(c => c.Numero == numeroCapitulo))
    {
        throw new ArgumentException($"Ya existe el capítulo {numeroCapitulo} en el libro '{nombreLibro}'");
    }
    
    var nuevoCapitulo = new Capitulo
    {
        Numero = numeroCapitulo
    };
    
    libro.Capitulos.Add(nuevoCapitulo);
    return nuevoCapitulo;
}

public Versiculo AgregarVersiculo(string versionId, string nombreLibro, int numeroCapitulo, int numeroVersiculo, string texto)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    
    var libro = version.Libros.FirstOrDefault(l => l.Nombre == nombreLibro);
    if (libro == null)
    {
        throw new ArgumentException($"No se encontró el libro '{nombreLibro}' en la versión '{version.Nombre}'");
    }
    
    var capitulo = libro.Capitulos.FirstOrDefault(c => c.Numero == numeroCapitulo);
    if (capitulo == null)
    {
        throw new ArgumentException($"No se encontró el capítulo {numeroCapitulo} en el libro '{nombreLibro}'");
    }
    
    // Verificar que no exista un versículo con el mismo número
    if (capitulo.Versiculos.Any(v => v.Numero == numeroVersiculo))
    {
        throw new ArgumentException($"Ya existe el versículo {numeroVersiculo} en el capítulo {numeroCapitulo} de '{nombreLibro}'");
    }
    
    var nuevoVersiculo = new Versiculo
    {
        Numero = numeroVersiculo,
        Texto = texto
    };
    
    capitulo.Versiculos.Add(nuevoVersiculo);
    return nuevoVersiculo;
}
```

## 2. Crear una ventana para agregar contenido

Ahora, vamos a crear una ventana simple para usar estas funciones:

```csharp
using System;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarContenidoWindow : Window
    {
        private BibliaService _bibliaService;
        
        public AgregarContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            VersionComboBox.ItemsSource = _bibliaService.ObtenerVersiones();
            VersionComboBox.DisplayMemberPath = "Nombre";
        }
        
        private void VersionComboBox_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (VersionComboBox.SelectedItem != null)
            {
                var version = (VersionBiblia)VersionComboBox.SelectedItem;
                LibroComboBox.ItemsSource = version.Libros;
                LibroComboBox.DisplayMemberPath = "Nombre";
            }
        }
        
        private void LibroComboBox_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (LibroComboBox.SelectedItem != null)
            {
                var libro = (Libro)LibroComboBox.SelectedItem;
                CapituloComboBox.ItemsSource = libro.Capitulos;
                CapituloComboBox.DisplayMemberPath = "Numero";
            }
        }
        
        private void AgregarVersionBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var id = VersionIdTextBox.Text.Trim();
                var nombre = NombreVersionTextBox.Text.Trim();
                var idioma = IdiomaTextBox.Text.Trim();
                
                if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(nombre) || string.IsNullOrEmpty(idioma))
                {
                    MessageBox.Show("Todos los campos son obligatorios", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                _bibliaService.AgregarVersion(id, nombre, idioma);
                MessageBox.Show($"Versión '{nombre}' agregada correctamente", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                CargarVersiones();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar versión: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void AgregarLibroBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (VersionComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Debe seleccionar una versión", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                var version = (VersionBiblia)VersionComboBox.SelectedItem;
                var nombre = NombreLibroTextBox.Text.Trim();
                var abreviatura = AbreviaturaTextBox.Text.Trim();
                
                if (string.IsNullOrEmpty(nombre) || string.IsNullOrEmpty(abreviatura))
                {
                    MessageBox.Show("Todos los campos son obligatorios", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                _bibliaService.AgregarLibro(version.Id, nombre, abreviatura);
                MessageBox.Show($"Libro '{nombre}' agregado correctamente a la versión '{version.Nombre}'", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                VersionComboBox_SelectionChanged(null, null);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void AgregarCapituloBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (VersionComboBox.SelectedItem == null || LibroComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Debe seleccionar una versión y un libro", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                var version = (VersionBiblia)VersionComboBox.SelectedItem;
                var libro = (Libro)LibroComboBox.SelectedItem;
                
                if (!int.TryParse(NumeroCapituloTextBox.Text, out int numeroCapitulo) || numeroCapitulo <= 0)
                {
                    MessageBox.Show("El número de capítulo debe ser un número entero positivo", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                _bibliaService.AgregarCapitulo(version.Id, libro.Nombre, numeroCapitulo);
                MessageBox.Show($"Capítulo {numeroCapitulo} agregado correctamente al libro '{libro.Nombre}'", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                LibroComboBox_SelectionChanged(null, null);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void AgregarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (VersionComboBox.SelectedItem == null || LibroComboBox.SelectedItem == null || CapituloComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Debe seleccionar una versión, un libro y un capítulo", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                var version = (VersionBiblia)VersionComboBox.SelectedItem;
                var libro = (Libro)LibroComboBox.SelectedItem;
                var capitulo = (Capitulo)CapituloComboBox.SelectedItem;
                
                if (!int.TryParse(NumeroVersiculoTextBox.Text, out int numeroVersiculo) || numeroVersiculo <= 0)
                {
                    MessageBox.Show("El número de versículo debe ser un número entero positivo", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                var texto = TextoVersiculoTextBox.Text.Trim();
                if (string.IsNullOrEmpty(texto))
                {
                    MessageBox.Show("El texto del versículo es obligatorio", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                _bibliaService.AgregarVersiculo(version.Id, libro.Nombre, capitulo.Numero, numeroVersiculo, texto);
                MessageBox.Show($"Versículo {numeroVersiculo} agregado correctamente al capítulo {capitulo.Numero} de '{libro.Nombre}'", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                TextoVersiculoTextBox.Clear();
                NumeroVersiculoTextBox.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
```

## 3. Crear la interfaz XAML para la ventana

```xml
<Window x:Class="BibliaApp.Views.AgregarContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Contenido" Height="550" Width="600">
    <Grid Margin="15">
        <TabControl>
            <!-- Pestaña para agregar versión -->
            <TabItem Header="Versión">
                <StackPanel Margin="10">
                    <TextBlock Text="Agregar Nueva Versión" FontWeight="Bold" Margin="0,0,0,15"/>
                    
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <TextBlock Text="ID:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="VersionIdTextBox" Grid.Row="0" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <TextBlock Text="Nombre:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="NombreVersionTextBox" Grid.Row="1" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <TextBlock Text="Idioma:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="IdiomaTextBox" Grid.Row="2" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <Button x:Name="AgregarVersionBtn" Content="Agregar Versión" 
                                Grid.Row="3" Grid.Column="1"
                                HorizontalAlignment="Right" Margin="0,15,0,0" Padding="10,5"
                                Click="AgregarVersionBtn_Click"/>
                    </Grid>
                </StackPanel>
            </TabItem>
            
            <!-- Pestaña para agregar libro -->
            <TabItem Header="Libro">
                <StackPanel Margin="10">
                    <TextBlock Text="Agregar Nuevo Libro" FontWeight="Bold" Margin="0,0,0,15"/>
                    
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <TextBlock Text="Versión:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="VersionComboBox" Grid.Row="0" Grid.Column="1" 
                                  Margin="0,5" Padding="5" SelectionChanged="VersionComboBox_SelectionChanged"/>
                        
                        <TextBlock Text="Nombre:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="NombreLibroTextBox" Grid.Row="1" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <TextBlock Text="Abreviatura:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="AbreviaturaTextBox" Grid.Row="2" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <Button x:Name="AgregarLibroBtn" Content="Agregar Libro" 
                                Grid.Row="3" Grid.Column="1"
                                HorizontalAlignment="Right" Margin="0,15,0,0" Padding="10,5"
                                Click="AgregarLibroBtn_Click"/>
                    </Grid>
                </StackPanel>
            </TabItem>
            
            <!-- Pestaña para agregar capítulo -->
            <TabItem Header="Capítulo">
                <StackPanel Margin="10">
                    <TextBlock Text="Agregar Nuevo Capítulo" FontWeight="Bold" Margin="0,0,0,15"/>
                    
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <TextBlock Text="Versión:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="VersionComboBoxCapitulo" Grid.Row="0" Grid.Column="1" 
                                  Margin="0,5" Padding="5" SelectionChanged="VersionComboBox_SelectionChanged"/>
                        
                        <TextBlock Text="Libro:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="LibroComboBox" Grid.Row="1" Grid.Column="1" 
                                  Margin="0,5" Padding="5" SelectionChanged="LibroComboBox_SelectionChanged"/>
                        
                        <TextBlock Text="Número:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="NumeroCapituloTextBox" Grid.Row="2" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <Button x:Name="AgregarCapituloBtn" Content="Agregar Capítulo" 
                                Grid.Row="3" Grid.Column="1"
                                HorizontalAlignment="Right" Margin="0,15,0,0" Padding="10,5"
                                Click="AgregarCapituloBtn_Click"/>
                    </Grid>
                </StackPanel>
            </TabItem>
            
            <!-- Pestaña para agregar versículo -->
            <TabItem Header="Versículo">
                <StackPanel Margin="10">
                    <TextBlock Text="Agregar Nuevo Versículo" FontWeight="Bold" Margin="0,0,0,15"/>
                    
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <TextBlock Text="Versión:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="VersionComboBoxVersiculo" Grid.Row="0" Grid.Column="1" 
                                  Margin="0,5" Padding="5" SelectionChanged="VersionComboBox_SelectionChanged"/>
                        
                        <TextBlock Text="Libro:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="LibroComboBoxVersiculo" Grid.Row="1" Grid.Column="1" 
                                  Margin="0,5" Padding="5" SelectionChanged="LibroComboBox_SelectionChanged"/>
                        
                        <TextBlock Text="Capítulo:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="CapituloComboBox" Grid.Row="2" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <TextBlock Text="Número:" Grid.Row="3" Grid.Column="0" VerticalAlignment="Center"/>
                        <TextBox x:Name="NumeroVersiculoTextBox" Grid.Row="3" Grid.Column="1" Margin="0,5" Padding="5"/>
                        
                        <TextBlock Text="Texto:" Grid.Row="4" Grid.Column="0" VerticalAlignment="Top" Margin="0,10,0,0"/>
                        <TextBox x:Name="TextoVersiculoTextBox" Grid.Row="4" Grid.Column="1" 
                                 Margin="0,5" Padding="5" TextWrapping="Wrap" Height="100" AcceptsReturn="True"/>
                        
                        <Button x:Name="AgregarVersiculoBtn" Content="Agregar Versículo" 
                                Grid.Row="5" Grid.Column="1"
                                HorizontalAlignment="Right" Margin="0,15,0,0" Padding="10,5"
                                Click="AgregarVersiculoBtn_Click"/>
                    </Grid>
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
```

## 4. Modificar MainWindow.xaml para agregar un botón que abra esta ventana

```xml
<!-- Añadir esto a la barra superior en MainWindow.xaml -->
<Button Content="Agregar Contenido" Width="120" Margin="10,0,0,0" Click="AbrirAgregarContenido_Click"/>
```

## 5. Añadir el método para abrir la ventana en MainWindow.xaml.cs

```csharp
// Agregar este método a MainWindow.xaml.cs
private void AbrirAgregarContenido_Click(object sender, RoutedEventArgs e)
{
    var ventanaAgregar = new AgregarContenidoWindow(_bibliaService);
    ventanaAgregar.Owner = this;
    ventanaAgregar.ShowDialog();
    
    // Actualizar la interfaz después de agregar contenido
    if (_versionActual != null)
    {
        // Recargar los libros para la versión actual
        LibrosListBox.ItemsSource = null;
        LibrosListBox.ItemsSource = _versionActual.Libros;
    }
}
```

Esta implementación te permitirá:
1. Añadir nuevas versiones de la Biblia
2. Añadir libros a versiones existentes
3. Añadir capítulos a libros existentes 
4. Añadir versículos a capítulos existentes

Todo desde una interfaz gráfica organizada por pestañas para cada tipo de contenido.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: C:\Biblia\BibliaApp\MainWindow.xaml.cs(23,16): warning CS8618: El
 elemento campo "_versionActual" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla
rar el campo como un valor que acepta valores NULL. [C:\Biblia\Bi 
bliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(23,16): warning CS8618: El 
 elemento campo "_libroActual" que no acepta valores NULL debe co 
ntener un valor distinto de NULL al salir del constructor. Consid 
ere la posibilidad de agregar el modificador "required'"o declara 
r el campo como un valor que acepta valores NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(23,16): warning CS8618: El 
 elemento campo "_capituloActual" que no acepta valores NULL debe 
 contener un valor distinto de NULL al salir del constructor. Con 
sidere la posibilidad de agregar el modificador "required'"o decl 
arar el campo como un valor que acepta valores NULL. [C:\Biblia\B 
ibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(44,23): warning CS8618 
: El elemento propiedad "Texto" que no acepta valores NULL debe c 
ontener un valor distinto de NULL al salir del constructor. Consi 
dere la posibilidad de agregar el modificador "required'"o declar 
ar el propiedad como un valor que acepta valores NULL. [C:\Biblia 
\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(24,16): warning CS8618 
: El elemento propiedad "Nombre" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(24,16): warning CS8618 
: El elemento propiedad "Abreviatura" que no acepta valores NULL  
debe contener un valor distinto de NULL al salir del constructor. 
 Considere la posibilidad de agregar el modificador "required'"o  
declarar el propiedad como un valor que acepta valores NULL. [C:\ 
Biblia\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Id" que no acepta valores NULL debe cont 
ener un valor distinto de NULL al salir del constructor. Consider 
e la posibilidad de agregar el modificador "required'"o declarar  
el propiedad como un valor que acepta valores NULL. [C:\Biblia\Bi 
bliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Nombre" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Idioma" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(26,20): warning CS8 
603: Posible tipo de valor devuelto de referencia nulo. [C:\Bibli 
a\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(80,38): error CS0246: El n 
ombre del tipo o del espacio de nombres 'AgregarContenidoWindow'  
no se encontró (¿falta una directiva using o una referencia de en 
samblado?) [C:\Biblia\BibliaApp\BibliaApp_5nd1gdj2_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(91,50):  
warning CS8625: No se puede convertir un literal NULL en un tipo  
de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\Bi 
bliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(91,56):  
warning CS8625: No se puede convertir un literal NULL en un tipo  
de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\Bi 
bliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,48): 
 warning CS8625: No se puede convertir un literal NULL en un tipo 
 de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\B 
ibliaApp_5nd1gdj2_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,54): 
 warning CS8625: No se puede convertir un literal NULL en un tipo 
 de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\B 
ibliaApp_5nd1gdj2_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solucionar los errores de compilación

Veo que tienes varios errores y advertencias que resolver. Vamos a solucionarlos uno por uno:

## 1. Error principal: No se encuentra AgregarContenidoWindow

Este es el error más importante que impide la compilación. Necesitas agregar la directiva `using` correspondiente en MainWindow.xaml.cs:

```csharp
// Añadir al principio del archivo junto con los otros using
using BibliaApp.Views;
```

## 2. Advertencias de valores NULL

Para solucionar las advertencias de valores NULL, tienes dos opciones:

### Opción 1: Declarar los campos como nullables

```csharp
private BibliaService _bibliaService = null!;
private VersionBiblia? _versionActual;
private Libro? _libroActual;
private Capitulo? _capituloActual;
```

### Opción 2: Modificar BibliaModels.cs para aceptar valores NULL

```csharp
public class VersionBiblia
{
    public string? Id { get; set; }
    public string? Nombre { get; set; }
    public string? Idioma { get; set; }
    public List<Libro> Libros { get; set; }

    public VersionBiblia()
    {
        Libros = new List<Libro>();
    }
}

public class Libro
{
    public string? Nombre { get; set; }
    public string? Abreviatura { get; set; }
    public List<Capitulo> Capitulos { get; set; }

    public Libro()
    {
        Capitulos = new List<Capitulo>();
    }
}

public class Versiculo
{
    public int Numero { get; set; }
    public string? Texto { get; set; }
}
```

## 3. Advertencia en BibliaService

```csharp
public VersionBiblia? ObtenerVersion(string id)
{
    return _versiones.Find(v => v.Id == id);
}
```

## 4. Advertencias en AgregarContenidoWindow

En la clase AgregarContenidoWindow, reemplaza las llamadas null:

```csharp
// Reemplazar
VersionComboBox_SelectionChanged(null, null);

// Por
VersionComboBox_SelectionChanged(sender, new SelectionChangedEventArgs(e.RoutedEvent, new List<object>(), new List<object>()));
```

O simplemente puedes modificar el método para aceptar valores NULL:

```csharp
private void VersionComboBox_SelectionChanged(object? sender, SelectionChangedEventArgs? e)
{
    if (VersionComboBox.SelectedItem != null)
    {
        var version = (VersionBiblia)VersionComboBox.SelectedItem;
        LibroComboBox.ItemsSource = version.Libros;
        LibroComboBox.DisplayMemberPath = "Nombre";
    }
}
```

Implementa estos cambios y deberías poder compilar correctamente la aplicación.

RafaelG1986: C:\Biblia\BibliaApp\Models\BibliaModels.cs(44,23): warning CS8618
: El elemento propiedad "Texto" que no acepta valores NULL debe c 
ontener un valor distinto de NULL al salir del constructor. Consi 
dere la posibilidad de agregar el modificador "required'"o declar
ar el propiedad como un valor que acepta valores NULL. [C:\Biblia 
\BibliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(91,62):  
error CS0246: El nombre del tipo o del espacio de nombres 'Select 
ionChangedEventArgs' no se encontró (¿falta una directiva using o 
 una referencia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_4h 
qo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(73,39): warning CS8602: De 
sreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibli 
aApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(24,16): warning CS8618 
: El elemento propiedad "Nombre" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(24,16): warning CS8618 
: El elemento propiedad "Abreviatura" que no acepta valores NULL  
debe contener un valor distinto de NULL al salir del constructor. 
 Considere la posibilidad de agregar el modificador "required'"o  
declarar el propiedad como un valor que acepta valores NULL. [C:\ 
Biblia\BibliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Id" que no acepta valores NULL debe cont 
ener un valor distinto de NULL al salir del constructor. Consider 
e la posibilidad de agregar el modificador "required'"o declarar  
el propiedad como un valor que acepta valores NULL. [C:\Biblia\Bi 
bliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Nombre" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\BibliaModels.cs(12,16): warning CS8618 
: El elemento propiedad "Idioma" que no acepta valores NULL debe  
contener un valor distinto de NULL al salir del constructor. Cons 
idere la posibilidad de agregar el modificador "required'"o decla 
rar el propiedad como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,48): 
 warning CS8625: No se puede convertir un literal NULL en un tipo 
 de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\B 
ibliaApp_4hqo050k_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,54): 
 warning CS8625: No se puede convertir un literal NULL en un tipo 
 de referencia que no acepta valores NULL. [C:\Biblia\BibliaApp\B 
ibliaApp_4hqo050k_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución de errores de compilación

Necesitas hacer varios ajustes para resolver estos errores:

## 1. Agregar using para SelectionChangedEventArgs en AgregarContenidoWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
```

## 2. Modificar BibliaModels.cs para aceptar valores NULL

```csharp
public class VersionBiblia
{
    public string? Id { get; set; }
    public string? Nombre { get; set; }
    public string? Idioma { get; set; }
    public List<Libro> Libros { get; set; }

    public VersionBiblia()
    {
        Libros = new List<Libro>();
    }
}

public class Libro
{
    public string? Nombre { get; set; }
    public string? Abreviatura { get; set; }
    public List<Capitulo> Capitulos { get; set; }

    public Libro()
    {
        Capitulos = new List<Capitulo>();
    }
}

public class Versiculo
{
    public int Numero { get; set; }
    public string? Texto { get; set; }
}
```

## 3. Corregir el método LibroComboBox_SelectionChanged para aceptar NULL

```csharp
private void LibroComboBox_SelectionChanged(object? sender, System.Windows.Controls.SelectionChangedEventArgs? e)
{
    if (LibroComboBox.SelectedItem != null)
    {
        var libro = (Libro)LibroComboBox.SelectedItem;
        CapituloComboBox.ItemsSource = libro.Capitulos;
        CapituloComboBox.DisplayMemberPath = "Numero";
    }
}
```

## 4. Modificar el acceso a Versiculos en MainWindow.xaml.cs

```csharp
private void MostrarCapitulo()
{
    ContenidoTextBlock.Text = "";
    if (_capituloActual != null && _capituloActual.Versiculos != null)
    {
        foreach (var versiculo in _capituloActual.Versiculos)
        {
            ContenidoTextBlock.Text += $"{versiculo.Numero}. {versiculo.Texto}\n\n";
        }
    }
}
```

## 5. Corregir el llamado en AgregarCapituloBtn_Click

```csharp
// Reemplazar esta línea:
LibroComboBox_SelectionChanged(null, null);

// Por esta:
LibroComboBox_SelectionChanged(sender, e);
```

Estos cambios deberían resolver todos los errores y advertencias, permitiendo que tu aplicación compile correctamente.

RafaelG1986: C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(91,45): 
warning CS8604: Posible argumento de referencia nulo para el pará 
metro "versionId" en "Libro BibliaService.AgregarLibro(string ver 
sionId, string nombre, string abreviatura)". [C:\Biblia\BibliaApp
\BibliaApp_hxgktpnr_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(122,56): 
 error CS1503: Argumento 2: no se puede convertir de 'System.Wind 
ows.RoutedEventArgs' a 'System.Windows.Controls.SelectionChangedE 
ventArgs?' [C:\Biblia\BibliaApp\BibliaApp_hxgktpnr_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,48): 
 warning CS8604: Posible argumento de referencia nulo para el par 
ámetro "versionId" en "Capitulo BibliaService.AgregarCapitulo(str 
ing versionId, string nombreLibro, int numeroCapitulo)". [C:\Bibl 
ia\BibliaApp\BibliaApp_hxgktpnr_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(120,60): 
 warning CS8604: Posible argumento de referencia nulo para el par 
ámetro "nombreLibro" en "Capitulo BibliaService.AgregarCapitulo(s 
tring versionId, string nombreLibro, int numeroCapitulo)". [C:\Bi 
blia\BibliaApp\BibliaApp_hxgktpnr_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(157,49): 
 warning CS8604: Posible argumento de referencia nulo para el par 
ámetro "versionId" en "Versiculo BibliaService.AgregarVersiculo(s 
tring versionId, string nombreLibro, int numeroCapitulo, int nume 
roVersiculo, string texto)". [C:\Biblia\BibliaApp\BibliaApp_hxgkt 
pnr_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\AgregarContenidoWindow.xaml.cs(157,61): 
 warning CS8604: Posible argumento de referencia nulo para el par 
ámetro "nombreLibro" en "Versiculo BibliaService.AgregarVersiculo 
(string versionId, string nombreLibro, int numeroCapitulo, int nu 
meroVersiculo, string texto)". [C:\Biblia\BibliaApp\BibliaApp_hxg 
ktpnr_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Correcciones para los errores de compilación

Necesitas solucionar dos tipos de problemas:
1. Error en la conversión de tipos de evento
2. Advertencias sobre posibles valores NULL

## 1. Corrige el error en AgregarCapituloBtn_Click

```csharp
// Reemplaza esta línea en AgregarCapituloBtn_Click:
LibroComboBox_SelectionChanged(sender, e);

// Por esta:
LibroComboBox_SelectionChanged(sender, null);
```

## 2. Corrige las advertencias de argumentos NULL en los métodos de agregar

```csharp
// En AgregarLibroBtn_Click:
_bibliaService.AgregarLibro(version.Id ?? "", nombre, abreviatura);

// En AgregarCapituloBtn_Click:
_bibliaService.AgregarCapitulo(version.Id ?? "", libro.Nombre ?? "", numeroCapitulo);

// En AgregarVersiculoBtn_Click:
_bibliaService.AgregarVersiculo(version.Id ?? "", libro.Nombre ?? "", capitulo.Numero, numeroVersiculo, texto);
```

También puedes modificar los métodos en `BibliaService` para manejar valores NULL, pero esta es la solución más rápida para poder compilar tu aplicación.

Estos cambios deberían resolver tanto el error de compilación como las advertencias. El operador `??` proporciona un valor predeterminado (cadena vacía en este caso) cuando la expresión a la izquierda es NULL.

RafaelG1986: Listo, funcionó.

GitHub Copilot: # ¡Excelente! Siguiente paso en tu Aplicación Bíblica

Me alegra que el código funcione correctamente. Ahora tienes una aplicación funcional que te permite:

1. Ver diferentes versiones de la Biblia
2. Navegar por libros, capítulos y versículos
3. Agregar nuevo contenido manualmente

## Mejoras que podrías implementar

Ahora que tienes la base funcionando, podrías considerar estas mejoras:

1. **Persistencia de datos**:
   - Guardar los datos en un archivo JSON o XML
   - Implementar una base de datos SQLite

2. **Búsqueda de texto**:
   - Añadir un cuadro de búsqueda para encontrar versículos específicos
   - Implementar búsqueda por referencias (ej. "Juan 3:16")

3. **Mejoras visuales**:
   - Añadir temas claro/oscuro
   - Personalizar el tamaño de fuente
   - Permitir resaltar versículos importantes

4. **Funcionalidades avanzadas**:
   - Marcadores y favoritos
   - Notas personales
   - Comparación de versiones lado a lado

¿Cuál de estas mejoras te gustaría implementar primero?

RafaelG1986: Listo hagamoslo

GitHub Copilot: # Implementación de Persistencia de Datos con JSON

Vamos a implementar la persistencia de datos utilizando JSON para que los datos de tu aplicación no se pierdan al cerrarla. Esto es especialmente importante para una aplicación de Biblia donde puedes querer agregar mucho contenido.

## 1. Agrega referencia al paquete Newtonsoft.Json

Primero, agrega la referencia a Newtonsoft.Json (uno de los serializadores más populares):

```bash
dotnet add package Newtonsoft.Json
```

## 2. Crea un servicio de almacenamiento

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using BibliaApp.Models;
using Newtonsoft.Json;

namespace BibliaApp.Services
{
    public class AlmacenamientoService
    {
        private readonly string _archivoVersiones;

        public AlmacenamientoService()
        {
            // Guardar el archivo en la carpeta Documentos del usuario
            string carpetaApp = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                "BibliaApp");
                
            // Crear la carpeta si no existe
            if (!Directory.Exists(carpetaApp))
            {
                Directory.CreateDirectory(carpetaApp);
            }
            
            _archivoVersiones = Path.Combine(carpetaApp, "versiones.json");
        }

        public void GuardarVersiones(List<VersionBiblia> versiones)
        {
            try
            {
                string jsonData = JsonConvert.SerializeObject(versiones, Formatting.Indented);
                File.WriteAllText(_archivoVersiones, jsonData);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al guardar las versiones: {ex.Message}", ex);
            }
        }

        public List<VersionBiblia> CargarVersiones()
        {
            try
            {
                if (!File.Exists(_archivoVersiones))
                {
                    return new List<VersionBiblia>();
                }

                string jsonData = File.ReadAllText(_archivoVersiones);
                return JsonConvert.DeserializeObject<List<VersionBiblia>>(jsonData) ?? new List<VersionBiblia>();
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al cargar las versiones: {ex.Message}", ex);
            }
        }
    }
}
```

## 3. Modifica BibliaService para usar el servicio de almacenamiento

```csharp
// Modificar la clase BibliaService
private AlmacenamientoService _almacenamientoService;

public BibliaService()
{
    _almacenamientoService = new AlmacenamientoService();
    _versiones = _almacenamientoService.CargarVersiones();
    
    // Solo cargar datos de prueba si no hay versiones guardadas
    if (_versiones.Count == 0)
    {
        CargarDatosDePrueba();
        _almacenamientoService.GuardarVersiones(_versiones);
    }
}

// Modificar los métodos de agregar para guardar los cambios

public VersionBiblia AgregarVersion(string id, string nombre, string idioma)
{
    // Verificar que no exista una versión con el mismo ID
    if (_versiones.Any(v => v.Id == id))
    {
        throw new ArgumentException($"Ya existe una versión con el ID '{id}'");
    }
    
    var nuevaVersion = new VersionBiblia
    {
        Id = id,
        Nombre = nombre,
        Idioma = idioma
    };
    
    _versiones.Add(nuevaVersion);
    _almacenamientoService.GuardarVersiones(_versiones);
    return nuevaVersion;
}

// Agregar guardar también en AgregarLibro, AgregarCapitulo y AgregarVersiculo
// Ejemplo para AgregarLibro:
public Libro AgregarLibro(string versionId, string nombre, string abreviatura)
{
    // Código existente...
    
    version.Libros.Add(nuevoLibro);
    _almacenamientoService.GuardarVersiones(_versiones);
    return nuevoLibro;
}
```

## 4. Haz lo mismo para los otros métodos de agregar

Añade la línea `_almacenamientoService.GuardarVersiones(_versiones);` en los métodos:
- AgregarCapitulo
- AgregarVersiculo

## 5. Actualiza MainWindow.xaml.cs con funcionalidad para guardar

```csharp
// En el constructor:
public MainWindow()
{
    InitializeComponent();
    _bibliaService = new BibliaService();
    CargarVersiones();
    
    // Agregar handler para guardar al cerrar
    Closing += MainWindow_Closing;
}

private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
{
    // Los datos ya se guardan automáticamente en cada operación, 
    // pero podrías agregar confirmación de salida aquí si lo deseas
}
```

Con estas modificaciones, tu aplicación ahora:

1. Guardará automáticamente todas las versiones, libros, capítulos y versículos en un archivo JSON
2. Cargará los datos guardados al iniciar la aplicación
3. Solo cargará los datos de prueba la primera vez que se ejecute la aplicación

¿Quieres implementar también alguna otra mejora, como la búsqueda de texto o mejoras visuales?

RafaelG1986: 4. Haz lo mismo para los otros métodos de agregar
Añade la línea _almacenamientoService.GuardarVersiones(_versiones); en los métodos:

AgregarCapitulo
AgregarVersiculo

GitHub Copilot: # Actualización de Métodos en BibliaService.cs

Para completar la implementación de la persistencia de datos, necesitas modificar los métodos `AgregarCapitulo` y `AgregarVersiculo` en el archivo `BibliaService.cs`:

```csharp
public Capitulo AgregarCapitulo(string versionId, string nombreLibro, int numeroCapitulo)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    
    var libro = version.Libros.FirstOrDefault(l => l.Nombre == nombreLibro);
    if (libro == null)
    {
        throw new ArgumentException($"No se encontró el libro '{nombreLibro}' en la versión '{version.Nombre}'");
    }
    
    // Verificar que no exista un capítulo con el mismo número
    if (libro.Capitulos.Any(c => c.Numero == numeroCapitulo))
    {
        throw new ArgumentException($"Ya existe el capítulo {numeroCapitulo} en el libro '{nombreLibro}'");
    }
    
    var nuevoCapitulo = new Capitulo
    {
        Numero = numeroCapitulo
    };
    
    libro.Capitulos.Add(nuevoCapitulo);
    _almacenamientoService.GuardarVersiones(_versiones); // Añadir esta línea
    return nuevoCapitulo;
}

public Versiculo AgregarVersiculo(string versionId, string nombreLibro, int numeroCapitulo, int numeroVersiculo, string texto)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    
    var libro = version.Libros.FirstOrDefault(l => l.Nombre == nombreLibro);
    if (libro == null)
    {
        throw new ArgumentException($"No se encontró el libro '{nombreLibro}' en la versión '{version.Nombre}'");
    }
    
    var capitulo = libro.Capitulos.FirstOrDefault(c => c.Numero == numeroCapitulo);
    if (capitulo == null)
    {
        throw new ArgumentException($"No se encontró el capítulo {numeroCapitulo} en el libro '{nombreLibro}'");
    }
    
    // Verificar que no exista un versículo con el mismo número
    if (capitulo.Versiculos.Any(v => v.Numero == numeroVersiculo))
    {
        throw new ArgumentException($"Ya existe el versículo {numeroVersiculo} en el capítulo {numeroCapitulo} de '{nombreLibro}'");
    }
    
    var nuevoVersiculo = new Versiculo
    {
        Numero = numeroVersiculo,
        Texto = texto
    };
    
    capitulo.Versiculos.Add(nuevoVersiculo);
    _almacenamientoService.GuardarVersiones(_versiones); // Añadir esta línea
    return nuevoVersiculo;
}
```

Con estos cambios, ahora todos tus métodos de agregar contenido (versiones, libros, capítulos y versículos) guardarán automáticamente los datos después de cada operación.

Esto garantiza que todos los cambios realizados en la aplicación se conserven entre sesiones, lo que es crucial para una aplicación como una Biblia donde podrías agregar mucho contenido con el tiempo.

RafaelG1986: Ok, siguiente paso

GitHub Copilot: # Siguiente Paso: Implementar Búsqueda de Texto

Ahora que tienes la persistencia de datos funcionando, vamos a implementar la funcionalidad de búsqueda para permitir a los usuarios encontrar versículos específicos.

## 1. Añadir método de búsqueda en BibliaService

```csharp
// Añadir esta clase para los resultados de búsqueda
public class ResultadoBusqueda
{
    public VersionBiblia Version { get; set; }
    public Libro Libro { get; set; }
    public Capitulo Capitulo { get; set; }
    public Versiculo Versiculo { get; set; }
    public string Referencia => $"{Libro.Nombre} {Capitulo.Numero}:{Versiculo.Numero}";
}

// Añadir este método a la clase BibliaService
public List<ResultadoBusqueda> BuscarTexto(string textoBusqueda, string? versionId = null)
{
    var resultados = new List<ResultadoBusqueda>();
    
    if (string.IsNullOrWhiteSpace(textoBusqueda))
    {
        return resultados;
    }
    
    textoBusqueda = textoBusqueda.ToLower();
    
    // Filtra por versión si se especifica
    var versionesABuscar = versionId != null 
        ? _versiones.Where(v => v.Id == versionId) 
        : _versiones;
    
    foreach (var version in versionesABuscar)
    {
        foreach (var libro in version.Libros)
        {
            foreach (var capitulo in libro.Capitulos)
            {
                foreach (var versiculo in capitulo.Versiculos)
                {
                    if (versiculo.Texto != null && versiculo.Texto.ToLower().Contains(textoBusqueda))
                    {
                        resultados.Add(new ResultadoBusqueda
                        {
                            Version = version,
                            Libro = libro,
                            Capitulo = capitulo,
                            Versiculo = versiculo
                        });
                    }
                }
            }
        }
    }
    
    return resultados;
}
```

## 2. Crear ventana de búsqueda

```csharp
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class BusquedaWindow : Window
    {
        private BibliaService _bibliaService;
        
        public BusquedaWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            
            // Cargar versiones en el ComboBox
            VersionComboBox.ItemsSource = _bibliaService.ObtenerVersiones();
            VersionComboBox.DisplayMemberPath = "Nombre";
            VersionComboBox.SelectedIndex = 0;
        }
        
        private void BuscarBtn_Click(object sender, RoutedEventArgs e)
        {
            string textoBusqueda = BusquedaTextBox.Text.Trim();
            
            if (string.IsNullOrEmpty(textoBusqueda))
            {
                MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            
            string versionId = null;
            if (FiltrarVersionCheckBox.IsChecked == true && VersionComboBox.SelectedItem != null)
            {
                versionId = ((VersionBiblia)VersionComboBox.SelectedItem).Id;
            }
            
            var resultados = _bibliaService.BuscarTexto(textoBusqueda, versionId);
            
            if (resultados.Count == 0)
            {
                MessageBox.Show($"No se encontraron resultados para '{textoBusqueda}'", "Sin resultados", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            
            ResultadosListView.ItemsSource = resultados;
        }
        
        private void ResultadosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ResultadosListView.SelectedItem != null)
            {
                var resultado = (ResultadoBusqueda)ResultadosListView.SelectedItem;
                
                // Mostrar el texto completo del versículo seleccionado
                DetalleTextBlock.Text = $"{resultado.Referencia} ({resultado.Version.Nombre}):\n\n{resultado.Versiculo.Texto}";
            }
        }
        
        private void AbrirVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (ResultadosListView.SelectedItem != null)
            {
                var resultado = (ResultadoBusqueda)ResultadosListView.SelectedItem;
                
                // Establecer propiedad pública para que MainWindow pueda acceder a ella
                SeleccionarVersiculo = resultado;
                DialogResult = true;
                Close();
            }
            else
            {
                MessageBox.Show("Por favor, seleccione un resultado para abrir.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        // Propiedad para devolver el resultado seleccionado a la ventana principal
        public ResultadoBusqueda SeleccionarVersiculo { get; private set; }
    }
}
```

## 3. Crear interfaz XAML para la ventana de búsqueda

```xml
<Window x:Class="BibliaApp.Views.BusquedaWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Buscar en la Biblia" Height="500" Width="700">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Área de búsqueda -->
        <StackPanel Grid.Row="0">
            <TextBlock Text="Buscar texto:" Margin="0,0,0,5"/>
            <TextBox x:Name="BusquedaTextBox" Padding="5" KeyDown="BusquedaTextBox_KeyDown"/>
            
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <CheckBox x:Name="FiltrarVersionCheckBox" Content="Filtrar por versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <ComboBox x:Name="VersionComboBox" Width="200" IsEnabled="{Binding IsChecked, ElementName=FiltrarVersionCheckBox}"/>
                <Button x:Name="BuscarBtn" Content="Buscar" Width="100" Margin="10,0,0,0" Click="BuscarBtn_Click"/>
            </StackPanel>
        </StackPanel>
        
        <!-- Separador -->
        <Separator Grid.Row="1" Margin="0,10"/>
        
        <!-- Resultados y detalles -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de resultados -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <TextBlock DockPanel.Dock="Top" Text="Resultados:" Margin="0,0,0,5"/>
                <ListView x:Name="ResultadosListView" SelectionChanged="ResultadosListView_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Referencia" DisplayMemberBinding="{Binding Referencia}" Width="120"/>
                            <GridViewColumn Header="Versión" DisplayMemberBinding="{Binding Version.Nombre}" Width="120"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Detalle del versículo -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <TextBlock DockPanel.Dock="Top" Text="Detalle:" Margin="0,0,0,5"/>
                <TextBlock x:Name="DetalleTextBlock" TextWrapping="Wrap" Background="#F5F5F5" Padding="10"/>
            </DockPanel>
        </Grid>
        
        <!-- Botones inferiores -->
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="AbrirVersiculoBtn" Content="Abrir Versículo" Width="120" Click="AbrirVersiculoBtn_Click"/>
            <Button x:Name="CerrarBtn" Content="Cerrar" Width="80" Margin="10,0,0,0" IsCancel="True"/>
        </StackPanel>
    </Grid>
</Window>
```

## 4. Añadir el evento KeyDown para permitir buscar con Enter

```csharp
// Añadir este método
private void BusquedaTextBox_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
{
    if (e.Key == System.Windows.Input.Key.Enter)
    {
        BuscarBtn_Click(sender, e);
    }
}
```

## 5. Modificar MainWindow.xaml para añadir botón de búsqueda

```xml
<!-- Modificar el botón de búsqueda en MainWindow.xaml -->
<Button Content="Buscar" Width="80" Click="AbrirBusqueda_Click"/>
```

## 6. Implementar método AbrirBusqueda_Click en MainWindow.xaml.cs

```csharp
private void AbrirBusqueda_Click(object sender, RoutedEventArgs e)
{
    var ventanaBusqueda = new BusquedaWindow(_bibliaService);
    ventanaBusqueda.Owner = this;
    
    if (ventanaBusqueda.ShowDialog() == true)
    {
        // Si se seleccionó un versículo, navegar hasta él
        var resultado = ventanaBusqueda.SeleccionarVersiculo;
        
        // Seleccionar versión
        foreach (var item in VersionesComboBox.Items)
        {
            var version = (VersionBiblia)item;
            if (version.Id == resultado.Version.Id)
            {
                VersionesComboBox.SelectedItem = version;
                break;
            }
        }
        
        // Seleccionar libro
        foreach (var item in LibrosListBox.Items)
        {
            var libro = (Libro)item;
            if (libro.Nombre == resultado.Libro.Nombre)
            {
                LibrosListBox.SelectedItem = libro;
                break;
            }
        }
        
        // Seleccionar capítulo
        foreach (var item in CapitulosComboBox.Items)
        {
            var capitulo = (Capitulo)item;
            if (capitulo.Numero == resultado.Capitulo.Numero)
            {
                CapitulosComboBox.SelectedItem = capitulo;
                break;
            }
        }
        
        // Resaltar el versículo (opcional)
        // Aquí podrías agregar código para resaltar el versículo específico
    }
}
```

Esta implementación de búsqueda te permitirá:
1. Buscar texto en toda la Biblia o en una versión específica
2. Ver los resultados con sus referencias
3. Ver el detalle de cada resultado
4. Navegar directamente al versículo seleccionado

¿Quieres implementar también la función para resaltar el versículo encontrado cuando navegas a él?

Código similar encontrado con 2 tipos de licencias

RafaelG1986: Siguiente paso

GitHub Copilot: # Siguiente Paso: Implementar Sistema de Marcadores/Favoritos

Para mejorar tu aplicación, vamos a implementar un sistema de marcadores que permita a los usuarios guardar sus versículos favoritos y acceder a ellos rápidamente.

## 1. Crear modelo de datos para Marcadores

```csharp
using System;

namespace BibliaApp.Models
{
    public class Marcador
    {
        public string Id { get; set; }
        public string VersionId { get; set; }
        public string NombreLibro { get; set; }
        public int NumeroCapitulo { get; set; }
        public int NumeroVersiculo { get; set; }
        public string Nota { get; set; }
        public DateTime FechaCreacion { get; set; }

        public string Referencia => $"{NombreLibro} {NumeroCapitulo}:{NumeroVersiculo}";

        public Marcador()
        {
            Id = Guid.NewGuid().ToString();
            Nota = "";
            FechaCreacion = DateTime.Now;
        }
    }
}
```

## 2. Agregar servicio de gestión de marcadores

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using BibliaApp.Models;
using Newtonsoft.Json;

namespace BibliaApp.Services
{
    public class MarcadoresService
    {
        private readonly string _archivoMarcadores;
        private List<Marcador> _marcadores;

        public MarcadoresService()
        {
            string carpetaApp = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                "BibliaApp");
                
            if (!Directory.Exists(carpetaApp))
            {
                Directory.CreateDirectory(carpetaApp);
            }
            
            _archivoMarcadores = Path.Combine(carpetaApp, "marcadores.json");
            _marcadores = CargarMarcadores();
        }

        public List<Marcador> ObtenerMarcadores()
        {
            return _marcadores;
        }

        public Marcador AgregarMarcador(string versionId, string nombreLibro, int numeroCapitulo, int numeroVersiculo, string nota)
        {
            var marcador = new Marcador
            {
                VersionId = versionId,
                NombreLibro = nombreLibro,
                NumeroCapitulo = numeroCapitulo,
                NumeroVersiculo = numeroVersiculo,
                Nota = nota
            };
            
            _marcadores.Add(marcador);
            GuardarMarcadores();
            
            return marcador;
        }

        public bool EliminarMarcador(string id)
        {
            var marcador = _marcadores.FirstOrDefault(m => m.Id == id);
            if (marcador == null)
            {
                return false;
            }
            
            _marcadores.Remove(marcador);
            GuardarMarcadores();
            
            return true;
        }

        public Marcador ActualizarNotaMarcador(string id, string nuevaNota)
        {
            var marcador = _marcadores.FirstOrDefault(m => m.Id == id);
            if (marcador == null)
            {
                throw new ArgumentException($"No se encontró el marcador con ID {id}");
            }
            
            marcador.Nota = nuevaNota;
            GuardarMarcadores();
            
            return marcador;
        }

        private List<Marcador> CargarMarcadores()
        {
            try
            {
                if (!File.Exists(_archivoMarcadores))
                {
                    return new List<Marcador>();
                }

                string jsonData = File.ReadAllText(_archivoMarcadores);
                return JsonConvert.DeserializeObject<List<Marcador>>(jsonData) ?? new List<Marcador>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar marcadores: {ex.Message}");
                return new List<Marcador>();
            }
        }

        private void GuardarMarcadores()
        {
            try
            {
                string jsonData = JsonConvert.SerializeObject(_marcadores, Formatting.Indented);
                File.WriteAllText(_archivoMarcadores, jsonData);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar marcadores: {ex.Message}");
            }
        }
    }
}
```

## 3. Modificar MainWindow.xaml.cs para usar el servicio de marcadores

```csharp
// Agregar al inicio de la clase MainWindow:
private MarcadoresService _marcadoresService;

// Modificar el constructor:
public MainWindow()
{
    InitializeComponent();
    _bibliaService = new BibliaService();
    _marcadoresService = new MarcadoresService();
    CargarVersiones();
    
    // Agregar handler para guardar al cerrar
    Closing += MainWindow_Closing;
}
```

## 4. Crear ventana para gestionar marcadores

```csharp
using System;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class MarcadoresWindow : Window
    {
        private MarcadoresService _marcadoresService;
        private BibliaService _bibliaService;
        
        public ResultadoBusqueda SeleccionarVersiculo { get; private set; }
        
        public MarcadoresWindow(MarcadoresService marcadoresService, BibliaService bibliaService)
        {
            InitializeComponent();
            _marcadoresService = marcadoresService;
            _bibliaService = bibliaService;
            
            CargarMarcadores();
        }
        
        private void CargarMarcadores()
        {
            MarcadoresListView.ItemsSource = _marcadoresService.ObtenerMarcadores();
        }
        
        private void MarcadoresListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (MarcadoresListView.SelectedItem != null)
            {
                var marcador = (Marcador)MarcadoresListView.SelectedItem;
                NotaTextBox.Text = marcador.Nota;
                
                // Buscar el texto del versículo para mostrarlo
                var version = _bibliaService.ObtenerVersion(marcador.VersionId);
                if (version != null)
                {
                    var libro = version.Libros.Find(l => l.Nombre == marcador.NombreLibro);
                    if (libro != null)
                    {
                        var capitulo = libro.Capitulos.Find(c => c.Numero == marcador.NumeroCapitulo);
                        if (capitulo != null)
                        {
                            var versiculo = capitulo.Versiculos.Find(v => v.Numero == marcador.NumeroVersiculo);
                            if (versiculo != null)
                            {
                                DetalleTextBlock.Text = $"{marcador.Referencia} ({version.Nombre}):\n\n{versiculo.Texto}";
                                return;
                            }
                        }
                    }
                }
                
                DetalleTextBlock.Text = "No se pudo encontrar el texto del versículo.";
            }
        }
        
        private void GuardarNotaBtn_Click(object sender, RoutedEventArgs e)
        {
            if (MarcadoresListView.SelectedItem != null)
            {
                var marcador = (Marcador)MarcadoresListView.SelectedItem;
                _marcadoresService.ActualizarNotaMarcador(marcador.Id, NotaTextBox.Text);
                MessageBox.Show("Nota guardada", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EliminarMarcadorBtn_Click(object sender, RoutedEventArgs e)
        {
            if (MarcadoresListView.SelectedItem != null)
            {
                var marcador = (Marcador)MarcadoresListView.SelectedItem;
                
                if (MessageBox.Show($"¿Está seguro que desea eliminar el marcador de {marcador.Referencia}?", 
                    "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    _marcadoresService.EliminarMarcador(marcador.Id);
                    CargarMarcadores();
                }
            }
        }
        
        private void AbrirVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (MarcadoresListView.SelectedItem != null)
            {
                var marcador = (Marcador)MarcadoresListView.SelectedItem;
                
                // Buscar los objetos completos para devolverlos
                var version = _bibliaService.ObtenerVersion(marcador.VersionId);
                if (version != null)
                {
                    var libro = version.Libros.Find(l => l.Nombre == marcador.NombreLibro);
                    if (libro != null)
                    {
                        var capitulo = libro.Capitulos.Find(c => c.Numero == marcador.NumeroCapitulo);
                        if (capitulo != null)
                        {
                            var versiculo = capitulo.Versiculos.Find(v => v.Numero == marcador.NumeroVersiculo);
                            if (versiculo != null)
                            {
                                SeleccionarVersiculo = new ResultadoBusqueda
                                {
                                    Version = version,
                                    Libro = libro,
                                    Capitulo = capitulo,
                                    Versiculo = versiculo
                                };
                                
                                DialogResult = true;
                                Close();
                                return;
                            }
                        }
                    }
                }
                
                MessageBox.Show("No se pudo encontrar el versículo seleccionado.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            else
            {
                MessageBox.Show("Por favor, seleccione un marcador.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
    }
}
```

## 5. Crear interfaz XAML para la ventana de marcadores

```xml
<Window x:Class="BibliaApp.Views.MarcadoresWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Mis Marcadores" Height="500" Width="700">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Mis Marcadores" FontSize="18" FontWeight="Bold" Margin="0,0,0,10"/>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de marcadores -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <TextBlock DockPanel.Dock="Top" Text="Marcadores guardados:" Margin="0,0,0,5"/>
                <ListView x:Name="MarcadoresListView" SelectionChanged="MarcadoresListView_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Referencia" DisplayMemberBinding="{Binding Referencia}" Width="120"/>
                            <GridViewColumn Header="Fecha" DisplayMemberBinding="{Binding FechaCreacion, StringFormat=dd/MM/yyyy}" Width="100"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Detalle y notas -->
            <Grid Grid.Column="1" Margin="10,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="100"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" Text="Versículo:" Margin="0,0,0,5"/>
                <TextBlock Grid.Row="1" x:Name="DetalleTextBlock" TextWrapping="Wrap" Background="#F5F5F5" Padding="10"/>
                
                <TextBlock Grid.Row="2" Text="Mis notas:" Margin="0,10,0,5"/>
                <TextBox Grid.Row="3" x:Name="NotaTextBox" TextWrapping="Wrap" AcceptsReturn="True"/>
                
                <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5,0,0">
                    <Button x:Name="GuardarNotaBtn" Content="Guardar Nota" Width="100" Click="GuardarNotaBtn_Click"/>
                </StackPanel>
            </Grid>
        </Grid>
        
        <!-- Botones inferiores -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="EliminarMarcadorBtn" Content="Eliminar" Width="80" Margin="0,0,10,0" 
                    Click="EliminarMarcadorBtn_Click"/>
            <Button x:Name="AbrirVersiculoBtn" Content="Abrir Versículo" Width="120" 
                    Click="AbrirVersiculoBtn_Click"/>
            <Button x:Name="CerrarBtn" Content="Cerrar" Width="80" Margin="10,0,0,0" IsCancel="True"/>
        </StackPanel>
    </Grid>
</Window>
```

## 6. Modificar MainWindow para agregar botones de marcadores

```xml
<!-- Añadir en la barra superior junto a los otros botones -->
<Button Content="Agregar Marcador" Width="120" Margin="10,0,0,0" Click="AgregarMarcador_Click"/>
<Button Content="Mis Marcadores" Width="120" Margin="10,0,0,0" Click="AbrirMarcadores_Click"/>
```

## 7. Implementar funciones en MainWindow.xaml.cs

```csharp
private void AgregarMarcador_Click(object sender, RoutedEventArgs e)
{
    if (_versionActual != null && _libroActual != null && _capituloActual != null)
    {
        // Mostrar diálogo para seleccionar el versículo
        var dialog = new SeleccionVersiculoDialog(_capituloActual.Versiculos);
        if (dialog.ShowDialog() == true)
        {
            var versiculo = dialog.VersiculoSeleccionado;
            if (versiculo != null)
            {
                // Pedir nota opcional
                var notaDialog = new InputDialog("Nota (opcional)", "Puede agregar una nota a este marcador:");
                notaDialog.ShowDialog();
                string nota = notaDialog.Respuesta ?? "";
                
                // Crear marcador
                _marcadoresService.AgregarMarcador(
                    _versionActual.Id ?? "",
                    _libroActual.Nombre ?? "",
                    _capituloActual.Numero,
                    versiculo.Numero,
                    nota);
                
                MessageBox.Show($"Marcador agregado para {_libroActual.Nombre} {_capituloActual.Numero}:{versiculo.Numero}", 
                    "Marcador agregado", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
    }
    else
    {
        MessageBox.Show("Por favor, seleccione un capítulo primero.", "Información requerida", 
            MessageBoxButton.OK, MessageBoxImage.Information);
    }
}

private void AbrirMarcadores_Click(object sender, RoutedEventArgs e)
{
    var ventanaMarcadores = new MarcadoresWindow(_marcadoresService, _bibliaService);
    ventanaMarcadores.Owner = this;
    
    if (ventanaMarcadores.ShowDialog() == true)
    {
        // Navegar al versículo seleccionado (igual que en la búsqueda)
        var resultado = ventanaMarcadores.SeleccionarVersiculo;
        
        // Seleccionar versión
        foreach (var item in VersionesComboBox.Items)
        {
            var version = (VersionBiblia)item;
            if (version.Id == resultado.Version.Id)
            {
                VersionesComboBox.SelectedItem = version;
                break;
            }
        }
        
        // Resto del código para seleccionar libro y capítulo...
    }
}
```

## 8. Crear diálogos de apoyo

```csharp
using System.Windows;

namespace BibliaApp.Views
{
    public partial class InputDialog : Window
    {
        public string Respuesta { get; private set; }
        
        public InputDialog(string titulo, string mensaje, string valorInicial = "")
        {
            InitializeComponent();
            
            this.Title = titulo;
            MensajeTextBlock.Text = mensaje;
            RespuestaTextBox.Text = valorInicial;
            
            RespuestaTextBox.Focus();
        }
        
        private void AceptarBtn_Click(object sender, RoutedEventArgs e)
        {
            Respuesta = RespuestaTextBox.Text;
            DialogResult = true;
            Close();
        }
    }
}
```

```xml
<Window x:Class="BibliaApp.Views.InputDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        SizeToContent="WidthAndHeight" WindowStartupLocation="CenterOwner"
        MinWidth="300" MinHeight="150">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" x:Name="MensajeTextBlock" TextWrapping="Wrap" Margin="0,0,0,10"/>
        <TextBox Grid.Row="1" x:Name="RespuestaTextBox" MinHeight="60" TextWrapping="Wrap" AcceptsReturn="True"/>
        
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,0">
            <Button x:Name="CancelarBtn" Content="Cancelar" Width="80" IsCancel="True"/>
            <Button x:Name="AceptarBtn" Content="Aceptar" Width="80" Margin="10,0,0,0" Click="AceptarBtn_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

Con esta implementación tendrás un sistema completo de marcadores que permite:
1. Guardar versículos favoritos
2. Añadir notas personales a los marcadores
3. Navegar fácilmente a los versículos marcados
4. Eliminar marcadores que ya no necesitas

¿Quieres que te ayude con alguna otra mejora específica para tu aplicación de Biblia?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: dotnet run
C:\Biblia\BibliaApp\Views\MarcadoresWindow.xaml.cs(16,16): warnin
g CS8618: El elemento propiedad "SeleccionarVersiculo" que no ace 
pta valores NULL debe contener un valor distinto de NULL al salir 
 del constructor. Considere la posibilidad de agregar el modifica
dor "required'"o declarar el propiedad como un valor que acepta v 
alores NULL. [C:\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.cspro 
j]
C:\Biblia\BibliaApp\Models\Marcador.cs(17,16): warning CS8618: El 
 elemento propiedad "VersionId" que no acepta valores NULL debe c 
ontener un valor distinto de NULL al salir del constructor. Consi 
dere la posibilidad de agregar el modificador "required'"o declar 
ar el propiedad como un valor que acepta valores NULL. [C:\Biblia 
\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\Marcador.cs(17,16): warning CS8618: El 
 elemento propiedad "NombreLibro" que no acepta valores NULL debe 
 contener un valor distinto de NULL al salir del constructor. Con 
sidere la posibilidad de agregar el modificador "required'"o decl 
arar el propiedad como un valor que acepta valores NULL. [C:\Bibl 
ia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaWindow.xaml.cs(14,16): warning  
CS8618: El elemento propiedad "SeleccionarVersiculo" que no acept 
a valores NULL debe contener un valor distinto de NULL al salir d 
el constructor. Considere la posibilidad de agregar el modificado 
r "required'"o declarar el propiedad como un valor que acepta val 
ores NULL. [C:\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj] 
C:\Biblia\BibliaApp\Services\BibliaService.cs(273,30): warning CS 
8618: El elemento propiedad "Version" que no acepta valores NULL  
debe contener un valor distinto de NULL al salir del constructor. 
 Considere la posibilidad de agregar el modificador "required'"o  
declarar el propiedad como un valor que acepta valores NULL. [C:\ 
Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(274,22): warning CS 
8618: El elemento propiedad "Libro" que no acepta valores NULL de 
be contener un valor distinto de NULL al salir del constructor. C 
onsidere la posibilidad de agregar el modificador "required'"o de 
clarar el propiedad como un valor que acepta valores NULL. [C:\Bi 
blia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(275,25): warning CS 
8618: El elemento propiedad "Capitulo" que no acepta valores NULL 
 debe contener un valor distinto de NULL al salir del constructor 
. Considere la posibilidad de agregar el modificador "required'"o 
 declarar el propiedad como un valor que acepta valores NULL. [C: 
\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(276,26): warning CS 
8618: El elemento propiedad "Versiculo" que no acepta valores NUL 
L debe contener un valor distinto de NULL al salir del constructo 
r. Considere la posibilidad de agregar el modificador "required'" 
o declarar el propiedad como un valor que acepta valores NULL. [C 
:\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaWindow.xaml.cs(35,32): warning 
CS8600: Se va a convertir un literal nulo o un posible valor nulo 
 en un tipo que no acepta valores NULL [C:\Biblia\BibliaApp\Bibli 
aApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaWindow.xaml.cs(38,29): warning  
CS8600: Se va a convertir un literal nulo o un posible valor nulo 
 en un tipo que no acepta valores NULL [C:\Biblia\BibliaApp\Bibli 
aApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\InputDialog.xaml.cs(9,16): warning CS86 
18: El elemento propiedad "Respuesta" que no acepta valores NULL  
debe contener un valor distinto de NULL al salir del constructor. 
 Considere la posibilidad de agregar el modificador "required'"o  
declarar el propiedad como un valor que acepta valores NULL. [C:\ 
Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(33,24): warning CS8622: La 
 nulabilidad de los tipos de referencia del tipo de parámetro"sen 
der" de "void MainWindow.MainWindow_Closing(object sender, Cancel 
EventArgs e)" no coincide con el delegado de destino "CancelEvent 
Handler" (posiblemente debido a los atributos de nulabilidad). [C 
:\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(161,34): error CS0246: El 
nombre del tipo o del espacio de nombres 'SeleccionVersiculoDialo 
g' no se encontró (¿falta una directiva using o una referencia de 
 ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_sqzmpapm_wpftmp.cspr 
oj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corregir Error y Completar Sistema de Marcadores

Veo que tenemos varios errores y advertencias, pero el principal problema es que falta la clase `SeleccionVersiculoDialog`. Vamos a implementarla y solucionar las demás advertencias:

## 1. Crear SeleccionVersiculoDialog

```csharp
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;

namespace BibliaApp.Views
{
    public partial class SeleccionVersiculoDialog : Window
    {
        public Versiculo? VersiculoSeleccionado { get; private set; }
        
        public SeleccionVersiculoDialog(List<Versiculo> versiculos)
        {
            InitializeComponent();
            
            VersiculosListView.ItemsSource = versiculos;
        }
        
        private void VersiculosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersiculosListView.SelectedItem != null)
            {
                var versiculo = (Versiculo)VersiculosListView.SelectedItem;
                DetalleTextBlock.Text = $"Versículo {versiculo.Numero}: {versiculo.Texto}";
            }
        }
        
        private void SeleccionarBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosListView.SelectedItem != null)
            {
                VersiculoSeleccionado = (Versiculo)VersiculosListView.SelectedItem;
                DialogResult = true;
                Close();
            }
            else
            {
                MessageBox.Show("Por favor, seleccione un versículo.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
    }
}
```

## 2. Crear interfaz XAML para SeleccionVersiculoDialog

```xml
<Window x:Class="BibliaApp.Views.SeleccionVersiculoDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Seleccionar Versículo" Height="400" Width="500" WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" Text="Seleccione el versículo que desea marcar:" Margin="0,0,0,10"/>
        
        <ListView Grid.Row="1" x:Name="VersiculosListView" SelectionChanged="VersiculosListView_SelectionChanged">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Versículo" DisplayMemberBinding="{Binding Numero}" Width="80"/>
                    <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="350"/>
                </GridView>
            </ListView.View>
        </ListView>
        
        <TextBlock Grid.Row="2" x:Name="DetalleTextBlock" TextWrapping="Wrap" Margin="0,10" MinHeight="50"/>
        
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button Content="Cancelar" Width="80" IsCancel="True"/>
            <Button x:Name="SeleccionarBtn" Content="Seleccionar" Width="100" Margin="10,0,0,0" Click="SeleccionarBtn_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 3. Corregir las advertencias de nulabilidad

Modifica los siguientes archivos para corregir las advertencias:

### ResultadoBusqueda en BibliaService.cs
```csharp
public class ResultadoBusqueda
{
    public VersionBiblia Version { get; set; } = null!;
    public Libro Libro { get; set; } = null!;
    public Capitulo Capitulo { get; set; } = null!;
    public Versiculo Versiculo { get; set; } = null!;
    public string Referencia => $"{Libro.Nombre} {Capitulo.Numero}:{Versiculo.Numero}";
}
```

### Marcador.cs
```csharp
public class Marcador
{
    public string Id { get; set; } = string.Empty;
    public string VersionId { get; set; } = string.Empty;
    public string NombreLibro { get; set; } = string.Empty;
    public int NumeroCapitulo { get; set; }
    public int NumeroVersiculo { get; set; }
    public string Nota { get; set; } = string.Empty;
    public DateTime FechaCreacion { get; set; }

    public string Referencia => $"{NombreLibro} {NumeroCapitulo}:{NumeroVersiculo}";

    public Marcador()
    {
        Id = Guid.NewGuid().ToString();
        FechaCreacion = DateTime.Now;
    }
}
```

### BusquedaWindow.xaml.cs
```csharp
// Modificar la propiedad para aceptar null
public ResultadoBusqueda? SeleccionarVersiculo { get; private set; }

// Y en el método BuscarBtn_Click
string? versionId = null;
```

### MarcadoresWindow.xaml.cs
```csharp
// Modificar la propiedad para aceptar null
public ResultadoBusqueda? SeleccionarVersiculo { get; private set; }
```

### InputDialog.xaml.cs
```csharp
public string? Respuesta { get; private set; }
```

### MainWindow.xaml.cs - Corregir el handler de Closing
```csharp
private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
{
    // Los datos ya se guardan automáticamente en cada operación
}
```

Con estos cambios deberías poder compilar y ejecutar la aplicación correctamente. El sistema de marcadores permitirá a los usuarios:
1. Seleccionar un versículo específico para marcar
2. Añadir notas personales a cada marcador
3. Ver todos sus marcadores guardados
4. Navegar rápidamente a los versículos marcados

¿Deseas implementar alguna otra funcionalidad específica para tu aplicación de Biblia?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: Siguiente paso

GitHub Copilot: # Siguiente Paso: Implementar Modo Oscuro y Mejorar Diseño Visual

Ahora que tienes implementadas las funcionalidades principales (navegación, búsqueda y marcadores), vamos a mejorar la experiencia visual de tu aplicación con un tema personalizado y un modo oscuro/claro.

## 1. Crear recursos de estilos y temas

```xml
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!-- Temas: claro y oscuro -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="TemaClaro.xaml" x:Key="TemaClaro"/>
        <ResourceDictionary Source="TemaOscuro.xaml" x:Key="TemaOscuro"/>
    </ResourceDictionary.MergedDictionaries>
    
</ResourceDictionary>
```

```xml
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!-- Colores del tema claro -->
    <SolidColorBrush x:Key="FondoVentana" Color="#F8F8F8"/>
    <SolidColorBrush x:Key="FondoControl" Color="White"/>
    <SolidColorBrush x:Key="TextoPrimario" Color="#212121"/>
    <SolidColorBrush x:Key="TextoSecundario" Color="#757575"/>
    <SolidColorBrush x:Key="Acento" Color="#3F51B5"/>
    <SolidColorBrush x:Key="AcentoClaro" Color="#C5CAE9"/>
    <SolidColorBrush x:Key="Borde" Color="#DDDDDD"/>
    <SolidColorBrush x:Key="Separador" Color="#EEEEEE"/>
    <SolidColorBrush x:Key="FondoVersiculo" Color="#F5F5F5"/>
    <SolidColorBrush x:Key="FondoVersiculoSeleccionado" Color="#FFF9C4"/>
    
    <!-- Estilos de controles -->
    <Style x:Key="BotonBase" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource Acento}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource Acento}"/>
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#303F9F"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#1A237E"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="BotonSecundario" TargetType="Button" BasedOn="{StaticResource BotonBase}">
        <Setter Property="Background" Value="{StaticResource FondoControl}"/>
        <Setter Property="Foreground" Value="{StaticResource Acento}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Borde}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource AcentoClaro}"/>
                <Setter Property="Foreground" Value="{StaticResource TextoPrimario}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Estilo para contenedor de versículo -->
    <Style x:Key="ContenedorVersiculo" TargetType="TextBlock">
        <Setter Property="Background" Value="{StaticResource FondoVersiculo}"/>
        <Setter Property="Padding" Value="12,8"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    
    <!-- Estilo para número de versículo -->
    <Style x:Key="NumeroVersiculo" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource Acento}"/>
        <Setter Property="Margin" Value="0,0,6,0"/>
    </Style>
    
</ResourceDictionary>
```

```xml
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!-- Colores del tema oscuro -->
    <SolidColorBrush x:Key="FondoVentana" Color="#121212"/>
    <SolidColorBrush x:Key="FondoControl" Color="#252525"/>
    <SolidColorBrush x:Key="TextoPrimario" Color="#EEEEEE"/>
    <SolidColorBrush x:Key="TextoSecundario" Color="#B0B0B0"/>
    <SolidColorBrush x:Key="Acento" Color="#7986CB"/>
    <SolidColorBrush x:Key="AcentoClaro" Color="#3F51B5"/>
    <SolidColorBrush x:Key="Borde" Color="#454545"/>
    <SolidColorBrush x:Key="Separador" Color="#353535"/>
    <SolidColorBrush x:Key="FondoVersiculo" Color="#1E1E1E"/>
    <SolidColorBrush x:Key="FondoVersiculoSeleccionado" Color="#323232"/>
    
    <!-- Estilos de controles -->
    <Style x:Key="BotonBase" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource Acento}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource Acento}"/>
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#9FA8DA"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#C5CAE9"/>
                <Setter Property="Foreground" Value="#212121"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="BotonSecundario" TargetType="Button" BasedOn="{StaticResource BotonBase}">
        <Setter Property="Background" Value="{StaticResource FondoControl}"/>
        <Setter Property="Foreground" Value="{StaticResource Acento}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Borde}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#303030"/>
                <Setter Property="Foreground" Value="{StaticResource TextoPrimario}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Estilo para contenedor de versículo -->
    <Style x:Key="ContenedorVersiculo" TargetType="TextBlock">
        <Setter Property="Background" Value="{StaticResource FondoVersiculo}"/>
        <Setter Property="Padding" Value="12,8"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource TextoPrimario}"/>
    </Style>
    
    <!-- Estilo para número de versículo -->
    <Style x:Key="NumeroVersiculo" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource Acento}"/>
        <Setter Property="Margin" Value="0,0,6,0"/>
    </Style>
    
</ResourceDictionary>
```

## 2. Modificar App.xaml para incluir los recursos

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BibliaApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Temas.xaml"/>
                <ResourceDictionary Source="Resources/TemaClaro.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
```

## 3. Modificar MainWindow.xaml para aplicar los estilos

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BibliaApp"
        mc:Ignorable="d"
        Title="Biblia App" Height="600" Width="900"
        Background="{DynamicResource FondoVentana}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Barra superior -->
        <Grid Grid.Row="0" Background="{DynamicResource FondoControl}" Margin="0,0,0,2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <StackPanel Grid.Column="0" Orientation="Horizontal" Margin="15,12">
                <TextBlock Text="Versión:" VerticalAlignment="Center" Margin="0,0,5,0" Foreground="{DynamicResource TextoPrimario}"/>
                <ComboBox x:Name="VersionesComboBox" Width="150" Margin="0,0,10,0"
                          SelectionChanged="VersionesComboBox_SelectionChanged"/>
                <Button Content="Buscar" Width="80" Style="{StaticResource BotonBase}" Click="AbrirBusqueda_Click"/>
                <Button Content="Agregar Contenido" Width="120" Margin="10,0,0,0" Style="{StaticResource BotonSecundario}" Click="AbrirAgregarContenido_Click"/>
                <Button Content="Agregar Marcador" Width="120" Margin="10,0,0,0" Style="{StaticResource BotonSecundario}" Click="AgregarMarcador_Click"/>
                <Button Content="Mis Marcadores" Width="120" Margin="10,0,0,0" Style="{StaticResource BotonSecundario}" Click="AbrirMarcadores_Click"/>
            </StackPanel>
            
            <!-- Botón de cambio de tema -->
            <Button Grid.Column="1" x:Name="CambiarTemaBtn" Content="🌙" Width="40" Height="40" 
                    Margin="0,0,15,0" Click="CambiarTema_Click" Style="{StaticResource BotonSecundario}" 
                    ToolTip="Cambiar tema claro/oscuro"/>
        </Grid>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel de navegación -->
            <Grid Grid.Column="0" Background="{DynamicResource FondoControl}" Margin="0,2,2,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Lista de libros -->
                <DockPanel Grid.Row="0" Margin="15,15,15,0">
                    <TextBlock DockPanel.Dock="Top" Text="Libros" FontWeight="Bold" Margin="0,0,0,10" Foreground="{DynamicResource TextoPrimario}"/>
                    <ListBox x:Name="LibrosListBox" Grid.Row="0" Margin="0,0,0,10"
                            SelectionChanged="LibrosListBox_SelectionChanged" 
                            Background="{DynamicResource FondoVentana}"
                            BorderBrush="{DynamicResource Borde}"
                            Foreground="{DynamicResource TextoPrimario}"/>
                </DockPanel>
                
                <!-- Selector de capítulo -->
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="15">
                    <TextBlock Text="Capítulo:" VerticalAlignment="Center" Margin="0,0,5,0" Foreground="{DynamicResource TextoPrimario}"/>
                    <ComboBox x:Name="CapitulosComboBox" Width="80" 
                             SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                </StackPanel>
            </Grid>
            
            <!-- Visualización del texto -->
            <ScrollViewer Grid.Column="1" Margin="10" 
                         Background="{DynamicResource FondoVentana}"
                         BorderBrush="{DynamicResource Borde}">
                <StackPanel x:Name="ContenidoPanel" Margin="10">
                    <!-- Aquí se cargarán dinámicamente los versículos -->
                </StackPanel>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
```

## 4. Modificar MainWindow.xaml.cs para soportar el cambio de tema

```csharp
// Agregar estos métodos en la clase MainWindow

private bool _modoOscuro = false;

private void CambiarTema_Click(object sender, RoutedEventArgs e)
{
    _modoOscuro = !_modoOscuro;
    AplicarTema();
}

private void AplicarTema()
{
    ResourceDictionary nuevoTema = new ResourceDictionary();
    
    if (_modoOscuro)
    {
        nuevoTema.Source = new Uri("/Resources/TemaOscuro.xaml", UriKind.Relative);
        CambiarTemaBtn.Content = "☀️"; // Emoji de sol para cambiar a tema claro
    }
    else
    {
        nuevoTema.Source = new Uri("/Resources/TemaClaro.xaml", UriKind.Relative);
        CambiarTemaBtn.Content = "🌙"; // Emoji de luna para cambiar a tema oscuro
    }
    
    // Reemplazar el tema actual
    Application.Current.Resources.MergedDictionaries.RemoveAt(1);
    Application.Current.Resources.MergedDictionaries.Add(nuevoTema);
}
```

## 5. Modificar MostrarCapitulo para usar controles visuales mejorados

```csharp
// Reemplazar el método MostrarCapitulo por esta versión
private void MostrarCapitulo()
{
    ContenidoPanel.Children.Clear();
    
    if (_capituloActual != null && _capituloActual.Versiculos != null)
    {
        // Agregar título del capítulo
        TextBlock titulo = new TextBlock
        {
            Text = $"{_libroActual?.Nombre} {_capituloActual.Numero}",
            FontSize = 20,
            FontWeight = FontWeight.Bold,
            Margin = new Thickness(0, 0, 0, 15),
            Foreground = (SolidColorBrush)FindResource("TextoPrimario")
        };
        ContenidoPanel.Children.Add(titulo);
        
        // Agregar cada versículo con formato mejorado
        foreach (var versiculo in _capituloActual.Versiculos)
        {
            Grid versiculoGrid = new Grid
            {
                Margin = new Thickness(0, 5, 0, 5)
            };
            
            Border border = new Border
            {
                Background = (SolidColorBrush)FindResource("FondoVersiculo"),
                CornerRadius = new CornerRadius(4),
                Padding = new Thickness(12)
            };
            
            StackPanel stackPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal
            };
            
            TextBlock numeroBlock = new TextBlock
            {
                Text = versiculo.Numero.ToString(),
                FontWeight = FontWeight.Bold,
                Foreground = (SolidColorBrush)FindResource("Acento"),
                VerticalAlignment = VerticalAlignment.Top,
                Margin = new Thickness(0, 0, 8, 0),
                MinWidth = 20
            };
            
            TextBlock textoBlock = new TextBlock
            {
                Text = versiculo.Texto,
                TextWrapping = TextWrapping.Wrap,
                Foreground = (SolidColorBrush)FindResource("TextoPrimario")
            };
            
            stackPanel.Children.Add(numeroBlock);
            stackPanel.Children.Add(textoBlock);
            border.Child = stackPanel;
            versiculoGrid.Children.Add(border);
            
            ContenidoPanel.Children.Add(versiculoGrid);
        }
    }
}
```

## 6. Crear una clase para almacenar preferencias de usuario

```csharp
using System;
using System.IO;
using Newtonsoft.Json;

namespace BibliaApp.Services
{
    public class Preferencias
    {
        public bool ModoOscuro { get; set; } = false;
        public int TamanoFuente { get; set; } = 14;
        public string UltimaVersionId { get; set; } = "rv1960";
        public string UltimoLibro { get; set; } = "Génesis";
        public int UltimoCapitulo { get; set; } = 1;
    }
    
    public class PreferenciasService
    {
        private readonly string _archivoPreferencias;
        
        public PreferenciasService()
        {
            string carpetaApp = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                "BibliaApp");
                
            if (!Directory.Exists(carpetaApp))
            {
                Directory.CreateDirectory(carpetaApp);
            }
            
            _archivoPreferencias = Path.Combine(carpetaApp, "preferencias.json");
        }
        
        public Preferencias CargarPreferencias()
        {
            try
            {
                if (!File.Exists(_archivoPreferencias))
                {
                    return new Preferencias();
                }
                
                string jsonData = File.ReadAllText(_archivoPreferencias);
                return JsonConvert.DeserializeObject<Preferencias>(jsonData) ?? new Preferencias();
            }
            catch (Exception)
            {
                return new Preferencias();
            }
        }
        
        public void GuardarPreferencias(Preferencias preferencias)
        {
            try
            {
                string jsonData = JsonConvert.SerializeObject(preferencias, Formatting.Indented);
                File.WriteAllText(_archivoPreferencias, jsonData);
            }
            catch (Exception)
            {
                // Manejar errores
            }
        }
    }
}
```

## 7. Actualizar MainWindow.xaml.cs para usar el servicio de preferencias

```csharp
// Agregar campo para el servicio de preferencias
private PreferenciasService _preferenciasService;
private Preferencias _preferencias;

// Modificar el constructor
public MainWindow()
{
    InitializeComponent();
    _bibliaService = new BibliaService();
    _marcadoresService = new MarcadoresService();
    _preferenciasService = new PreferenciasService();
    
    // Cargar preferencias
    _preferencias = _preferenciasService.CargarPreferencias();
    _modoOscuro = _preferencias.ModoOscuro;
    
    // Aplicar tema según preferencias
    AplicarTema();
    
    CargarVersiones();
    
    // Agregar handler para guardar al cerrar
    Closing += MainWindow_Closing;
}

// Modificar el método MainWindow_Closing para guardar preferencias
private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
{
    // Guardar preferencias actuales
    _preferencias.ModoOscuro = _modoOscuro;
    
    if (_versionActual != null)
        _preferencias.UltimaVersionId = _versionActual.Id ?? "rv1960";
        
    if (_libroActual != null)
        _preferencias.UltimoLibro = _libroActual.Nombre ?? "Génesis";
        
    if (_capituloActual != null)
        _preferencias.UltimoCapitulo = _capituloActual.Numero;
    
    _preferenciasService.GuardarPreferencias(_preferencias);
}
```

Con estos cambios, tu aplicación tendrá:

1. Un diseño moderno con temas claro y oscuro
2. Estilos consistentes en todos los controles
3. Mejor visualización de los versículos
4. Persistencia de las preferencias del usuario

Este es un gran paso en la mejora de la experiencia de usuario para tu aplicación Bíblica. El siguiente paso podría ser agregar más funcionalidades como planes de lectura, compartir versículos o notas más avanzadas.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: S C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(121,39): warning CS8602: D
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_a54igi22_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(132,41): warning CS8602: D
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_a54igi22_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(143,44): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_a54igi22_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(205,39): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_a54igi22_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(121,39): warning CS8602: D
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(132,41): warning CS8602: D
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
C:\Biblia\BibliaApp\MainWindow.xaml.cs(143,44): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(205,39): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp.csproj]
PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Resources\Temas.xaml(6,53): error MC3023: el 
atributo Key sólo se puede usar en una etiqueta contenida en un e 
lemento Dictionary (como ResourceDictionary). Línea 6, posición 5 
3. [C:\Biblia\BibliaApp\BibliaApp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Correcciones para Errores y Advertencias

Vamos a solucionar los dos problemas que estás enfrentando:

## 1. Error en Temas.xaml - Atributo Key no permitido

```xml
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!-- Temas: claro y oscuro -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="TemaClaro.xaml"/>
        <ResourceDictionary Source="TemaOscuro.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
</ResourceDictionary>
```

El problema era que estabas intentando usar el atributo `x:Key` en un `ResourceDictionary` incluido en `MergedDictionaries`, lo cual no está permitido. La clave solo puede usarse en elementos dentro de un diccionario, no en los diccionarios mismos cuando están en MergedDictionaries.

## 2. Advertencias de referencias NULL

Para solucionar las advertencias de desreferencia de posibles null, necesitamos agregar comprobaciones en MainWindow.xaml.cs en las líneas mencionadas:

```csharp
// En AbrirBusqueda_Click
if (ventanaBusqueda.ShowDialog() == true && ventanaBusqueda.SeleccionarVersiculo != null)
{
    // Si se seleccionó un versículo, navegar hasta él
    var resultado = ventanaBusqueda.SeleccionarVersiculo;
    
    // Seleccionar versión
    foreach (var item in VersionesComboBox.Items)
    {
        var version = (VersionBiblia)item;
        if (version.Id == resultado.Version.Id)
        {
            VersionesComboBox.SelectedItem = version;
            break;
        }
    }
    
    // Continúa con el resto del código...
}

// En AbrirMarcadores_Click
if (ventanaMarcadores.ShowDialog() == true && ventanaMarcadores.SeleccionarVersiculo != null)
{
    // Navegar al versículo seleccionado (igual que en la búsqueda)
    var resultado = ventanaMarcadores.SeleccionarVersiculo;
    
    // Resto del código...
}
```

## 3. Mejoras adicionales para evitar otras potenciales advertencias null

```csharp
private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    if (VersionesComboBox.SelectedItem != null)
    {
        _versionActual = (VersionBiblia)VersionesComboBox.SelectedItem;
        if (_versionActual != null && _versionActual.Libros != null)
        {
            LibrosListBox.ItemsSource = _versionActual.Libros;
            LibrosListBox.DisplayMemberPath = "Nombre";
            if (_versionActual.Libros.Count > 0)
                LibrosListBox.SelectedIndex = 0;
        }
    }
}

private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    if (LibrosListBox.SelectedItem != null)
    {
        _libroActual = (Libro)LibrosListBox.SelectedItem;
        if (_libroActual != null && _libroActual.Capitulos != null)
        {
            CapitulosComboBox.ItemsSource = _libroActual.Capitulos;
            CapitulosComboBox.DisplayMemberPath = "Numero";
            if (_libroActual.Capitulos.Count > 0)
                CapitulosComboBox.SelectedIndex = 0;
        }
    }
}

private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    if (CapitulosComboBox.SelectedItem != null)
    {
        _capituloActual = (Capitulo)CapitulosComboBox.SelectedItem;
        if (_capituloActual != null)
        {
            MostrarCapitulo();
        }
    }
}
```

## 4. Modificar App.xaml para cargar correctamente los recursos

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BibliaApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/TemaClaro.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
```

Con estos cambios, tu aplicación debería compilar sin errores y las advertencias de referencia nula deberían desaparecer. La aplicación ahora cargará correctamente los temas y podrás cambiar entre ellos sin problemas.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(126,45): error CS1061: "Fo
ntWeight" no contiene una definición para "Bold" ni un método de  
extensión accesible "Bold" que acepte un primer argumento del tip 
o "FontWeight" (¿falta alguna directiva using o una referencia de
 ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_dxyucos2_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(155,49): error CS1061: "Fo 
ntWeight" no contiene una definición para "Bold" ni un método de  
extensión accesible "Bold" que acepte un primer argumento del tip 
o "FontWeight" (¿falta alguna directiva using o una referencia de 
 ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_dxyucos2_wpftmp.cspr 
oj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de errores de FontWeight

Necesitas corregir el uso de `FontWeight.Bold` en tu código. El problema es que `FontWeight` es una estructura, y `Bold` es una propiedad estática de la clase `FontWeights` (con una 's' al final).

## Corregir el método MostrarCapitulo en MainWindow.xaml.cs

```csharp
// En el método MostrarCapitulo, cambia:
TextBlock titulo = new TextBlock
{
    Text = $"{_libroActual?.Nombre} {_capituloActual.Numero}",
    FontSize = 20,
    FontWeight = FontWeight.Bold,  // Esta línea causa el error
    Margin = new Thickness(0, 0, 0, 15),
    Foreground = (SolidColorBrush)FindResource("TextoPrimario")
};

// Por:
TextBlock titulo = new TextBlock
{
    Text = $"{_libroActual?.Nombre} {_capituloActual.Numero}",
    FontSize = 20,
    FontWeight = FontWeights.Bold,  // Usar FontWeights con 's'
    Margin = new Thickness(0, 0, 0, 15),
    Foreground = (SolidColorBrush)FindResource("TextoPrimario")
};

// Y lo mismo en la línea 155, para numeroBlock:
TextBlock numeroBlock = new TextBlock
{
    Text = versiculo.Numero.ToString(),
    FontWeight = FontWeights.Bold,  // Usar FontWeights con 's'
    Foreground = (SolidColorBrush)FindResource("Acento"),
    VerticalAlignment = VerticalAlignment.Top,
    Margin = new Thickness(0, 0, 8, 0),
    MinWidth = 20
};
```

## Asegúrate de tener los usings necesarios

```csharp
// Al principio del archivo, añade:
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
```

Esta corrección debería resolver los errores de compilación relacionados con FontWeight.Bold. En WPF, es importante recordar que muchas propiedades tienen sus valores predefinidos disponibles a través de clases estáticas separadas (como `FontWeights`, `Colors`, `Brushes`, etc.).

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(15,7): warning CS0105: La 
directiva using para 'System.Windows' aparece previamente en este 
 espacio de nombres [C:\Biblia\BibliaApp\BibliaApp_a5b0uknl_wpftm 
p.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(16,7): warning CS0105: La 
directiva using para 'System.Windows.Controls' aparece previament 
e en este espacio de nombres [C:\Biblia\BibliaApp\BibliaApp_a5b0u 
knl_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(17,7): warning CS0105: La  
directiva using para 'System.Windows.Media' aparece previamente e 
n este espacio de nombres [C:\Biblia\BibliaApp\BibliaApp_a5b0uknl 
_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(15,7): warning CS0105: La 
directiva using para 'System.Windows' aparece previamente en este 
 espacio de nombres [C:\Biblia\BibliaApp\BibliaApp.csproj]        
C:\Biblia\BibliaApp\MainWindow.xaml.cs(16,7): warning CS0105: La 
directiva using para 'System.Windows.Controls' aparece previament 
e en este espacio de nombres [C:\Biblia\BibliaApp\BibliaApp.cspro 
j]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(17,7): warning CS0105: La  
directiva using para 'System.Windows.Media' aparece previamente e 
n este espacio de nombres [C:\Biblia\BibliaApp\BibliaApp.csproj

GitHub Copilot: # Solución para las advertencias de directivas using duplicadas

Tienes advertencias porque hay directivas `using` duplicadas en tu archivo MainWindow.xaml.cs. Vamos a limpiar este problema:

```csharp
// Reemplazar las directivas using al inicio del archivo:
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using BibliaApp.Models;
using BibliaApp.Services;
using BibliaApp.Views;
```

Esto elimina las directivas duplicadas de:
- `System.Windows` (línea 15)
- `System.Windows.Controls` (línea 16)
- `System.Windows.Media` (línea 17)

Estas advertencias no impiden que tu aplicación funcione, pero es una buena práctica mantener tu código limpio y sin redundancias.

## Siguientes pasos para tu aplicación

Tu aplicación Bíblica está casi completa con todas las características que hemos implementado:

1. ✅ Navegación por versiones, libros y capítulos
2. ✅ Visualización mejorada de versículos
3. ✅ Búsqueda de texto
4. ✅ Sistema de marcadores
5. ✅ Tema claro/oscuro
6. ✅ Persistencia de datos y preferencias

¿Te gustaría implementar alguna otra funcionalidad como:
- Exportar versículos a texto o imagen
- Compartir mediante correo o redes sociales
- Planes de lectura bíblica
- Estadísticas de lectura

Código similar encontrado con 1 tipo de licencia

RafaelG1986: no carga

GitHub Copilot: # Solución de problemas de carga en tu aplicación Bíblica

Veo que has implementado todas las funcionalidades principales, pero tienes problemas al cargar la aplicación. Basándome en tu código, identifiqué varios posibles puntos de fallo:

## 1. Problema con la gestión de temas

El principal problema parece estar en el método `AplicarTema()`:

```csharp
private void AplicarTema()
{
    ResourceDictionary nuevoTema = new ResourceDictionary();
    
    if (_modoOscuro)
    {
        nuevoTema.Source = new Uri("/Resources/TemaOscuro.xaml", UriKind.Relative);
        // Esta línea puede fallar si CambiarTemaBtn no existe aún en el constructor
        CambiarTemaBtn.Content = "☀️"; 
    }
    else
    {
        nuevoTema.Source = new Uri("/Resources/TemaClaro.xaml", UriKind.Relative);
        CambiarTemaBtn.Content = "🌙";
    }
    
    // Esta línea asume que siempre hay al menos 2 diccionarios, lo cual puede no ser cierto
    Application.Current.Resources.MergedDictionaries.RemoveAt(1);
    Application.Current.Resources.MergedDictionaries.Add(nuevoTema);
}
```

### Corrección:

```csharp
private void AplicarTema()
{
    ResourceDictionary nuevoTema = new ResourceDictionary();
    
    try
    {
        if (_modoOscuro)
        {
            nuevoTema.Source = new Uri("pack://application:,,,/Resources/TemaOscuro.xaml");
            if (CambiarTemaBtn != null)
                CambiarTemaBtn.Content = "☀️";
        }
        else
        {
            nuevoTema.Source = new Uri("pack://application:,,,/Resources/TemaClaro.xaml");
            if (CambiarTemaBtn != null)
                CambiarTemaBtn.Content = "🌙";
        }
        
        // Forma más segura de manejar el cambio de tema
        if (Application.Current.Resources.MergedDictionaries.Count > 1)
            Application.Current.Resources.MergedDictionaries.RemoveAt(1);
        Application.Current.Resources.MergedDictionaries.Add(nuevoTema);
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al cambiar tema: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
```

## 2. Asegúrate de que InitializeComponent() se ejecute primero

Mueve la inicialización de componentes antes de cargar servicios:

```csharp
public MainWindow()
{
    InitializeComponent(); // Asegúrate de que esto sea lo primero

    try
    {
        _bibliaService = new BibliaService();
        _marcadoresService = new MarcadoresService();
        _preferenciasService = new PreferenciasService();
        
        // Cargar preferencias
        _preferencias = _preferenciasService.CargarPreferencias();
        _modoOscuro = _preferencias.ModoOscuro;
        
        // Aplicar tema según preferencias
        AplicarTema();
        
        CargarVersiones();
        
        // Agregar handler para guardar al cerrar
        Closing += MainWindow_Closing;
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al inicializar la aplicación: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
```

## 3. Verifica las rutas de recursos

Asegúrate de que los archivos de recursos estén en la ubicación correcta:

1. Verifica que existe la carpeta `Resources` en la raíz del proyecto
2. Verifica que los archivos `TemaClaro.xaml` y `TemaOscuro.xaml` estén en esa carpeta
3. Asegúrate de que estos archivos estén configurados como "Resource" en sus propiedades

## 4. Configura App.xaml adecuadamente

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BibliaApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Resources/TemaClaro.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
```

Estas correcciones deberían resolver los problemas de carga en tu aplicación. ¿Necesitas ayuda con algún otro aspecto específico?

RafaelG1986: Siguiente paso

GitHub Copilot: # Siguiente Paso: Implementar Exportación y Compartir Versículos

Ahora que tu aplicación tiene un buen funcionamiento básico con navegación, búsqueda, marcadores y tema oscuro/claro, vamos a implementar la capacidad de exportar y compartir versículos. Esta es una característica muy útil para cualquier aplicación bíblica.

## 1. Crear un Servicio de Exportación

```csharp
using System;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using BibliaApp.Models;
using Microsoft.Win32;

namespace BibliaApp.Services
{
    public class ExportacionService
    {
        public void ExportarComoTexto(string referencia, string texto, string version)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "Archivo de texto (*.txt)|*.txt",
                    Title = "Guardar versículo como texto",
                    FileName = referencia.Replace(":", "_").Replace(" ", "_")
                };
                
                if (saveFileDialog.ShowDialog() == true)
                {
                    string contenido = $"{referencia} ({version})\r\n\r\n{texto}";
                    File.WriteAllText(saveFileDialog.FileName, contenido);
                    MessageBox.Show("Versículo guardado exitosamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al exportar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        public void ExportarComoImagen(FrameworkElement elementoVisual, string nombreArchivo)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "Imagen PNG (*.png)|*.png",
                    Title = "Guardar versículo como imagen",
                    FileName = nombreArchivo.Replace(":", "_").Replace(" ", "_")
                };
                
                if (saveFileDialog.ShowDialog() == true)
                {
                    RenderTargetBitmap renderBitmap = new RenderTargetBitmap(
                        (int)elementoVisual.ActualWidth,
                        (int)elementoVisual.ActualHeight,
                        96d,
                        96d,
                        PixelFormats.Pbgra32);
                    
                    renderBitmap.Render(elementoVisual);
                    
                    PngBitmapEncoder encoder = new PngBitmapEncoder();
                    encoder.Frames.Add(BitmapFrame.Create(renderBitmap));
                    
                    using (FileStream fs = File.Create(saveFileDialog.FileName))
                    {
                        encoder.Save(fs);
                    }
                    
                    MessageBox.Show("Imagen guardada exitosamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al exportar como imagen: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        public void CompartirPorCorreo(string referencia, string texto, string version)
        {
            try
            {
                string subject = $"Versículo Bíblico: {referencia}";
                string body = $"{referencia} ({version})\r\n\r\n{texto}";
                
                string mailtoUri = $"mailto:?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}";
                
                // Abrir el cliente de correo predeterminado
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = mailtoUri,
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al compartir por correo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
```

## 2. Crear la Ventana de Exportación

```csharp
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class ExportarVersiculoWindow : Window
    {
        private ExportacionService _exportacionService;
        private string _referencia;
        private string _texto;
        private string _version;
        
        public ExportarVersiculoWindow(string referencia, string texto, string version)
        {
            InitializeComponent();
            
            _exportacionService = new ExportacionService();
            _referencia = referencia;
            _texto = texto;
            _version = version;
            
            // Mostrar la vista previa
            ReferenciaTextBlock.Text = referencia;
            VersionTextBlock.Text = version;
            TextoTextBlock.Text = texto;
            
            // Configurar el tamaño de la vista previa
            VistaPreviaPanel.Width = 500;
            VistaPreviaPanel.Height = 300;
        }
        
        private void ExportarTextoBtn_Click(object sender, RoutedEventArgs e)
        {
            _exportacionService.ExportarComoTexto(_referencia, _texto, _version);
        }
        
        private void ExportarImagenBtn_Click(object sender, RoutedEventArgs e)
        {
            // Necesitamos hacer una copia del panel para la exportación con fondo blanco
            Border panelExportar = new Border
            {
                Background = Brushes.White,
                Padding = new Thickness(20),
                Child = new StackPanel
                {
                    Children = 
                    {
                        new TextBlock
                        {
                            Text = _referencia,
                            FontWeight = FontWeights.Bold,
                            FontSize = 16,
                            Margin = new Thickness(0, 0, 0, 5)
                        },
                        new TextBlock
                        {
                            Text = $"({_version})",
                            FontStyle = FontStyles.Italic,
                            Margin = new Thickness(0, 0, 0, 15)
                        },
                        new TextBlock
                        {
                            Text = _texto,
                            TextWrapping = TextWrapping.Wrap
                        }
                    }
                }
            };
            
            // Añadir temporalmente al visual tree para renderizar
            ExportContainer.Children.Add(panelExportar);
            
            // Ajustar dimensiones
            panelExportar.Measure(new Size(500, 300));
            panelExportar.Arrange(new Rect(0, 0, 500, 300));
            
            _exportacionService.ExportarComoImagen(panelExportar, _referencia);
            
            // Eliminarlo del visual tree
            ExportContainer.Children.Remove(panelExportar);
        }
        
        private void CompartirCorreoBtn_Click(object sender, RoutedEventArgs e)
        {
            _exportacionService.CompartirPorCorreo(_referencia, _texto, _version);
        }
        
        private void CopiarPortapapelesBtn_Click(object sender, RoutedEventArgs e)
        {
            string textoCompleto = $"{_referencia} ({_version})\r\n\r\n{_texto}";
            Clipboard.SetText(textoCompleto);
            MessageBox.Show("Texto copiado al portapapeles.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }
}
```

## 3. Crear el archivo XAML para la ventana de exportación

```xml
<Window x:Class="BibliaApp.Views.ExportarVersiculoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Exportar Versículo" Height="500" Width="600" WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Exportar o Compartir Versículo" FontSize="18" FontWeight="Bold" Margin="0,0,0,15"/>
        
        <!-- Vista previa -->
        <Border Grid.Row="1" Background="{DynamicResource FondoVersiculo}" BorderBrush="{DynamicResource Borde}" 
                BorderThickness="1" CornerRadius="4" Padding="15">
            <Grid>
                <StackPanel x:Name="VistaPreviaPanel">
                    <TextBlock x:Name="ReferenciaTextBlock" FontWeight="Bold" FontSize="16" Margin="0,0,0,5"/>
                    <TextBlock x:Name="VersionTextBlock" FontStyle="Italic" Margin="0,0,0,15"/>
                    <TextBlock x:Name="TextoTextBlock" TextWrapping="Wrap"/>
                </StackPanel>
            </Grid>
        </Border>
        
        <!-- Contenedor invisible para la exportación -->
        <Grid x:Name="ExportContainer" Visibility="Collapsed"/>
        
        <!-- Botones de acción -->
        <UniformGrid Grid.Row="2" Rows="1" Margin="0,20,0,0">
            <Button x:Name="ExportarTextoBtn" Content="Exportar como Texto" Margin="5" Padding="10,8" Click="ExportarTextoBtn_Click"/>
            <Button x:Name="ExportarImagenBtn" Content="Exportar como Imagen" Margin="5" Padding="10,8" Click="ExportarImagenBtn_Click"/>
            <Button x:Name="CopiarPortapapelesBtn" Content="Copiar al Portapapeles" Margin="5" Padding="10,8" Click="CopiarPortapapelesBtn_Click"/>
            <Button x:Name="CompartirCorreoBtn" Content="Compartir por Correo" Margin="5" Padding="10,8" Click="CompartirCorreoBtn_Click"/>
        </UniformGrid>
    </Grid>
</Window>
```

## 4. Modificar MainWindow.xaml.cs para agregar la funcionalidad de exportar

```csharp
// Añadir este método para mostrar el diálogo de exportación
private void ExportarVersiculo_Click(object sender, RoutedEventArgs e)
{
    if (_versionActual != null && _libroActual != null && _capituloActual != null)
    {
        // Mostrar diálogo para seleccionar el versículo
        var dialog = new SeleccionVersiculoDialog(_capituloActual.Versiculos);
        if (dialog.ShowDialog() == true && dialog.VersiculoSeleccionado != null)
        {
            var versiculo = dialog.VersiculoSeleccionado;
            string referencia = $"{_libroActual.Nombre} {_capituloActual.Numero}:{versiculo.Numero}";
            string texto = versiculo.Texto ?? "";
            string version = _versionActual.Nombre ?? "";
            
            var exportarWindow = new ExportarVersiculoWindow(referencia, texto, version);
            exportarWindow.Owner = this;
            exportarWindow.ShowDialog();
        }
    }
    else
    {
        MessageBox.Show("Por favor, seleccione un capítulo primero.", "Información requerida", 
            MessageBoxButton.OK, MessageBoxImage.Information);
    }
}
```

## 5. Modificar MainWindow.xaml para agregar el botón de exportación

```xml
<!-- Añadir este botón junto a los otros en la barra superior -->
<Button Content="Exportar Versículo" Width="120" Margin="10,0,0,0" Style="{StaticResource BotonSecundario}" Click="ExportarVersiculo_Click"/>
```

Con esta implementación, los usuarios de tu aplicación pueden:

1. Exportar versículos como archivos de texto
2. Guardar versículos como imágenes PNG
3. Copiar versículos al portapapeles
4. Compartir versículos por correo electrónico

Esta funcionalidad es muy útil para quienes estudian la Biblia y desean compartir sus hallazgos o guardarlos para referencia futura.

¿Quieres que implementemos algo más, como planes de lectura bíblica o estadísticas de lectura?

RafaelG1986: Quiero implementar un sistema de busqueda pero en internet para traer versiculos o libros para integrarlo en el programa

GitHub Copilot: # Implementación de Sistema de Búsqueda en Internet de Contenido Bíblico

Vamos a implementar un sistema para buscar versículos y libros bíblicos en internet e integrarlos en tu aplicación. Utilizaremos la API gratuita de Bible.org (que ofrece múltiples versiones) para este propósito.

## 1. Crear un Servicio de API Bíblica

Primero, necesitamos instalar los paquetes necesarios:

```bash
dotnet add package Newtonsoft.Json
dotnet add package System.Net.Http.Json
```

Ahora, creemos un servicio para conectarnos a la API:

```csharp
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaApiService
    {
        private readonly HttpClient _httpClient;
        private const string ApiBaseUrl = "https://labs.bible.org/api/";
        
        public BibliaApiService()
        {
            _httpClient = new HttpClient();
        }
        
        // Buscar por referencia específica
        public async Task<List<VersiculoApi>> BuscarPorReferenciaAsync(string referencia, string version = "esv")
        {
            try
            {
                // Formato de URL: https://labs.bible.org/api/?passage=Juan+3:16-17&type=json
                string url = $"{ApiBaseUrl}?passage={Uri.EscapeDataString(referencia)}&type=json";
                
                var response = await _httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                
                var versiculos = await response.Content.ReadFromJsonAsync<List<VersiculoApi>>() 
                    ?? new List<VersiculoApi>();
                
                return versiculos;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al buscar referencia: {ex.Message}", ex);
            }
        }
        
        // Buscar por palabras clave
        public async Task<List<VersiculoApi>> BuscarPorTextoAsync(string texto, string version = "esv")
        {
            try
            {
                // Format URL: https://labs.bible.org/api/?keyword=love&type=json
                string url = $"{ApiBaseUrl}?keyword={Uri.EscapeDataString(texto)}&type=json";
                
                var response = await _httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                
                var versiculos = await response.Content.ReadFromJsonAsync<List<VersiculoApi>>() 
                    ?? new List<VersiculoApi>();
                
                return versiculos;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al buscar texto: {ex.Message}", ex);
            }
        }
        
        // Obtener capítulo completo
        public async Task<List<VersiculoApi>> ObtenerCapituloAsync(string libro, int capitulo, string version = "esv")
        {
            try
            {
                // Format URL: https://labs.bible.org/api/?passage=Juan+3&type=json
                string url = $"{ApiBaseUrl}?passage={Uri.EscapeDataString(libro)}+{capitulo}&type=json";
                
                var response = await _httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                
                var versiculos = await response.Content.ReadFromJsonAsync<List<VersiculoApi>>() 
                    ?? new List<VersiculoApi>();
                
                return versiculos;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al obtener capítulo: {ex.Message}", ex);
            }
        }
        
        // Obtener libro completo
        public async Task<Dictionary<int, List<VersiculoApi>>> ObtenerLibroAsync(string libro, string version = "esv")
        {
            try
            {
                // Los libros pueden ser muy grandes, así que obtenemos por capítulos
                var resultado = new Dictionary<int, List<VersiculoApi>>();
                
                // Obtener información del libro para saber cuántos capítulos tiene
                // En un caso real, necesitaríamos una lista de capítulos por libro
                // Por ahora usaremos un enfoque simple con 10 capítulos max para prueba
                for (int i = 1; i <= 10; i++)
                {
                    try
                    {
                        var capitulo = await ObtenerCapituloAsync(libro, i, version);
                        if (capitulo.Count > 0)
                        {
                            resultado.Add(i, capitulo);
                        }
                        else
                        {
                            // Si no hay versículos, asumimos que llegamos al final del libro
                            break;
                        }
                    }
                    catch
                    {
                        // Si hay error, asumimos que llegamos al final del libro
                        break;
                    }
                }
                
                return resultado;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al obtener libro: {ex.Message}", ex);
            }
        }
    }
    
    // Modelo para la API
    public class VersiculoApi
    {
        [JsonProperty("bookname")]
        public string NombreLibro { get; set; } = "";
        
        [JsonProperty("chapter")]
        public string Capitulo { get; set; } = "";
        
        [JsonProperty("verse")]
        public string Versiculo { get; set; } = "";
        
        [JsonProperty("text")]
        public string Texto { get; set; } = "";
    }
}
```

## 2. Crear la Ventana de Búsqueda Online e Importación

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class BusquedaOnlineWindow : Window
    {
        private BibliaApiService _bibliaApiService;
        private BibliaService _bibliaService;
        private List<VersiculoApi> _resultados;
        
        public BusquedaOnlineWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            
            _bibliaApiService = new BibliaApiService();
            _bibliaService = bibliaService;
            _resultados = new List<VersiculoApi>();
            
            // Configurar opciones de búsqueda
            TipoBusquedaComboBox.ItemsSource = new List<string> 
            { 
                "Por referencia (ej. Juan 3:16)", 
                "Por texto (ej. amor)", 
                "Capítulo completo", 
                "Libro completo" 
            };
            TipoBusquedaComboBox.SelectedIndex = 0;
            
            VersionComboBox.ItemsSource = new List<string> { "ESV (English)", "KJV (English)", "NET (English)" };
            VersionComboBox.SelectedIndex = 0;
            
            // Configurar versiones disponibles para importar
            var versiones = _bibliaService.ObtenerVersiones();
            VersionLocalComboBox.ItemsSource = versiones;
            VersionLocalComboBox.DisplayMemberPath = "Nombre";
            if (versiones.Count > 0)
                VersionLocalComboBox.SelectedIndex = 0;
        }
        
        private async void BuscarBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string consulta = ConsultaTextBox.Text.Trim();
                if (string.IsNullOrEmpty(consulta))
                {
                    MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                
                // Mostrar indicador de carga
                StatusTextBlock.Text = "Buscando...";
                BuscarBtn.IsEnabled = false;
                ResultadosListView.Visibility = Visibility.Collapsed;
                LoadingPanel.Visibility = Visibility.Visible;
                
                string version = VersionComboBox.SelectedIndex == 0 ? "esv" : 
                                VersionComboBox.SelectedIndex == 1 ? "kjv" : "net";
                
                switch (TipoBusquedaComboBox.SelectedIndex)
                {
                    case 0: // Por referencia
                        _resultados = await _bibliaApiService.BuscarPorReferenciaAsync(consulta, version);
                        break;
                    case 1: // Por texto
                        _resultados = await _bibliaApiService.BuscarPorTextoAsync(consulta, version);
                        break;
                    case 2: // Capítulo completo
                        if (!consulta.Contains(" "))
                        {
                            MessageBox.Show("Para buscar un capítulo, ingrese libro y número (ej. 'Juan 3').", "Formato incorrecto", MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                        }
                        
                        string[] partes = consulta.Split(' ', 2);
                        string libro = partes[0];
                        int capitulo = int.Parse(partes[1]);
                        _resultados = await _bibliaApiService.ObtenerCapituloAsync(libro, capitulo, version);
                        break;
                    case 3: // Libro completo
                        StatusTextBlock.Text = "Obteniendo libro completo (esto puede tardar)...";
                        var libroCompleto = await _bibliaApiService.ObtenerLibroAsync(consulta, version);
                        _resultados = libroCompleto.SelectMany(c => c.Value).ToList();
                        break;
                }
                
                // Mostrar resultados
                if (_resultados.Count > 0)
                {
                    ResultadosListView.ItemsSource = _resultados;
                    ResultadosListView.Visibility = Visibility.Visible;
                    
                    ImportarPanel.Visibility = Visibility.Visible;
                    StatusTextBlock.Text = $"Se encontraron {_resultados.Count} resultados.";
                }
                else
                {
                    ResultadosListView.Visibility = Visibility.Collapsed;
                    ImportarPanel.Visibility = Visibility.Collapsed;
                    StatusTextBlock.Text = "No se encontraron resultados para su búsqueda.";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al realizar la búsqueda: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al realizar la búsqueda.";
            }
            finally
            {
                BuscarBtn.IsEnabled = true;
                LoadingPanel.Visibility = Visibility.Collapsed;
            }
        }
        
        private async void ImportarBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_resultados.Count == 0)
                {
                    MessageBox.Show("No hay resultados para importar.", "Sin resultados", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                if (VersionLocalComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Por favor, seleccione una versión local donde importar.", "Versión requerida", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                var versionLocal = (VersionBiblia)VersionLocalComboBox.SelectedItem;
                StatusTextBlock.Text = "Importando contenido...";
                ImportarBtn.IsEnabled = false;
                
                // Agrupar versículos por libro y capítulo
                var porLibroCapitulo = _resultados.GroupBy(v => new { Libro = v.NombreLibro, Capitulo = int.Parse(v.Capitulo) });
                int totalLibros = porLibroCapitulo.Select(g => g.Key.Libro).Distinct().Count();
                int totalCapitulos = porLibroCapitulo.Count();
                int totalVersiculos = _resultados.Count;
                
                int librosImportados = 0;
                int capitulosImportados = 0;
                int versiculosImportados = 0;
                
                // Por cada libro en los resultados
                foreach (var libro in porLibroCapitulo.Select(g => g.Key.Libro).Distinct())
                {
                    try
                    {
                        // Verificar si ya existe el libro
                        var libroExistente = versionLocal.Libros.FirstOrDefault(l => l.Nombre?.ToLower() == libro.ToLower());
                        
                        if (libroExistente == null)
                        {
                            // Si no existe, crearlo
                            libroExistente = _bibliaService.AgregarLibro(versionLocal.Id ?? "", libro, libro.Substring(0, Math.Min(3, libro.Length)).ToUpper());
                            librosImportados++;
                        }
                        
                        // Por cada capítulo del libro
                        var capitulos = porLibroCapitulo.Where(g => g.Key.Libro == libro);
                        foreach (var grupo in capitulos)
                        {
                            int numCapitulo = grupo.Key.Capitulo;
                            
                            // Verificar si ya existe el capítulo
                            var capituloExistente = libroExistente.Capitulos.FirstOrDefault(c => c.Numero == numCapitulo);
                            
                            if (capituloExistente == null)
                            {
                                // Si no existe, crearlo
                                capituloExistente = _bibliaService.AgregarCapitulo(versionLocal.Id ?? "", libro, numCapitulo);
                                capitulosImportados++;
                            }
                            
                            // Por cada versículo del capítulo
                            foreach (var versiculo in grupo)
                            {
                                int numVersiculo = int.Parse(versiculo.Versiculo);
                                
                                // Verificar si ya existe el versículo
                                var versiculoExistente = capituloExistente.Versiculos.FirstOrDefault(v => v.Numero == numVersiculo);
                                
                                if (versiculoExistente == null)
                                {
                                    // Si no existe, crearlo
                                    _bibliaService.AgregarVersiculo(versionLocal.Id ?? "", libro, numCapitulo, numVersiculo, versiculo.Texto);
                                    versiculosImportados++;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error importando libro {libro}: {ex.Message}");
                    }
                }
                
                MessageBox.Show($"Importación completada:\n\n" +
                               $"- Libros nuevos: {librosImportados} de {totalLibros}\n" +
                               $"- Capítulos nuevos: {capitulosImportados} de {totalCapitulos}\n" +
                               $"- Versículos nuevos: {versiculosImportados} de {totalVersiculos}",
                               "Importación completada", MessageBoxButton.OK, MessageBoxImage.Information);
                
                StatusTextBlock.Text = "Importación completada.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al importar contenido: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al importar contenido.";
            }
            finally
            {
                ImportarBtn.IsEnabled = true;
            }
        }
        
        private void ResultadosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ResultadosListView.SelectedItem != null)
            {
                var versiculo = (VersiculoApi)ResultadosListView.SelectedItem;
                DetalleTextBlock.Text = $"{versiculo.NombreLibro} {versiculo.Capitulo}:{versiculo.Versiculo}\n\n{versiculo.Texto}";
            }
        }
    }
}
```

## 3. Crear XAML para la ventana de búsqueda online

```xml
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="600" Width="900"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Búsqueda Online de Contenido Bíblico" 
                  FontSize="20" FontWeight="Bold" Margin="0,0,0,15"/>
        
        <!-- Controles de búsqueda -->
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <TextBlock Grid.Row="0" Grid.Column="0" Text="Tipo de búsqueda:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="TipoBusquedaComboBox" 
                     Margin="0,0,10,0"/>
            
            <TextBlock Grid.Row="0" Grid.Column="2" Text="Versión:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="VersionComboBox" 
                     Width="150"/>
            
            <TextBlock Grid.Row="1" Grid.Column="0" Text="Consulta:" 
                     VerticalAlignment="Center" Margin="0,10,10,0"/>
            <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ConsultaTextBox" 
                   Padding="5" Margin="0,10,10,0" KeyDown="ConsultaTextBox_KeyDown"/>
            <Button Grid.Row="1" Grid.Column="3" x:Name="BuscarBtn" Content="Buscar" 
                  Width="150" Margin="0,10,0,0" Click="BuscarBtn_Click"/>
        </Grid>
        
        <!-- Resultados y detalles -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de resultados -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <TextBlock DockPanel.Dock="Top" Text="Resultados:" FontWeight="Bold" Margin="0,0,0,5"/>
                <ListView x:Name="ResultadosListView" SelectionChanged="ResultadosListView_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Libro" DisplayMemberBinding="{Binding NombreLibro}" Width="100"/>
                            <GridViewColumn Header="Cap" DisplayMemberBinding="{Binding Capitulo}" Width="40"/>
                            <GridViewColumn Header="Ver" DisplayMemberBinding="{Binding Versiculo}" Width="40"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="250"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de carga -->
            <Grid x:Name="LoadingPanel" Grid.Column="0" Visibility="Collapsed">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Buscando contenido..." HorizontalAlignment="Center" Margin="0,0,0,10"/>
                    <ProgressBar IsIndeterminate="True" Height="20" Width="200"/>
                </StackPanel>
            </Grid>
            
            <!-- Detalle del versículo -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <TextBlock DockPanel.Dock="Top" Text="Detalle:" FontWeight="Bold" Margin="0,0,0,5"/>
                <TextBlock x:Name="DetalleTextBlock" TextWrapping="Wrap" 
                         Background="{DynamicResource FondoVersiculo}" Padding="10"/>
            </DockPanel>
        </Grid>
        
        <!-- Panel de importación -->
        <Grid Grid.Row="3" x:Name="ImportarPanel" Visibility="Collapsed" Margin="0,15,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Grid.Column="0" Text="Importar a versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Column="1" x:Name="VersionLocalComboBox" Margin="0,0,10,0"/>
            <Button Grid.Column="2" x:Name="ImportarBtn" Content="Importar Contenido" 
                  Width="150" Click="ImportarBtn_Click"/>
        </Grid>
        
        <!-- Barra de estado -->
        <Border Grid.Row="4" Background="{DynamicResource FondoControl}" Margin="0,15,0,0" Padding="10">
            <TextBlock x:Name="StatusTextBlock" Text="Listo para buscar." TextWrapping="Wrap"/>
        </Border>
    </Grid>
</Window>
```

## 4. Agregar el evento KeyDown para buscar con Enter

```csharp
// Añadir este método
private void ConsultaTextBox_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
{
    if (e.Key == System.Windows.Input.Key.Enter)
    {
        BuscarBtn_Click(sender, e);
    }
}
```

## 5. Modificar MainWindow.xaml para añadir botón de búsqueda online

```xml
<!-- Añadir este botón junto a los otros en la barra superior -->
<Button Content="Buscar Online" Width="100" Margin="10,0,0,0" Style="{StaticResource BotonBase}" Click="AbrirBusquedaOnline_Click"/>
```

## 6. Implementar método AbrirBusquedaOnline_Click en MainWindow.xaml.cs

```csharp
private void AbrirBusquedaOnline_Click(object sender, RoutedEventArgs e)
{
    var ventanaBusquedaOnline = new BusquedaOnlineWindow(_bibliaService);
    ventanaBusquedaOnline.Owner = this;
    ventanaBusquedaOnline.ShowDialog();
    
    // Al cerrar la ventana, actualizamos la interfaz por si se importó nuevo contenido
    if (_versionActual != null)
    {
        // Refrescar la lista de libros
        LibrosListBox.ItemsSource = null;
        LibrosListBox.ItemsSource = _versionActual.Libros;
    }
}
```

## Características de esta implementación

Esta implementación de búsqueda online proporciona:

1. **Búsqueda por diferentes criterios**:
   - Búsqueda por referencia específica (ej. "Juan 3:16")
   - Búsqueda por palabras clave (ej. "amor")
   - Búsqueda de capítulos completos
   - Búsqueda de libros completos

2. **Importación selectiva**:
   - Eliges a qué versión local importar el contenido
   - Importa solo lo que no existe ya en tu base de datos

3. **Interfaz amigable**:
   - Visualización de resultados en una lista
   - Vista previa detallada de cada versículo
   - Indicadores de progreso

4. **Integración completa**:
   - Se conecta con tu sistema existente
   - Actualiza automáticamente la interfaz al importar

La API de Bible.org tiene algunas limitaciones, como disponibilidad principalmente de versiones en inglés. Si necesitas versiones en español, podrías considerar otras APIs como la de la Sociedad Bíblica Americana o APIs.Bible. El código está diseñado para ser fácilmente adaptable a otras fuentes de datos.

¿Quieres que modifique algo específico de esta implementación para adaptarla mejor a tus necesidades?

Código similar encontrado con 4 tipos de licencias

RafaelG1986: Biblewateway es otro mejor

GitHub Copilot: # Implementación de Búsqueda Online con BibleGateway

Tienes razón, BibleGateway es una mejor opción ya que ofrece:
- Muchas más traducciones bíblicas, incluyendo más versiones en español
- Interfaz más completa
- Búsqueda más potente

Vamos a implementar la búsqueda usando BibleGateway:

## 1. Crear el Servicio para BibleGateway

Primero, necesitamos instalar un paquete adicional para realizar web scraping:

```bash
dotnet add package HtmlAgilityPack
```

Ahora, creemos el servicio para BibleGateway:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using HtmlAgilityPack;

namespace BibliaApp.Services
{
    public class BibleGatewayService
    {
        private readonly HttpClient _httpClient;
        private const string BaseUrl = "https://www.biblegateway.com";
        
        public BibleGatewayService()
        {
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "BibliaApp/1.0");
        }
        
        // Obtener versiones disponibles
        public async Task<List<VersionBiblica>> ObtenerVersionesDisponiblesAsync()
        {
            try
            {
                var versiones = new List<VersionBiblica>();
                string url = $"{BaseUrl}/versions/";
                
                var html = await _httpClient.GetStringAsync(url);
                var doc = new HtmlDocument();
                doc.LoadHtml(html);
                
                // Buscar la sección de versiones en español
                var seccionEspanol = doc.DocumentNode.SelectNodes("//h3[contains(text(), 'Spanish')]")
                    ?.FirstOrDefault()?.ParentNode;
                
                if (seccionEspanol != null)
                {
                    var listaVersiones = seccionEspanol.SelectNodes(".//tr");
                    if (listaVersiones != null)
                    {
                        foreach (var versionNode in listaVersiones)
                        {
                            var enlaceVersion = versionNode.SelectSingleNode(".//a");
                            var descripcion = versionNode.SelectSingleNode(".//td[2]");
                            
                            if (enlaceVersion != null && descripcion != null)
                            {
                                string nombre = enlaceVersion.InnerText.Trim();
                                string abreviatura = Regex.Match(enlaceVersion.GetAttributeValue("href", ""), @"/versions/([^/]+)/").Groups[1].Value;
                                string desc = descripcion.InnerText.Trim();
                                
                                versiones.Add(new VersionBiblica
                                {
                                    Id = abreviatura,
                                    Nombre = nombre,
                                    Descripcion = desc
                                });
                            }
                        }
                    }
                }
                
                // También agregar algunas versiones en inglés comunes
                versiones.Add(new VersionBiblica { Id = "NIV", Nombre = "New International Version", Descripcion = "English" });
                versiones.Add(new VersionBiblica { Id = "KJV", Nombre = "King James Version", Descripcion = "English" });
                versiones.Add(new VersionBiblica { Id = "ESV", Nombre = "English Standard Version", Descripcion = "English" });
                
                return versiones;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al obtener versiones: {ex.Message}", ex);
            }
        }
        
        // Buscar por referencia (e.g., "Juan 3:16")
        public async Task<List<Versiculo>> BuscarPorReferenciaAsync(string referencia, string versionId)
        {
            try
            {
                string url = $"{BaseUrl}/passage/?search={HttpUtility.UrlEncode(referencia)}&version={versionId}";
                return await ExtraerVersiculosDeUrlAsync(url);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al buscar por referencia: {ex.Message}", ex);
            }
        }
        
        // Buscar por palabras clave
        public async Task<List<Versiculo>> BuscarPorPalabrasClaveAsync(string palabrasClave, string versionId)
        {
            try
            {
                string url = $"{BaseUrl}/search/?q={HttpUtility.UrlEncode(palabrasClave)}&version={versionId}";
                
                var html = await _httpClient.GetStringAsync(url);
                var doc = new HtmlDocument();
                doc.LoadHtml(html);
                
                var resultados = new List<Versiculo>();
                
                // Encontrar cada resultado de búsqueda
                var nodos = doc.DocumentNode.SelectNodes("//div[contains(@class, 'search-result-text')]");
                if (nodos != null)
                {
                    foreach (var nodo in nodos)
                    {
                        var referenciaNode = nodo.SelectSingleNode(".//a[contains(@class, 'bible-reference-link')]");
                        if (referenciaNode != null)
                        {
                            string referenciaCompleta = referenciaNode.InnerText.Trim();
                            var partes = ParsearReferencia(referenciaCompleta);
                            
                            var textoNode = nodo.SelectSingleNode(".//div[contains(@class, 'text-html')]");
                            string texto = textoNode != null ? CleanHtmlText(textoNode.InnerHtml) : "";
                            
                            resultados.Add(new Versiculo
                            {
                                Libro = partes.Item1,
                                Capitulo = partes.Item2,
                                Numero = partes.Item3,
                                Texto = texto,
                                ReferenciaCompleta = referenciaCompleta
                            });
                        }
                    }
                }
                
                return resultados;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al buscar por palabras clave: {ex.Message}", ex);
            }
        }
        
        // Obtener capítulo completo
        public async Task<List<Versiculo>> ObtenerCapituloAsync(string libro, int capitulo, string versionId)
        {
            try
            {
                string url = $"{BaseUrl}/passage/?search={HttpUtility.UrlEncode($"{libro} {capitulo}")}&version={versionId}";
                return await ExtraerVersiculosDeUrlAsync(url);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al obtener capítulo: {ex.Message}", ex);
            }
        }
        
        // Obtener libro completo
        public async Task<Dictionary<int, List<Versiculo>>> ObtenerLibroAsync(string libro, string versionId)
        {
            var resultado = new Dictionary<int, List<Versiculo>>();
            
            try
            {
                // Primero obtenemos el capítulo 1 para determinar cuántos capítulos tiene el libro
                var capitulo1 = await ObtenerCapituloAsync(libro, 1, versionId);
                
                if (capitulo1.Count > 0)
                {
                    resultado[1] = capitulo1;
                    
                    // Buscar el navegador de capítulos para encontrar el último capítulo
                    string url = $"{BaseUrl}/passage/?search={HttpUtility.UrlEncode($"{libro} 1")}&version={versionId}";
                    var html = await _httpClient.GetStringAsync(url);
                    var doc = new HtmlDocument();
                    doc.LoadHtml(html);
                    
                    var chapterNav = doc.DocumentNode.SelectNodes("//div[contains(@class, 'chapter-nav')]//li/a")?.ToList();
                    
                    int maxCap = 1;
                    if (chapterNav != null && chapterNav.Count > 0)
                    {
                        foreach (var link in chapterNav)
                        {
                            if (int.TryParse(link.InnerText.Trim(), out int capNum))
                            {
                                maxCap = Math.Max(maxCap, capNum);
                            }
                        }
                    }
                    
                    // Obtener el resto de capítulos
                    for (int i = 2; i <= maxCap; i++)
                    {
                        var capitulo = await ObtenerCapituloAsync(libro, i, versionId);
                        if (capitulo.Count > 0)
                        {
                            resultado[i] = capitulo;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al obtener libro: {ex.Message}", ex);
            }
            
            return resultado;
        }
        
        // Método auxiliar para extraer versículos de una URL
        private async Task<List<Versiculo>> ExtraerVersiculosDeUrlAsync(string url)
        {
            var resultados = new List<Versiculo>();
            
            var html = await _httpClient.GetStringAsync(url);
            var doc = new HtmlDocument();
            doc.LoadHtml(html);
            
            // Encontrar la referencia completa (libro y capítulo)
            var headerRef = doc.DocumentNode.SelectSingleNode("//div[contains(@class, 'passage-content')]//h1");
            string referenciaCompleta = headerRef != null ? headerRef.InnerText.Trim() : "";
            
            // Extraer el libro y capítulo de la referencia completa
            var partesHeader = ParsearReferenciaHeader(referenciaCompleta);
            string libro = partesHeader.Item1;
            int capitulo = partesHeader.Item2;
            
            // Encontrar todos los versículos
            var versiculosNodos = doc.DocumentNode.SelectNodes("//div[contains(@class, 'passage-content')]//p//span[contains(@class, 'verse-')]");
            
            if (versiculosNodos != null)
            {
                foreach (var nodo in versiculosNodos)
                {
                    // Obtener el número de versículo
                    var match = Regex.Match(nodo.GetAttributeValue("class", ""), @"verse-(\d+)");
                    if (match.Success && int.TryParse(match.Groups[1].Value, out int numeroVersiculo))
                    {
                        // Obtener el texto del versículo
                        string texto = CleanHtmlText(nodo.InnerHtml);
                        
                        resultados.Add(new Versiculo
                        {
                            Libro = libro,
                            Capitulo = capitulo,
                            Numero = numeroVersiculo,
                            Texto = texto,
                            ReferenciaCompleta = $"{libro} {capitulo}:{numeroVersiculo}"
                        });
                    }
                }
            }
            
            return resultados;
        }
        
        // Helpers para limpiar y parsear texto
        private string CleanHtmlText(string html)
        {
            // Eliminar etiquetas HTML
            html = Regex.Replace(html, "<[^>]*>", "");
            // Reemplazar caracteres especiales HTML
            html = HttpUtility.HtmlDecode(html);
            // Limpiar espacios
            html = Regex.Replace(html, @"\s+", " ").Trim();
            
            return html;
        }
        
        private Tuple<string, int, int> ParsearReferencia(string referencia)
        {
            // Ejemplos: "Juan 3:16", "Génesis 1:1-5", "Mateo 5:3"
            var match = Regex.Match(referencia, @"([^\d:]+)\s+(\d+):(\d+)");
            
            string libro = match.Success ? match.Groups[1].Value.Trim() : "";
            int capitulo = match.Success && int.TryParse(match.Groups[2].Value, out int cap) ? cap : 1;
            int versiculo = match.Success && int.TryParse(match.Groups[3].Value, out int ver) ? ver : 1;
            
            return new Tuple<string, int, int>(libro, capitulo, versiculo);
        }
        
        private Tuple<string, int> ParsearReferenciaHeader(string referenciaHeader)
        {
            // Ejemplos: "Juan 3", "Génesis 1", "Salmos 23"
            var match = Regex.Match(referenciaHeader, @"([^\d:]+)\s+(\d+)");
            
            string libro = match.Success ? match.Groups[1].Value.Trim() : "";
            int capitulo = match.Success && int.TryParse(match.Groups[2].Value, out int cap) ? cap : 1;
            
            return new Tuple<string, int>(libro, capitulo);
        }
    }
    
    // Modelo para la respuesta de BibleGateway
    public class VersionBiblica
    {
        public string Id { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Descripcion { get; set; } = "";
        
        public override string ToString() => $"{Nombre} ({Id})";
    }
    
    public class Versiculo
    {
        public string Libro { get; set; } = "";
        public int Capitulo { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = "";
        public string ReferenciaCompleta { get; set; } = "";
        
        public override string ToString() => $"{ReferenciaCompleta}: {Texto}";
    }
}
```

## 2. Modificar la interfaz de BusquedaOnlineWindow para usar BibleGateway

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class BusquedaOnlineWindow : Window
    {
        private BibleGatewayService _bibliaApiService;
        private BibliaService _bibliaService;
        private List<Versiculo> _resultados;
        private List<VersionBiblica> _versionesDisponibles;
        
        public BusquedaOnlineWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            
            _bibliaApiService = new BibleGatewayService();
            _bibliaService = bibliaService;
            _resultados = new List<Versiculo>();
            
            // Configurar opciones de búsqueda
            TipoBusquedaComboBox.ItemsSource = new List<string> 
            { 
                "Por referencia (ej. Juan 3:16)", 
                "Por texto (ej. amor)", 
                "Capítulo completo", 
                "Libro completo" 
            };
            TipoBusquedaComboBox.SelectedIndex = 0;
            
            // Configurar versiones disponibles locales para importar
            var versionesLocales = _bibliaService.ObtenerVersiones();
            VersionLocalComboBox.ItemsSource = versionesLocales;
            VersionLocalComboBox.DisplayMemberPath = "Nombre";
            if (versionesLocales.Count > 0)
                VersionLocalComboBox.SelectedIndex = 0;
                
            // Cargar versiones disponibles en BibleGateway
            CargarVersionesBibleGateway();
        }
        
        private async void CargarVersionesBibleGateway()
        {
            try
            {
                StatusTextBlock.Text = "Cargando versiones disponibles...";
                LoadingPanel.Visibility = Visibility.Visible;
                
                _versionesDisponibles = await _bibliaApiService.ObtenerVersionesDisponiblesAsync();
                VersionComboBox.ItemsSource = _versionesDisponibles;
                VersionComboBox.DisplayMemberPath = "Nombre";
                
                // Seleccionar RVR1960 por defecto si está disponible
                var rvr1960 = _versionesDisponibles.FirstOrDefault(v => v.Id.ToUpper() == "RVR1960");
                if (rvr1960 != null)
                    VersionComboBox.SelectedItem = rvr1960;
                else if (_versionesDisponibles.Count > 0)
                    VersionComboBox.SelectedIndex = 0;
                
                StatusTextBlock.Text = "Versiones cargadas. Listo para buscar.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al cargar versiones disponibles: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al cargar versiones. Intente de nuevo.";
            }
            finally
            {
                LoadingPanel.Visibility = Visibility.Collapsed;
            }
        }
        
        private async void BuscarBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string consulta = ConsultaTextBox.Text.Trim();
                if (string.IsNullOrEmpty(consulta))
                {
                    MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                
                // Mostrar indicador de carga
                StatusTextBlock.Text = "Buscando...";
                BuscarBtn.IsEnabled = false;
                ResultadosListView.Visibility = Visibility.Collapsed;
                LoadingPanel.Visibility = Visibility.Visible;
                ImportarPanel.Visibility = Visibility.Collapsed;
                
                if (VersionComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Por favor, seleccione una versión bíblica.", "Versión requerida", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                var versionSeleccionada = (VersionBiblica)VersionComboBox.SelectedItem;
                string versionId = versionSeleccionada.Id;
                
                switch (TipoBusquedaComboBox.SelectedIndex)
                {
                    case 0: // Por referencia
                        _resultados = await _bibliaApiService.BuscarPorReferenciaAsync(consulta, versionId);
                        break;
                    case 1: // Por texto
                        _resultados = await _bibliaApiService.BuscarPorPalabrasClaveAsync(consulta, versionId);
                        break;
                    case 2: // Capítulo completo
                        if (!consulta.Contains(" "))
                        {
                            MessageBox.Show("Para buscar un capítulo, ingrese libro y número (ej. 'Juan 3').", "Formato incorrecto", MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                        }
                        
                        string[] partes = consulta.Split(' ', 2);
                        string libro = partes[0];
                        int capitulo = int.Parse(partes[1]);
                        _resultados = await _bibliaApiService.ObtenerCapituloAsync(libro, capitulo, versionId);
                        break;
                    case 3: // Libro completo
                        StatusTextBlock.Text = "Obteniendo libro completo (esto puede tardar)...";
                        var libroCompleto = await _bibliaApiService.ObtenerLibroAsync(consulta, versionId);
                        _resultados = libroCompleto.SelectMany(c => c.Value).ToList();
                        break;
                }
                
                // Mostrar resultados
                if (_resultados.Count > 0)
                {
                    ResultadosListView.ItemsSource = _resultados;
                    ResultadosListView.Visibility = Visibility.Visible;
                    
                    ImportarPanel.Visibility = Visibility.Visible;
                    StatusTextBlock.Text = $"Se encontraron {_resultados.Count} resultados.";
                }
                else
                {
                    ResultadosListView.Visibility = Visibility.Collapsed;
                    ImportarPanel.Visibility = Visibility.Collapsed;
                    StatusTextBlock.Text = "No se encontraron resultados para su búsqueda.";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al realizar la búsqueda: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al realizar la búsqueda.";
            }
            finally
            {
                BuscarBtn.IsEnabled = true;
                LoadingPanel.Visibility = Visibility.Collapsed;
            }
        }
        
        private async void ImportarBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_resultados.Count == 0)
                {
                    MessageBox.Show("No hay resultados para importar.", "Sin resultados", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                if (VersionLocalComboBox.SelectedItem == null)
                {
                    MessageBox.Show("Por favor, seleccione una versión local donde importar.", "Versión requerida", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                var versionLocal = (VersionBiblia)VersionLocalComboBox.SelectedItem;
                StatusTextBlock.Text = "Importando contenido...";
                ImportarBtn.IsEnabled = false;
                
                // Agrupar versículos por libro y capítulo
                var porLibroCapitulo = _resultados.GroupBy(v => new { Libro = v.Libro, Capitulo = v.Capitulo });
                int totalLibros = porLibroCapitulo.Select(g => g.Key.Libro).Distinct().Count();
                int totalCapitulos = porLibroCapitulo.Count();
                int totalVersiculos = _resultados.Count;
                
                int librosImportados = 0;
                int capitulosImportados = 0;
                int versiculosImportados = 0;
                
                // Por cada libro en los resultados
                foreach (var libro in porLibroCapitulo.Select(g => g.Key.Libro).Distinct())
                {
                    try
                    {
                        // Verificar si ya existe el libro
                        var libroExistente = versionLocal.Libros.FirstOrDefault(l => 
                            l.Nombre?.ToLower() == libro.ToLower());
                        
                        if (libroExistente == null)
                        {
                            // Si no existe, crearlo
                            string abreviatura = libro.Length <= 3 ? 
                                libro.ToUpper() : 
                                libro.Substring(0, Math.Min(3, libro.Length)).ToUpper();
                                
                            libroExistente = _bibliaService.AgregarLibro(versionLocal.Id ?? "", libro, abreviatura);
                            librosImportados++;
                        }
                        
                        // Por cada capítulo del libro
                        var capitulos = porLibroCapitulo.Where(g => g.Key.Libro == libro);
                        foreach (var grupo in capitulos)
                        {
                            int numCapitulo = grupo.Key.Capitulo;
                            
                            // Verificar si ya existe el capítulo
                            var capituloExistente = libroExistente.Capitulos.FirstOrDefault(c => c.Numero == numCapitulo);
                            
                            if (capituloExistente == null)
                            {
                                // Si no existe, crearlo
                                capituloExistente = _bibliaService.AgregarCapitulo(versionLocal.Id ?? "", libro, numCapitulo);
                                capitulosImportados++;
                            }
                            
                            // Por cada versículo del capítulo
                            foreach (var versiculo in grupo)
                            {
                                int numVersiculo = versiculo.Numero;
                                
                                // Verificar si ya existe el versículo
                                var versiculoExistente = capituloExistente.Versiculos.FirstOrDefault(v => v.Numero == numVersiculo);
                                
                                if (versiculoExistente == null)
                                {
                                    // Si no existe, crearlo
                                    _bibliaService.AgregarVersiculo(versionLocal.Id ?? "", libro, numCapitulo, numVersiculo, versiculo.Texto);
                                    versiculosImportados++;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error importando libro {libro}: {ex.Message}");
                    }
                }
                
                MessageBox.Show($"Importación completada:\n\n" +
                               $"- Libros nuevos: {librosImportados} de {totalLibros}\n" +
                               $"- Capítulos nuevos: {capitulosImportados} de {totalCapitulos}\n" +
                               $"- Versículos nuevos: {versiculosImportados} de {totalVersiculos}",
                               "Importación completada", MessageBoxButton.OK, MessageBoxImage.Information);
                
                StatusTextBlock.Text = "Importación completada.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al importar contenido: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al importar contenido.";
            }
            finally
            {
                ImportarBtn.IsEnabled = true;
            }
        }
        
        private void ResultadosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ResultadosListView.SelectedItem != null)
            {
                var versiculo = (Versiculo)ResultadosListView.SelectedItem;
                DetalleTextBlock.Text = $"{versiculo.ReferenciaCompleta}\n\n{versiculo.Texto}";
            }
        }
        
        private void ConsultaTextBox_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.Enter)
            {
                BuscarBtn_Click(sender, e);
            }
        }
    }
}
```

## 3. Actualizar la interfaz XAML de BusquedaOnlineWindow

```xml
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="600" Width="900"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Búsqueda Online de Contenido Bíblico (BibleGateway)" 
                  FontSize="20" FontWeight="Bold" Margin="0,0,0,15"/>
        
        <!-- Controles de búsqueda -->
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <TextBlock Grid.Row="0" Grid.Column="0" Text="Tipo de búsqueda:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="TipoBusquedaComboBox" 
                     Margin="0,0,10,0"/>
            
            <TextBlock Grid.Row="0" Grid.Column="2" Text="Versión:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="VersionComboBox" 
                     Width="200"/>
            
            <TextBlock Grid.Row="1" Grid.Column="0" Text="Consulta:" 
                     VerticalAlignment="Center" Margin="0,10,10,0"/>
            <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ConsultaTextBox" 
                   Padding="5" Margin="0,10,10,0" KeyDown="ConsultaTextBox_KeyDown"/>
            <Button Grid.Row="1" Grid.Column="3" x:Name="BuscarBtn" Content="Buscar" 
                  Width="150" Margin="0,10,0,0" Click="BuscarBtn_Click"/>
        </Grid>
        
        <!-- Resultados y detalles -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de resultados -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <TextBlock DockPanel.Dock="Top" Text="Resultados:" FontWeight="Bold" Margin="0,0,0,5"/>
                <ListView x:Name="ResultadosListView" SelectionChanged="ResultadosListView_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Libro" DisplayMemberBinding="{Binding Libro}" Width="100"/>
                            <GridViewColumn Header="Cap" DisplayMemberBinding="{Binding Capitulo}" Width="40"/>
                            <GridViewColumn Header="Ver" DisplayMemberBinding="{Binding Numero}" Width="40"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="250"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de carga -->
            <Grid x:Name="LoadingPanel" Grid.Column="0" Visibility="Collapsed">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Cargando contenido..." HorizontalAlignment="Center" Margin="0,0,0,10"/>
                    <ProgressBar IsIndeterminate="True" Height="20" Width="200"/>
                </StackPanel>
            </Grid>
            
            <!-- Detalle del versículo -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <TextBlock DockPanel.Dock="Top" Text="Detalle:" FontWeight="Bold" Margin="0,0,0,5"/>
                <TextBlock x:Name="DetalleTextBlock" TextWrapping="Wrap" 
                         Background="{DynamicResource FondoVersiculo}" Padding="10"/>
            </DockPanel>
        </Grid>
        
        <!-- Panel de importación -->
        <Grid Grid.Row="3" x:Name="ImportarPanel" Visibility="Collapsed" Margin="0,15,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Grid.Column="0" Text="Importar a versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Column="1" x:Name="VersionLocalComboBox" Margin="0,0,10,0"/>
            <Button Grid.Column="2" x:Name="ImportarBtn" Content="Importar Contenido" 
                  Width="150" Click="ImportarBtn_Click"/>
        </Grid>
        
        <!-- Barra de estado -->
        <Border Grid.Row="4" Background="{DynamicResource FondoControl}" Margin="0,15,0,0" Padding="10">
            <TextBlock x:Name="StatusTextBlock" Text="Cargando versiones disponibles..." TextWrapping="Wrap"/>
        </Border>
    </Grid>
</Window>
```

## 4. Añadir el botón a MainWindow.xaml

```xml
<!-- Añadir después del botón "Buscar" -->
<Button Content="Buscar Online" Width="100" Margin="10,0,0,0" Style="{StaticResource BotonBase}" Click="AbrirBusquedaOnline_Click"/>
```

## 5. Implementar método AbrirBusquedaOnline_Click en MainWindow.xaml.cs

```csharp
private void AbrirBusquedaOnline_Click(object sender, RoutedEventArgs e)
{
    var ventanaBusquedaOnline = new BusquedaOnlineWindow(_bibliaService);
    ventanaBusquedaOnline.Owner = this;
    ventanaBusquedaOnline.ShowDialog();
    
    // Al cerrar la ventana, actualizamos la interfaz por si se importó nuevo contenido
    if (_versionActual != null)
    {
        // Refrescar la lista de libros
        LibrosListBox.ItemsSource = null;
        LibrosListBox.ItemsSource = _versionActual.Libros;
    }
}
```

## Ventajas de usar BibleGateway sobre Bible.org

Esta implementación con BibleGateway ofrece:

1. **Mayor cantidad de versiones bíblicas**:
   - Múltiples versiones en español (RVR1960, NVI, DHH, TLA, etc.)
   - Muchas versiones en inglés y otros idiomas

2. **Búsqueda más precisa y potente**:
   - Mejor coincidencia de referencias bíblicas
   - Mejores resultados de búsqueda por palabras clave

3. **Contenido más completo**:
   - Todos los libros y capítulos de la Biblia
   - Nombres de libros en español

4. **Interfaz adaptada**:
   - Lista organizada por libro, capítulo y versículo
   - Visualización detallada de cada versículo

**Nota importante**: Esta implementación usa web scraping en BibleGateway. Ten en cuenta que:
1. El uso extensivo podría violar sus términos de servicio
2. Si su sitio web cambia, esta implementación podría dejar de funcionar
3. Es recomendable agregar tiempos de espera entre solicitudes para no sobrecargar su servidor

¿Quieres hacer algún ajuste específico a esta implementación?

Código similar encontrado con 4 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run                                
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(16,22): er
ror CS0104: 'Versiculo' es una referencia ambigua entre 'BibliaAp 
p.Models.Versiculo' y 'BibliaApp.Services.Versiculo' [C:\Biblia\B 
ibliaApp\BibliaApp_xzzvcors_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para el Conflicto de Nombres de Clase

Estás experimentando un conflicto de nombres entre dos clases llamadas `Versiculo` en tu proyecto: una en `BibliaApp.Models` y otra en `BibliaApp.Services`. Vamos a resolver este problema:

## 1. Modificar BusquedaOnlineWindow.xaml.cs para resolver la ambigüedad

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
// Agregar este alias para resolver el conflicto
using BGVersiculo = BibliaApp.Services.Versiculo;

namespace BibliaApp.Views
{
    public partial class BusquedaOnlineWindow : Window
    {
        private BibleGatewayService _bibliaApiService;
        private BibliaService _bibliaService;
        // Usar el alias creado para resolver el conflicto
        private List<BGVersiculo> _resultados;
        private List<VersionBiblica> _versionesDisponibles;
        
        public BusquedaOnlineWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            
            _bibliaApiService = new BibleGatewayService();
            _bibliaService = bibliaService;
            _resultados = new List<BGVersiculo>();
            
            // Resto del código...
        }
        
        // También cambiar en los métodos donde sea necesario
        private async void BuscarBtn_Click(object sender, RoutedEventArgs e)
        {
            // Código existente...
        }
        
        private void ResultadosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ResultadosListView.SelectedItem != null)
            {
                // Usar el alias aquí también
                var versiculo = (BGVersiculo)ResultadosListView.SelectedItem;
                DetalleTextBlock.Text = $"{versiculo.ReferenciaCompleta}\n\n{versiculo.Texto}";
            }
        }
        
        // Resto de métodos...
    }
}
```

## 2. Otra opción: renombrar la clase Versiculo en BibleGatewayService

Una alternativa más limpia sería renombrar la clase `Versiculo` en el servicio de BibleGateway para evitar conflictos:

```csharp
// Cambiar el nombre de la clase
public class VersiculoOnline
{
    public string Libro { get; set; } = "";
    public int Capitulo { get; set; }
    public int Numero { get; set; }
    public string Texto { get; set; } = "";
    public string ReferenciaCompleta { get; set; } = "";
    
    public override string ToString() => $"{ReferenciaCompleta}: {Texto}";
}

// Y actualizar todas las referencias a esta clase en el resto del archivo
public async Task<List<VersiculoOnline>> BuscarPorReferenciaAsync(string referencia, string versionId)
{
    // ...
}

public async Task<List<VersiculoOnline>> BuscarPorPalabrasClaveAsync(string palabrasClave, string versionId)
{
    // ...
}

public async Task<List<VersiculoOnline>> ObtenerCapituloAsync(string libro, int capitulo, string versionId)
{
    // ...
}

public async Task<Dictionary<int, List<VersiculoOnline>>> ObtenerLibroAsync(string libro, string versionId)
{
    // ...
}

private async Task<List<VersiculoOnline>> ExtraerVersiculosDeUrlAsync(string url)
{
    // ...
}
```

## 3. También actualizar en BusquedaOnlineWindow si elegiste la opción 2

Si elegiste renombrar la clase, también debes actualizar BusquedaOnlineWindow:

```csharp
// Ya no necesitas el alias
private List<VersiculoOnline> _resultados;

// Y actualizar todas las referencias
var versiculo = (VersiculoOnline)ResultadosListView.SelectedItem;
```

Cualquiera de estas soluciones resolverá el conflicto entre las dos clases `Versiculo`. La segunda opción (renombrar la clase) es más limpia a largo plazo, pero la primera opción (usar un alias) es menos invasiva si no quieres modificar demasiados archivos.

¿Prefieres alguna de estas soluciones en particular?

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(28,16): warning CS8618: El
 elemento campo "_marcadoresService" que no acepta valores NULL d 
ebe contener un valor distinto de NULL al salir del constructor.  
Considere la posibilidad de agregar el modificador "required'"o d
eclarar el campo como un valor que acepta valores NULL. [C:\Bibli 
a\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(28,16): warning CS8618: El 
 elemento campo "_preferenciasService" que no acepta valores NULL 
 debe contener un valor distinto de NULL al salir del constructor 
. Considere la posibilidad de agregar el modificador "required'"o 
 declarar el campo como un valor que acepta valores NULL. [C:\Bib 
lia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(28,16): warning CS8618: El 
 elemento campo "_preferencias" que no acepta valores NULL debe c 
ontener un valor distinto de NULL al salir del constructor. Consi 
dere la posibilidad de agregar el modificador "required'"o declar 
ar el campo como un valor que acepta valores NULL. [C:\Biblia\Bib 
liaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(21,13): er 
ror CS0103: El nombre 'InitializeComponent' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(28,13): er 
ror CS0103: El nombre 'TipoBusquedaComboBox' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(35,13): er 
ror CS0103: El nombre 'TipoBusquedaComboBox' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(39,13): er 
ror CS0103: El nombre 'VersionLocalComboBox' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(40,13): er 
ror CS0103: El nombre 'VersionLocalComboBox' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(42,17): er 
ror CS0103: El nombre 'VersionLocalComboBox' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(19,16): wa 
rning CS8618: El elemento campo "_versionesDisponibles" que no ac 
epta valores NULL debe contener un valor distinto de NULL al sali 
r del constructor. Considere la posibilidad de agregar el modific 
ador "required'"o declarar el campo como un valor que acepta valo 
res NULL. [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]  
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(52,17): er 
ror CS0103: El nombre 'StatusTextBlock' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(53,17): er 
ror CS0103: El nombre 'LoadingPanel' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(56,17): er 
ror CS0103: El nombre 'VersionComboBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(57,17): er 
ror CS0103: El nombre 'VersionComboBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(62,21): er 
ror CS0103: El nombre 'VersionComboBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(64,21): er 
ror CS0103: El nombre 'VersionComboBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(66,17): er 
ror CS0103: El nombre 'StatusTextBlock' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(71,17): er 
ror CS0103: El nombre 'StatusTextBlock' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(75,17): er 
ror CS0103: El nombre 'LoadingPanel' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(83,35): er 
ror CS0103: El nombre 'ConsultaTextBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(91,17): er 
ror CS0103: El nombre 'StatusTextBlock' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(92,17): er 
ror CS0103: El nombre 'BuscarBtn' no existe en el contexto actual 
 [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(93,17): er 
ror CS0103: El nombre 'ResultadosListView' no existe en el contex 
to actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]  
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(94,17): er 
ror CS0103: El nombre 'LoadingPanel' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(95,17): er 
ror CS0103: El nombre 'ImportarPanel' no existe en el contexto ac 
tual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]       
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(97,21): er 
ror CS0103: El nombre 'VersionComboBox' no existe en el contexto  
actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]     
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(103,59): e 
rror CS0103: El nombre 'VersionComboBox' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(106,25): e 
rror CS0103: El nombre 'TipoBusquedaComboBox' no existe en el con 
texto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.cspro 
j]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(127,25): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(136,21): e 
rror CS0103: El nombre 'ResultadosListView' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(137,21): e 
rror CS0103: El nombre 'ResultadosListView' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(139,21): e 
rror CS0103: El nombre 'ImportarPanel' no existe en el contexto a 
ctual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]      
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(140,21): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(144,21): e 
rror CS0103: El nombre 'ResultadosListView' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(145,21): e
rror CS0103: El nombre 'ImportarPanel' no existe en el contexto a 
ctual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]      
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(146,21): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(152,17): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(156,17): e 
rror CS0103: El nombre 'BuscarBtn' no existe en el contexto actua 
l [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(157,17): e 
rror CS0103: El nombre 'LoadingPanel' no existe en el contexto ac 
tual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]       
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(171,21): e 
rror CS0103: El nombre 'VersionLocalComboBox' no existe en el con 
texto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.cspro 
j]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(177,51): e 
rror CS0103: El nombre 'VersionLocalComboBox' no existe en el con 
texto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.cspro 
j]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(178,17): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(179,17): e 
rror CS0103: El nombre 'ImportarBtn' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(256,17): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(261,17): e 
rror CS0103: El nombre 'StatusTextBlock' no existe en el contexto 
 actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(265,17): e 
rror CS0103: El nombre 'ImportarBtn' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(161,28): w 
arning CS1998: El método asincrónico carece de operadores "await" 
 y se ejecutará de forma sincrónica. Puede usar el operador 'awai 
t' para esperar llamadas API que no sean de bloqueo o 'await Task 
.Run(...)' para hacer tareas enlazadas a la CPU en un subproceso  
en segundo plano. [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp. 
csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(271,17): e 
rror CS0103: El nombre 'ResultadosListView' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(273,50): e 
rror CS0103: El nombre 'ResultadosListView' no existe en el conte 
xto actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj] 
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(274,17): e 
rror CS0103: El nombre 'DetalleTextBlock' no existe en el context 
o actual [C:\Biblia\BibliaApp\BibliaApp_ljh3ca4z_wpftmp.csproj]   

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para los Errores de BusquedaOnlineWindow.xaml

El problema principal es que falta el archivo XAML para `BusquedaOnlineWindow` o no está configurado correctamente. Hay que crear o corregir el archivo XAML para que corresponda con los controles referenciados en el código.

## 1. Crear el archivo BusquedaOnlineWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="600" Width="900"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Búsqueda Online de Contenido Bíblico (BibleGateway)" 
                  FontSize="20" FontWeight="Bold" Margin="0,0,0,15"/>
        
        <!-- Controles de búsqueda -->
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <TextBlock Grid.Row="0" Grid.Column="0" Text="Tipo de búsqueda:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="TipoBusquedaComboBox" 
                     Margin="0,0,10,0"/>
            
            <TextBlock Grid.Row="0" Grid.Column="2" Text="Versión:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="VersionComboBox" 
                     Width="200"/>
            
            <TextBlock Grid.Row="1" Grid.Column="0" Text="Consulta:" 
                     VerticalAlignment="Center" Margin="0,10,10,0"/>
            <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ConsultaTextBox" 
                   Padding="5" Margin="0,10,10,0" KeyDown="ConsultaTextBox_KeyDown"/>
            <Button Grid.Row="1" Grid.Column="3" x:Name="BuscarBtn" Content="Buscar" 
                  Width="150" Margin="0,10,0,0" Click="BuscarBtn_Click"/>
        </Grid>
        
        <!-- Resultados y detalles -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de resultados -->
            <DockPanel Grid.Column="0" Margin="0,0,10,0">
                <TextBlock DockPanel.Dock="Top" Text="Resultados:" FontWeight="Bold" Margin="0,0,0,5"/>
                <ListView x:Name="ResultadosListView" SelectionChanged="ResultadosListView_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Libro" DisplayMemberBinding="{Binding Libro}" Width="100"/>
                            <GridViewColumn Header="Cap" DisplayMemberBinding="{Binding Capitulo}" Width="40"/>
                            <GridViewColumn Header="Ver" DisplayMemberBinding="{Binding Numero}" Width="40"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="250"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de carga -->
            <Grid x:Name="LoadingPanel" Grid.Column="0" Visibility="Collapsed">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Cargando contenido..." HorizontalAlignment="Center" Margin="0,0,0,10"/>
                    <ProgressBar IsIndeterminate="True" Height="20" Width="200"/>
                </StackPanel>
            </Grid>
            
            <!-- Detalle del versículo -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <TextBlock DockPanel.Dock="Top" Text="Detalle:" FontWeight="Bold" Margin="0,0,0,5"/>
                <TextBlock x:Name="DetalleTextBlock" TextWrapping="Wrap" 
                         Background="{DynamicResource FondoVersiculo}" Padding="10"/>
            </DockPanel>
        </Grid>
        
        <!-- Panel de importación -->
        <Grid Grid.Row="3" x:Name="ImportarPanel" Visibility="Collapsed" Margin="0,15,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Grid.Column="0" Text="Importar a versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Column="1" x:Name="VersionLocalComboBox" Margin="0,0,10,0"/>
            <Button Grid.Column="2" x:Name="ImportarBtn" Content="Importar Contenido" 
                  Width="150" Click="ImportarBtn_Click"/>
        </Grid>
        
        <!-- Barra de estado -->
        <Border Grid.Row="4" Background="{DynamicResource FondoControl}" Margin="0,15,0,0" Padding="10">
            <TextBlock x:Name="StatusTextBlock" Text="Cargando versiones disponibles..." TextWrapping="Wrap"/>
        </Border>
    </Grid>
</Window>
```

## 2. Corregir las advertencias en MainWindow.xaml.cs

También hay advertencias sobre campos no inicializados en MainWindow. Vamos a corregirlos:

```csharp
// Modifica las declaraciones de campos para aceptar valores nulos
private MarcadoresService? _marcadoresService;
private PreferenciasService? _preferenciasService;
private Preferencias? _preferencias;
```

## 3. Corregir la advertencia en BusquedaOnlineWindow.xaml.cs

```csharp
// Inicializar _versionesDisponibles para evitar la advertencia
private List<VersionBiblica> _versionesDisponibles = new List<VersionBiblica>();

// Y asegurar que ImportarBtn_Click sea realmente asíncrono agregando un await
private async void ImportarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        // Añadir un await en alguna operación, por ejemplo:
        await Task.Delay(1); // O alguna operación real asíncrona
        
        // Resto del código...
    }
    catch (Exception ex)
    {
        // Manejo de errores...
    }
}
```

## 4. Asegurarse de que BusquedaOnlineWindow.xaml está incluido en el proyecto

Comprueba que el archivo XAML esté configurado como:
- Build Action: Page
- Copy to Output Directory: Do not copy

Para verificar esto, haz clic derecho en el archivo en el Explorador de Soluciones de Visual Studio y selecciona Propiedades.

Después de implementar estos cambios, deberías poder compilar y ejecutar el proyecto sin errores. La ventana de búsqueda online funcionará correctamente con BibleGateway.

Código similar encontrado con 4 tipos de licencias

RafaelG1986: Esta bien, pero el contenido de busqueda, solamente tiene versiones en ingles, por el momento, quiero que sea Reina valera 1960

GitHub Copilot: # Configuración de la Versión Reina Valera 1960 en BibleGateway

Entiendo que quieres asegurarte de que la búsqueda incluya específicamente la versión Reina Valera 1960. Vamos a modificar el servicio de BibleGateway para garantizar que esta versión esté disponible:

```csharp
// Modifica el método ObtenerVersionesDisponiblesAsync para incluir explícitamente versiones en español

public async Task<List<VersionBiblica>> ObtenerVersionesDisponiblesAsync()
{
    var versiones = new List<VersionBiblica>();
    
    try {
        // Añadir directamente las versiones en español más comunes
        versiones.Add(new VersionBiblica { Id = "RVR1960", Nombre = "Reina-Valera 1960", Descripcion = "Español - La versión más usada" });
        versiones.Add(new VersionBiblica { Id = "NVI", Nombre = "Nueva Versión Internacional", Descripcion = "Español" });
        versiones.Add(new VersionBiblica { Id = "RVA", Nombre = "Reina-Valera Actualizada", Descripcion = "Español" });
        versiones.Add(new VersionBiblica { Id = "LBLA", Nombre = "La Biblia de las Américas", Descripcion = "Español" });
        versiones.Add(new VersionBiblica { Id = "DHH", Nombre = "Dios Habla Hoy", Descripcion = "Español" });
        versiones.Add(new VersionBiblica { Id = "TLA", Nombre = "Traducción en Lenguaje Actual", Descripcion = "Español" });
        versiones.Add(new VersionBiblica { Id = "RVC", Nombre = "Reina-Valera Contemporánea", Descripcion = "Español" });
        
        // Intentar buscar versiones en el sitio sólo si necesitamos más
        string url = $"{BaseUrl}/versions/";
        
        var html = await _httpClient.GetStringAsync(url);
        var doc = new HtmlDocument();
        doc.LoadHtml(html);
        
        // Buscar la sección de versiones en español
        var seccionEspanol = doc.DocumentNode.SelectNodes("//h3[contains(text(), 'Spanish')]")
            ?.FirstOrDefault()?.ParentNode;
        
        if (seccionEspanol != null)
        {
            var listaVersiones = seccionEspanol.SelectNodes(".//tr");
            if (listaVersiones != null)
            {
                foreach (var versionNode in listaVersiones)
                {
                    var enlaceVersion = versionNode.SelectSingleNode(".//a");
                    var descripcion = versionNode.SelectSingleNode(".//td[2]");
                    
                    if (enlaceVersion != null && descripcion != null)
                    {
                        string nombre = enlaceVersion.InnerText.Trim();
                        string abreviatura = Regex.Match(enlaceVersion.GetAttributeValue("href", ""), @"/versions/([^/]+)/").Groups[1].Value;
                        string desc = descripcion.InnerText.Trim();
                        
                        // Verificar que no tengamos ya esta versión
                        if (!versiones.Any(v => v.Id.Equals(abreviatura, StringComparison.OrdinalIgnoreCase)))
                        {
                            versiones.Add(new VersionBiblica
                            {
                                Id = abreviatura,
                                Nombre = nombre,
                                Descripcion = desc
                            });
                        }
                    }
                }
            }
        }
        
        // Añadir algunas versiones en inglés comunes (después de las versiones en español)
        if (!versiones.Any(v => v.Id.Equals("NIV", StringComparison.OrdinalIgnoreCase)))
            versiones.Add(new VersionBiblica { Id = "NIV", Nombre = "New International Version", Descripcion = "English" });
        
        if (!versiones.Any(v => v.Id.Equals("KJV", StringComparison.OrdinalIgnoreCase)))
            versiones.Add(new VersionBiblica { Id = "KJV", Nombre = "King James Version", Descripcion = "English" });
        
        if (!versiones.Any(v => v.Id.Equals("ESV", StringComparison.OrdinalIgnoreCase)))
            versiones.Add(new VersionBiblica { Id = "ESV", Nombre = "English Standard Version", Descripcion = "English" });
    }
    catch (Exception ex)
    {
        // Si falló la carga desde el sitio web, asegurarnos de que al menos tenemos RVR1960
        if (!versiones.Any(v => v.Id.Equals("RVR1960", StringComparison.OrdinalIgnoreCase)))
        {
            versiones.Add(new VersionBiblica { Id = "RVR1960", Nombre = "Reina-Valera 1960", Descripcion = "Español" });
        }
    }
    
    return versiones;
}
```

## Asegurar que RVR1960 sea la versión predeterminada

Vamos a modificar también el método `CargarVersionesBibleGateway` en BusquedaOnlineWindow.xaml.cs para asegurarnos de que Reina Valera 1960 sea siempre la versión predeterminada:

```csharp
private async void CargarVersionesBibleGateway()
{
    try
    {
        StatusTextBlock.Text = "Cargando versiones disponibles...";
        LoadingPanel.Visibility = Visibility.Visible;
        
        _versionesDisponibles = await _bibliaApiService.ObtenerVersionesDisponiblesAsync();
        
        // Ordenar las versiones: primero español, luego inglés
        _versionesDisponibles = _versionesDisponibles
            .OrderBy(v => v.Descripcion.Contains("Español") ? 0 : 1)
            .ThenBy(v => v.Nombre)
            .ToList();
        
        VersionComboBox.ItemsSource = _versionesDisponibles;
        VersionComboBox.DisplayMemberPath = "Nombre";
        
        // Seleccionar RVR1960 por defecto 
        var rvr1960 = _versionesDisponibles.FirstOrDefault(v => 
            v.Id.Equals("RVR1960", StringComparison.OrdinalIgnoreCase));
            
        if (rvr1960 != null)
            VersionComboBox.SelectedItem = rvr1960;
        else if (_versionesDisponibles.Count > 0)
            VersionComboBox.SelectedIndex = 0;
        
        StatusTextBlock.Text = "Versiones cargadas. Listo para buscar.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al cargar versiones disponibles: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al cargar versiones. Intente de nuevo.";
        
        // Si hay error, agregar manualmente RVR1960
        var rvr1960 = new VersionBiblica { Id = "RVR1960", Nombre = "Reina-Valera 1960", Descripcion = "Español" };
        _versionesDisponibles = new List<VersionBiblica> { rvr1960 };
        VersionComboBox.ItemsSource = _versionesDisponibles;
        VersionComboBox.SelectedIndex = 0;
    }
    finally
    {
        LoadingPanel.Visibility = Visibility.Collapsed;
    }
}
```

Con estos cambios, tu aplicación:

1. Incluirá siempre la versión Reina Valera 1960, incluso si falla la carga desde BibleGateway
2. Mostrará las versiones en español en primer lugar
3. Seleccionará automáticamente RVR1960 como la versión predeterminada
4. Mostrará un mensaje de error claro si hay problemas al cargar las versiones

Estos cambios son robustos y seguirán funcionando incluso si la estructura de la página de BibleGateway cambia en el futuro.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(59,13): warning CS8602: De
sreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibli 
aApp\BibliaApp_geqky4yv_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(70,13): warning CS8602: De
sreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibli 
aApp\BibliaApp_geqky4yv_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(282,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_geqky4yv_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(303,58): warning CS8604: P 
osible argumento de referencia nulo para el parámetro "marcadores 
Service" en "MarcadoresWindow.MarcadoresWindow(MarcadoresService  
marcadoresService, BibliaService bibliaService)". [C:\Biblia\Bibl 
iaApp\BibliaApp_geqky4yv_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibleGatewayService.cs(90,30): warni 
ng CS0168: La variable 'ex' se ha declarado pero nunca se usa [C: 
\Biblia\BibliaApp\BibliaApp_geqky4yv_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(59,13): warning CS8602: De
sreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibli 
aApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(70,13): warning CS8602: De
sreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibli 
aApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(282,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(303,58): warning CS8604: P 
osible argumento de referencia nulo para el parámetro "marcadores 
Service" en "MarcadoresWindow.MarcadoresWindow(MarcadoresService  
marcadoresService, BibliaService bibliaService)". [C:\Biblia\Bibl 
iaApp\BibliaApp.csproj]
C:\Biblia\BibliaApp\Services\BibleGatewayService.cs(90,30): warni 
ng CS0168: La variable 'ex' se ha declarado pero nunca se usa [C: 
\Biblia\BibliaApp\BibliaApp.csproj]

GitHub Copilot: # Corrección de Advertencias en la Aplicación Bíblica

Veo que la aplicación está funcionando pero con algunas advertencias. Es recomendable corregirlas para mejorar la robustez del código y evitar posibles errores en tiempo de ejecución.

## 1. Corregir advertencias de desreferencia nula en MainWindow.xaml.cs

```csharp
// Línea 59 - Verificar _preferenciasService antes de usarlo
if (_preferenciasService != null)
{
    _preferencias = _preferenciasService.CargarPreferencias();
    _modoOscuro = _preferencias?.ModoOscuro ?? false;
}
else
{
    _preferencias = new Preferencias();
}

// Línea 70 - Verificar _marcadoresService antes de usarlo
Closing += MainWindow_Closing;

// Línea 282 - Verificar _preferenciasService antes de guardarlo
private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
{
    // Guardar preferencias al cerrar
    if (_preferenciasService != null && _preferencias != null)
    {
        _preferencias.ModoOscuro = _modoOscuro;
        _preferencias.UltimaVersionId = _versionActual?.Id;
        _preferencias.UltimoLibroNombre = _libroActual?.Nombre;
        _preferencias.UltimoCapituloNumero = _capituloActual?.Numero ?? 1;
        
        _preferenciasService.GuardarPreferencias(_preferencias);
    }
}

// Línea 303 - Verificar _marcadoresService antes de usarlo
private void AbrirMarcadores_Click(object sender, RoutedEventArgs e)
{
    if (_marcadoresService == null)
    {
        MessageBox.Show("El servicio de marcadores no está disponible.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        return;
    }
    
    var ventanaMarcadores = new MarcadoresWindow(_marcadoresService, _bibliaService);
    // Resto del código...
}
```

## 2. Corregir la advertencia en BibleGatewayService.cs

```csharp
try
{
    // Código existente...
}
catch (Exception ex)
{
    // Usar la variable ex o cambiarla a _
    Console.WriteLine($"Error al obtener versiones: {ex.Message}");
    // O si prefieres:
    // catch (Exception _)
    // {
    //    // Código que no usa la excepción
    // }
}
```

## 3. Asegurarse de inicializar los servicios correctamente en MainWindow.xaml.cs

```csharp
public MainWindow()
{
    InitializeComponent();

    try
    {
        _bibliaService = new BibliaService();
        _marcadoresService = new MarcadoresService(); // Inicializar siempre
        _preferenciasService = new PreferenciasService(); // Inicializar siempre
        
        // Cargar preferencias
        if (_preferenciasService != null)
        {
            _preferencias = _preferenciasService.CargarPreferencias();
            _modoOscuro = _preferencias?.ModoOscuro ?? false;
        }
        else
        {
            _preferencias = new Preferencias();
        }
        
        // Aplicar tema según preferencias
        AplicarTema();
        
        CargarVersiones();
        
        // Agregar handler para guardar al cerrar
        Closing += MainWindow_Closing;
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al inicializar la aplicación: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
```

## Recomendaciones adicionales

1. **Asegúrate de que el entorno esté correctamente configurado:**
   - Verificar que todos los archivos XAML estén correctamente cargados como recursos
   - Comprobar que los temas estén disponibles y accesibles

2. **Prueba de la funcionalidad de búsqueda online:**
   - Verifica que la búsqueda de Reina Valera 1960 funcione correctamente
   - Prueba la importación de contenido a la aplicación local

3. **Reforzamiento del manejo de errores:**
   - Considera agregar un mecanismo más robusto de registro de errores
   - Implementa reintentos para las llamadas a BibleGateway que puedan fallar temporalmente

Estas correcciones deberían resolver todas las advertencias y hacer que tu aplicación sea más robusta frente a situaciones inesperadas.

RafaelG1986: C:\Biblia\BibliaApp\MainWindow.xaml.cs(70,31): error CS1061: "Pre
ferencias" no contiene una definición para "UltimoLibroNombre" ni 
 un método de extensión accesible "UltimoLibroNombre" que acepte  
un primer argumento del tipo "Preferencias" (¿falta alguna direct
iva using o una referencia de ensamblado?) [C:\Biblia\BibliaApp\B 
ibliaApp_veuv4tc2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(71,31): error CS1061: "Pre 
ferencias" no contiene una definición para "UltimoCapituloNumero" 
 ni un método de extensión accesible "UltimoCapituloNumero" que a 
cepte un primer argumento del tipo "Preferencias" (¿falta alguna  
directiva using o una referencia de ensamblado?) [C:\Biblia\Bibli 
aApp\BibliaApp_veuv4tc2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(69,49): warning CS8601: Po 
sible asignación de referencia nula. [C:\Biblia\BibliaApp\BibliaA 
pp_veuv4tc2_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_veuv4tc2_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de Errores en la Clase Preferencias

Parece que estás intentando usar propiedades en la clase `Preferencias` que aún no están definidas. Vamos a corregir este problema:

## 1. Primero, vamos a modificar la clase Preferencias para añadir las propiedades faltantes:

```csharp
using System;

namespace BibliaApp.Models
{
    public class Preferencias
    {
        // Propiedades existentes
        public bool ModoOscuro { get; set; } = false;
        public string? UltimaVersionId { get; set; }
        
        // Propiedades faltantes que están causando los errores
        public string? UltimoLibroNombre { get; set; }
        public int UltimoCapituloNumero { get; set; } = 1;
    }
}
```

## 2. También podemos mejorar el método MainWindow_Closing para evitar el warning de referencia nula:

```csharp
private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
{
    // Guardar preferencias al cerrar
    if (_preferenciasService != null && _preferencias != null)
    {
        _preferencias.ModoOscuro = _modoOscuro;
        _preferencias.UltimaVersionId = _versionActual?.Id;
        _preferencias.UltimoLibroNombre = _libroActual?.Nombre;
        _preferencias.UltimoCapituloNumero = _capituloActual?.Numero ?? 1;
        
        _preferenciasService.GuardarPreferencias(_preferencias);
    }
}
```

## 3. Para corregir el warning en la línea 286, necesitamos verificar posibles nulos en ExportarVersiculo_Click:

```csharp
private void ExportarVersiculo_Click(object sender, RoutedEventArgs e)
{
    if (_versionActual != null && _libroActual != null && _capituloActual != null && _capituloActual.Versiculos != null)
    {
        // Mostrar diálogo para seleccionar el versículo
        var dialog = new SeleccionVersiculoDialog(_capituloActual.Versiculos);
        if (dialog.ShowDialog() == true && dialog.VersiculoSeleccionado != null)
        {
            var versiculo = dialog.VersiculoSeleccionado;
            string referencia = $"{_libroActual.Nombre} {_capituloActual.Numero}:{versiculo.Numero}";
            string texto = versiculo.Texto ?? "";
            string version = _versionActual.Nombre ?? "";
            
            var exportarWindow = new ExportarVersiculoWindow(referencia, texto, version);
            exportarWindow.Owner = this;
            exportarWindow.ShowDialog();
        }
    }
    else
    {
        MessageBox.Show("Por favor, seleccione un capítulo primero.", "Información requerida", 
            MessageBoxButton.OK, MessageBoxImage.Information);
    }
}
```

Estos cambios deberían resolver los errores y advertencias reportados. La aplicación ahora podrá guardar y restaurar correctamente las preferencias del usuario, incluyendo el último libro y capítulo visitados.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(22,17): error CS0104: 'Pre
ferencias' es una referencia ambigua entre 'BibliaApp.Models.Pref 
erencias' y 'BibliaApp.Services.Preferencias' [C:\Biblia\BibliaAp 
p\BibliaApp_ygsf5ajk_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección del Error de Ambigüedad en la Clase Preferencias

El problema es que tienes dos clases llamadas `Preferencias` en tu proyecto:
- Una en `BibliaApp.Models`
- Otra en `BibliaApp.Services`

Esto causa ambigüedad porque el compilador no sabe a cuál de las dos te refieres.

## Solución 1: Usar nombres completamente calificados

```csharp
// Cambia esta línea:
private Preferencias? _preferencias;

// Por esta:
private BibliaApp.Models.Preferencias? _preferencias;
```

## Solución 2: Renombrar la clase en el namespace Services

Esta es una mejor solución a largo plazo para evitar confusiones:

```csharp
// Cambia el nombre de la clase de Preferencias a PreferenciasConfig o similar
public class PreferenciasConfig
{
    // Propiedades y métodos existentes
}
```

Y luego actualiza las referencias según sea necesario.

## Solución 3: Crear un alias para una de las clases

```csharp
// Al inicio del archivo, añade:
using ModelPreferencias = BibliaApp.Models.Preferencias;

// Y luego cambia:
private Preferencias? _preferencias;

// Por:
private ModelPreferencias? _preferencias;
```

La solución más simple es la primera: usar el nombre completo de la clase. Esto resuelve la ambigüedad inmediatamente sin tener que modificar otros archivos.

¿Prefieres alguna solución en particular? La segunda opción (renombrar la clase en Services) sería la más limpia a largo plazo, pero requiere más cambios en todo el código.

RafaelG1986: la primera

GitHub Copilot: # Implementación de la Solución con Nombres de Tipos Completos

Vamos a modificar el código de tu MainWindow.xaml.cs para usar el nombre de tipo completo y resolver la ambigüedad:

```csharp
// Cambia esta línea (alrededor de la línea 22):
private Preferencias? _preferencias;

// Por esta que usa el nombre completo:
private BibliaApp.Models.Preferencias? _preferencias;
```

También necesitamos asegurarnos de que todas las instancias nuevas de Preferencias usen el nombre completo:

```csharp
// En el método MainWindow(), cuando se crea una nueva instancia:
else
{
    _preferencias = new BibliaApp.Models.Preferencias();
}
```

Esta solución es la más rápida y sencilla, ya que solo requiere modificar estas líneas en lugar de reorganizar clases o crear alias que podrían ser confusos para el mantenimiento futuro del código.

El uso de nombres de tipo completamente calificados ayuda al compilador a distinguir entre tipos con el mismo nombre en diferentes espacios de nombres y resuelve el problema de ambigüedad.

RafaelG1986: C:\Biblia\BibliaApp\MainWindow.xaml.cs(41,37): error CS0029: No s
e puede convertir implícitamente el tipo 'BibliaApp.Services.Pref 
erencias' en 'BibliaApp.Models.Preferencias' [C:\Biblia\BibliaApp 
\BibliaApp_3qjgqo5l_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(73,58): error CS1503: Argu
mento 1: no se puede convertir de 'BibliaApp.Models.Preferencias' 
 a 'BibliaApp.Services.Preferencias' [C:\Biblia\BibliaApp\BibliaA 
pp_3qjgqo5l_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_3qjgqo5l_wpftmp.csproj]

GitHub Copilot: # Solución al Problema de Conflicto entre Clases Preferencias

Tienes un problema de tipos incompatibles. Hay dos clases llamadas `Preferencias` en diferentes espacios de nombres y estás intentando usar una donde se espera la otra.

## El problema específico:

1. Declaraste `_preferencias` como `BibliaApp.Models.Preferencias`
2. Pero el método `CargarPreferencias()` devuelve `BibliaApp.Services.Preferencias`
3. Y el método `GuardarPreferencias()` espera recibir `BibliaApp.Services.Preferencias`

## Solución paso a paso:

### 1. Cambia el tipo de la variable _preferencias para usar la clase de Servicios:

```csharp
// Cambia esta línea:
private BibliaApp.Models.Preferencias? _preferencias;

// Por esta:
private BibliaApp.Services.Preferencias? _preferencias;
```

### 2. Modifica la creación de una nueva instancia:

```csharp
// En el método MainWindow(), cambia:
else
{
    _preferencias = new BibliaApp.Models.Preferencias();
}

// Por:
else
{
    _preferencias = new BibliaApp.Services.Preferencias();
}
```

### 3. Asegúrate de que el método MainWindow_Closing no tenga problemas:

```csharp
private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
{
    // Guardar preferencias al cerrar
    if (_preferenciasService != null && _preferencias != null)
    {
        _preferencias.ModoOscuro = _modoOscuro;
        _preferencias.UltimaVersionId = _versionActual?.Id;
        _preferencias.UltimoLibroNombre = _libroActual?.Nombre;
        _preferencias.UltimoCapituloNumero = _capituloActual?.Numero ?? 1;
        
        _preferenciasService.GuardarPreferencias(_preferencias);
    }
}
```

### 4. Verifica que la clase PreferenciasService está diseñada correctamente

La clase Preferencias en BibliaApp.Services debe tener las mismas propiedades que mencionas en el código:
- ModoOscuro
- UltimaVersionId
- UltimoLibroNombre
- UltimoCapituloNumero

Si falta alguna de estas propiedades, necesitarás añadirla al modelo de Preferencias en el namespace Services.

Este enfoque es el más directo para resolver el problema actual. Como mejora futura, podrías considerar mantener solo una clase Preferencias para evitar estos conflictos de nombres.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(70,31): error CS1061: "Pre
ferencias" no contiene una definición para "UltimoLibroNombre" ni 
 un método de extensión accesible "UltimoLibroNombre" que acepte  
un primer argumento del tipo "Preferencias" (¿falta alguna direct
iva using o una referencia de ensamblado?) [C:\Biblia\BibliaApp\B 
ibliaApp_ke34tckt_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(71,31): error CS1061: "Pre 
ferencias" no contiene una definición para "UltimoCapituloNumero" 
 ni un método de extensión accesible "UltimoCapituloNumero" que a 
cepte un primer argumento del tipo "Preferencias" (¿falta alguna  
directiva using o una referencia de ensamblado?) [C:\Biblia\Bibli 
aApp\BibliaApp_ke34tckt_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(69,49): warning CS8601: Po 
sible asignación de referencia nula. [C:\Biblia\BibliaApp\BibliaA 
pp_ke34tckt_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_ke34tckt_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Adición de Propiedades Faltantes a la Clase Preferencias

El problema principal es que la clase `Preferencias` en el namespace `BibliaApp.Services` no contiene las propiedades `UltimoLibroNombre` y `UltimoCapituloNumero` que estás intentando usar en el método `MainWindow_Closing`.

## Solución: Agregar propiedades a la clase Preferencias

Necesitamos modificar la clase Preferencias para añadir las propiedades que faltan:

```csharp
using System;

namespace BibliaApp.Services
{
    public class Preferencias
    {
        // Propiedades existentes
        public bool ModoOscuro { get; set; } = false;
        public string? UltimaVersionId { get; set; }
        
        // Nuevas propiedades
        public string? UltimoLibroNombre { get; set; }
        public int UltimoCapituloNumero { get; set; } = 1;
    }
}
```

Esta actualización añade exactamente las propiedades que necesitas en la clase `Preferencias` del namespace `Services`.

## Para resolver el warning CS8601:

También puedes mejorar la línea 69 para evitar el warning de asignación de referencia nula:

```csharp
// En el método MainWindow_Closing
_preferencias.UltimaVersionId = _versionActual?.Id ?? string.Empty;
```

## Para resolver el warning CS8602:

En la línea 286, necesitas una verificación de nulo adicional:

```csharp
// En ExportarVersiculo_Click
if (_versionActual != null && _libroActual != null && _capituloActual != null && 
    _capituloActual.Versiculos != null && _capituloActual.Versiculos.Count > 0)
{
    // El resto del código...
}
```

Estas correcciones deberían resolver todos los errores y advertencias, permitiéndote ejecutar la aplicación correctamente.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Services\PreferenciasService.cs(7,18): error 
CS0101: El espacio de nombres 'BibliaApp.Services' ya contiene un 
a definición para 'Preferencias' [C:\Biblia\BibliaApp\BibliaApp_z 
l0vxtqs_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución al Error de Definición Duplicada de Preferencias

El error indica que hay dos definiciones de la clase `Preferencias` en el mismo namespace `BibliaApp.Services`. Vamos a resolver este problema renombrando una de las definiciones.

## 1. Modificar el archivo PreferenciasService.cs

Necesitamos revisar el archivo `PreferenciasService.cs` donde parece que se define la clase `Preferencias` por segunda vez:

```csharp
using System;
using System.IO;
using System.Text.Json;

namespace BibliaApp.Services
{
    // Cambia esta clase para evitar la duplicación
    public class PreferenciasConfig
    {
        // Propiedades
        public bool ModoOscuro { get; set; } = false;
        public string? UltimaVersionId { get; set; }
        public string? UltimoLibroNombre { get; set; }
        public int UltimoCapituloNumero { get; set; } = 1;
    }

    public class PreferenciasService
    {
        private readonly string _rutaArchivo;
        
        public PreferenciasService()
        {
            string directorioAppData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string directorioBiblia = Path.Combine(directorioAppData, "BibliaApp");
            
            // Crear directorio si no existe
            if (!Directory.Exists(directorioBiblia))
                Directory.CreateDirectory(directorioBiblia);
                
            _rutaArchivo = Path.Combine(directorioBiblia, "preferencias.json");
        }
        
        public Preferencias CargarPreferencias()
        {
            if (File.Exists(_rutaArchivo))
            {
                try
                {
                    string json = File.ReadAllText(_rutaArchivo);
                    var preferencias = JsonSerializer.Deserialize<Preferencias>(json);
                    return preferencias ?? new Preferencias();
                }
                catch
                {
                    return new Preferencias();
                }
            }
            
            return new Preferencias();
        }
        
        public void GuardarPreferencias(Preferencias preferencias)
        {
            try
            {
                string json = JsonSerializer.Serialize(preferencias);
                File.WriteAllText(_rutaArchivo, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar preferencias: {ex.Message}");
            }
        }
    }
}
```

## 2. Crear/Modificar la clase Preferencias en un archivo separado

Ahora, asegúrate de que la clase `Preferencias` esté definida en un archivo separado:

```csharp
namespace BibliaApp.Services
{
    public class Preferencias
    {
        // Propiedades
        public bool ModoOscuro { get; set; } = false;
        public string? UltimaVersionId { get; set; }
        public string? UltimoLibroNombre { get; set; }
        public int UltimoCapituloNumero { get; set; } = 1;
    }
}
```

## 3. Actualizar referencias en MainWindow.xaml.cs

Si cambiaste el nombre de la clase a `PreferenciasConfig`, necesitarás actualizar las referencias en MainWindow.xaml.cs:

```csharp
// No es necesario hacer cambios si mantenemos el nombre "Preferencias"
// Si cambiamos a PreferenciasConfig, entonces tendremos que actualizar todas las referencias
```

La solución más simple es eliminar la definición duplicada de la clase `Preferencias` en el archivo `PreferenciasService.cs` y asegurarte de que exista en su propio archivo `Preferencias.cs`. Si hay múltiples definiciones en diferentes archivos, necesitamos unificarlas en una sola.

Este problema es común cuando se crea una clase en un archivo y luego se copia parte del código a otro archivo sin darse cuenta de que se está duplicando la definición de la clase.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Services\PreferenciasService.cs(7,18): error 
CS0101: El espacio de nombres 'BibliaApp.Services' ya contiene un 
a definición para 'Preferencias' [C:\Biblia\BibliaApp\BibliaApp_t 
q11e1m2_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Resolución del Error de Definición Duplicada de Preferencias

El error indica que tienes dos definiciones de la clase `Preferencias` en el mismo espacio de nombres `BibliaApp.Services`. Esto ocurre típicamente cuando:

1. Tienes un archivo `Preferencias.cs` con una definición de la clase
2. Y también tienes otra definición de la misma clase dentro del archivo `PreferenciasService.cs`

## Solución: Eliminar la definición duplicada en PreferenciasService.cs

```csharp
using System;
using System.IO;
using System.Text.Json;

namespace BibliaApp.Services
{
    // Eliminar esta definición de clase que causa el conflicto
    // public class Preferencias
    // {
    //    // Propiedades...
    // }

    public class PreferenciasService
    {
        private readonly string _rutaArchivo;
        
        public PreferenciasService()
        {
            string directorioAppData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string directorioBiblia = Path.Combine(directorioAppData, "BibliaApp");
            
            // Crear directorio si no existe
            if (!Directory.Exists(directorioBiblia))
                Directory.CreateDirectory(directorioBiblia);
                
            _rutaArchivo = Path.Combine(directorioBiblia, "preferencias.json");
        }
        
        public Preferencias CargarPreferencias()
        {
            if (File.Exists(_rutaArchivo))
            {
                try
                {
                    string json = File.ReadAllText(_rutaArchivo);
                    var preferencias = JsonSerializer.Deserialize<Preferencias>(json);
                    return preferencias ?? new Preferencias();
                }
                catch
                {
                    return new Preferencias();
                }
            }
            
            return new Preferencias();
        }
        
        public void GuardarPreferencias(Preferencias preferencias)
        {
            try
            {
                string json = JsonSerializer.Serialize(preferencias);
                File.WriteAllText(_rutaArchivo, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar preferencias: {ex.Message}");
            }
        }
    }
}
```

## Asegúrate de que la clase Preferencias exista correctamente

Verifica que la clase `Preferencias` esté definida en su propio archivo:

```csharp
namespace BibliaApp.Services
{
    public class Preferencias
    {
        // Propiedades
        public bool ModoOscuro { get; set; } = false;
        public string? UltimaVersionId { get; set; }
        public string? UltimoLibroNombre { get; set; }
        public int UltimoCapituloNumero { get; set; } = 1;
    }
}
```

Este error es común cuando se reorganiza código o se intenta dividir una clase grande en archivos separados. El problema ocurre cuando se olvida eliminar la definición original después de moverla a otro archivo.

Una vez eliminada la definición duplicada, tu código debería compilar correctamente.

RafaelG1986: No carga el contenido de busqueda por Biblegateway

GitHub Copilot: # Solución para problemas de carga de BibleGateway

Si no se está cargando el contenido de BibleGateway, esto puede deberse a varios factores. Vamos a revisar las causas más comunes y sus soluciones:

## 1. Verificar si hay errores en la consola o excepciones

Primero, comprueba si hay mensajes de error específicos en la consola de Visual Studio o en los mensajes de la aplicación.

## 2. Problemas comunes y soluciones

### Problema con el scraping del HTML

BibleGateway podría haber cambiado su estructura HTML. Actualiza el servicio BibleGatewayService:

```csharp
// Añade manejo de errores y registro más detallado
private async Task<List<VersiculoOnline>> ExtraerVersiculosDeUrlAsync(string url)
{
    var resultados = new List<VersiculoOnline>();
    
    try {
        // Agregar registro de depuración
        Console.WriteLine($"Solicitando URL: {url}");
        
        var html = await _httpClient.GetStringAsync(url);
        
        // Opcional: guardar HTML para depuración
        // File.WriteAllText("debug_response.html", html);
        
        var doc = new HtmlDocument();
        doc.LoadHtml(html);
        
        // Encontrar la referencia completa (libro y capítulo)
        var headerRef = doc.DocumentNode.SelectSingleNode("//div[contains(@class, 'passage-content')]//h1");
        
        if (headerRef == null) {
            // Intenta con selectores alternativos si el principal falló
            headerRef = doc.DocumentNode.SelectSingleNode("//div[contains(@class, 'heading')]//h1") ??
                       doc.DocumentNode.SelectSingleNode("//h1[contains(@class, 'passage-display')]");
            
            Console.WriteLine("Usando selector alternativo para la cabecera");
        }
        
        string referenciaCompleta = headerRef != null ? headerRef.InnerText.Trim() : "";
        Console.WriteLine($"Referencia encontrada: {referenciaCompleta}");
        
        // Mejor manejo cuando no se encuentra una referencia
        if (string.IsNullOrEmpty(referenciaCompleta)) {
            Console.WriteLine("No se pudo encontrar la referencia en la página");
            return resultados;
        }
        
        // Extraer el libro y capítulo de la referencia completa
        var partesHeader = ParsearReferenciaHeader(referenciaCompleta);
        string libro = partesHeader.Item1;
        int capitulo = partesHeader.Item2;
        
        // Encontrar todos los versículos con selectores más flexibles
        var versiculosNodos = doc.DocumentNode.SelectNodes("//div[contains(@class, 'passage-content')]//p//span[contains(@class, 'verse-')]");
        
        if (versiculosNodos == null || versiculosNodos.Count == 0) {
            // Intentar con otros selectores
            versiculosNodos = doc.DocumentNode.SelectNodes("//span[contains(@class, 'verse-')]") ??
                             doc.DocumentNode.SelectNodes("//div[contains(@class, 'version')]//span[contains(@class, 'verse')]");
            
            Console.WriteLine("Usando selector alternativo para versículos");
        }
        
        if (versiculosNodos != null)
        {
            Console.WriteLine($"Versículos encontrados: {versiculosNodos.Count}");
            
            foreach (var nodo in versiculosNodos)
            {
                // Obtener el número de versículo
                var match = Regex.Match(nodo.GetAttributeValue("class", ""), @"verse-(\d+)");
                if (match.Success && int.TryParse(match.Groups[1].Value, out int numeroVersiculo))
                {
                    // Obtener el texto del versículo
                    string texto = CleanHtmlText(nodo.InnerHtml);
                    
                    resultados.Add(new VersiculoOnline
                    {
                        Libro = libro,
                        Capitulo = capitulo,
                        Numero = numeroVersiculo,
                        Texto = texto,
                        ReferenciaCompleta = $"{libro} {capitulo}:{numeroVersiculo}"
                    });
                }
            }
        }
        else {
            Console.WriteLine("No se encontraron versículos en la página");
        }
    }
    catch (Exception ex) {
        Console.WriteLine($"Error al extraer versículos: {ex.Message}");
        // Para depuración, muestra la pila de llamadas
        Console.WriteLine(ex.StackTrace);
    }
    
    return resultados;
}
```

### Problema con el User-Agent

BibleGateway podría estar bloqueando solicitudes sin un User-Agent adecuado:

```csharp
public BibleGatewayService()
{
    _httpClient = new HttpClient();
    
    // Añadir un User-Agent más realista
    _httpClient.DefaultRequestHeaders.Add("User-Agent", 
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
    
    // Añadir más headers para simular un navegador real
    _httpClient.DefaultRequestHeaders.Add("Accept", "text/html,application/xhtml+xml,application/xml");
    _httpClient.DefaultRequestHeaders.Add("Accept-Language", "es-ES,es;q=0.9,en;q=0.8");
}
```

### Problema con el límite de tiempo de respuesta

BibleGateway podría tardar en responder:

```csharp
public BibleGatewayService()
{
    _httpClient = new HttpClient();
    _httpClient.Timeout = TimeSpan.FromSeconds(30); // Aumentar el timeout
    
    // Resto del código...
}
```

### Problema de bloqueo por muchas solicitudes

Añade retrasos entre solicitudes para no ser bloqueado:

```csharp
// En métodos como ObtenerLibroAsync
public async Task<Dictionary<int, List<VersiculoOnline>>> ObtenerLibroAsync(string libro, string versionId)
{
    var resultado = new Dictionary<int, List<VersiculoOnline>>();
    
    try
    {
        // Primero obtenemos el capítulo 1
        var capitulo1 = await ObtenerCapituloAsync(libro, 1, versionId);
        
        if (capitulo1.Count > 0)
        {
            resultado[1] = capitulo1;
            
            // ... código existente ...
            
            // Añadir retraso entre solicitudes
            for (int i = 2; i <= maxCap; i++)
            {
                await Task.Delay(1000); // Esperar 1 segundo entre solicitudes
                var capitulo = await ObtenerCapituloAsync(libro, i, versionId);
                if (capitulo.Count > 0)
                {
                    resultado[i] = capitulo;
                }
            }
        }
    }
    catch (Exception ex)
    {
        // ... manejo de errores ...
    }
    
    return resultado;
}
```

## 3. Implementación alternativa: usar la API de ESV Bible

Si BibleGateway sigue dando problemas, considera usar una API oficial como la API de ESV Bible:

```csharp
public class ESVBibleApiService
{
    private readonly HttpClient _httpClient;
    private const string ApiUrl = "https://api.esv.org/v3/passage/text/";
    private const string ApiKey = "TU_CLAVE_API"; // Necesitas registrarte en https://api.esv.org/
    
    public ESVBibleApiService()
    {
        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Add("Authorization", $"Token {ApiKey}");
    }
    
    public async Task<List<VersiculoOnline>> BuscarPorReferenciaAsync(string referencia)
    {
        try
        {
            var parametros = new Dictionary<string, string>
            {
                ["q"] = referencia,
                ["include-passage-references"] = "true",
                ["include-verse-numbers"] = "true",
                ["include-footnotes"] = "false"
            };
            
            string queryString = string.Join("&", parametros.Select(p => $"{p.Key}={Uri.EscapeDataString(p.Value)}"));
            string url = $"{ApiUrl}?{queryString}";
            
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            
            var content = await response.Content.ReadAsStringAsync();
            // Procesar respuesta JSON
            // ...
            
            return new List<VersiculoOnline>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return new List<VersiculoOnline>();
        }
    }
}
```

## 4. Depuración paso a paso para identificar el problema

Si ninguna de las soluciones anteriores funciona, agrega código de depuración en la ventana BusquedaOnlineWindow:

```csharp
private async void BuscarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        Console.WriteLine("Iniciando búsqueda...");
        
        // Código existente...
        
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia
                Console.WriteLine($"Buscando referencia: {consulta} en versión {versionId}");
                _resultados = await _bibliaApiService.BuscarPorReferenciaAsync(consulta, versionId);
                break;
            // Otros casos...
        }
        
        Console.WriteLine($"Búsqueda completada. Resultados: {_resultados.Count}");
        
        // Resto del código...
    }
    catch (Exception ex)
    {
        Console.WriteLine($"ERROR DETALLADO: {ex.Message}");
        Console.WriteLine($"Stack trace: {ex.StackTrace}");
        
        if (ex.InnerException != null) {
            Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
        }
        
        MessageBox.Show($"Error al realizar la búsqueda: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al realizar la búsqueda.";
    }
}
```

Con estas modificaciones deberías poder identificar y resolver el problema de carga desde BibleGateway. ¿Necesitas más ayuda con alguna parte específica del código?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: No carga aun la busqueda, pero tengo una idea, carguemos simplemente la busqueda de google

GitHub Copilot: # Implementación de Búsqueda Bíblica usando Google

Tienes razón - usar Google para buscar en BibleGateway es una excelente alternativa que evita los problemas de scraping. Vamos a implementarlo:

## 1. Crear método para búsqueda mediante Google

```csharp
using System;
using System.Diagnostics;
using System.Web;

namespace BibliaApp.Services
{
    public class BusquedaGoogleService
    {
        // Búsqueda específica en BibleGateway a través de Google
        public void BuscarEnBibleGateway(string consulta, string version = "RVR1960")
        {
            // Formato: "Juan 3:16" site:biblegateway.com RVR1960
            string consultaFormateada = $"{consulta} site:biblegateway.com {version}";
            AbrirBusquedaGoogle(consultaFormateada);
        }
        
        // Búsqueda general de temas bíblicos
        public void BuscarTemaBiblico(string tema)
        {
            // Formato: "amor biblia significado" site:biblegateway.com
            string consultaFormateada = $"{tema} biblia site:biblegateway.com";
            AbrirBusquedaGoogle(consultaFormateada);
        }
        
        // Método genérico para abrir búsqueda de Google
        private void AbrirBusquedaGoogle(string consulta)
        {
            string urlBusqueda = $"https://www.google.com/search?q={HttpUtility.UrlEncode(consulta)}";
            
            try
            {
                Process.Start(new ProcessStartInfo
                {
                    FileName = urlBusqueda,
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al abrir navegador: {ex.Message}", ex);
            }
        }
    }
}
```

## 2. Modificar la ventana BusquedaOnlineWindow para usar Google

```csharp
// Añade esto al inicio del archivo
using System.Diagnostics;

// Y luego añade un nuevo método para la búsqueda Google
private void BuscarConGoogleBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        string consulta = ConsultaTextBox.Text.Trim();
        if (string.IsNullOrEmpty(consulta))
        {
            MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
            return;
        }
        
        // Obtener la versión seleccionada (si hay)
        string versionId = "RVR1960"; // Por defecto
        if (VersionComboBox.SelectedItem is VersionBiblica versionSeleccionada)
        {
            versionId = versionSeleccionada.Id;
        }
        
        // Formatear la consulta según el tipo de búsqueda
        string consultaGoogle;
        
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia (ej. Juan 3:16)
                consultaGoogle = $"{consulta} {versionId} site:biblegateway.com";
                break;
            case 1: // Por texto (ej. amor)
                consultaGoogle = $"{consulta} biblia {versionId} site:biblegateway.com";
                break;
            case 2: // Capítulo completo
                consultaGoogle = $"{consulta} {versionId} site:biblegateway.com";
                break;
            case 3: // Libro completo
                consultaGoogle = $"{consulta} {versionId} site:biblegateway.com";
                break;
            default:
                consultaGoogle = $"{consulta} biblia site:biblegateway.com";
                break;
        }
        
        // Abrir búsqueda en el navegador
        string urlBusqueda = $"https://www.google.com/search?q={HttpUtility.UrlEncode(consultaGoogle)}";
        
        Process.Start(new ProcessStartInfo
        {
            FileName = urlBusqueda,
            UseShellExecute = true
        });
        
        StatusTextBlock.Text = "Búsqueda abierta en el navegador.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al abrir navegador: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al abrir la búsqueda.";
    }
}

// También puedes agregar una opción para abrir directamente en BibleGateway
private void AbrirEnBibleGatewayBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        string consulta = ConsultaTextBox.Text.Trim();
        if (string.IsNullOrEmpty(consulta))
        {
            MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
            return;
        }
        
        // Obtener la versión seleccionada
        string versionId = "RVR1960"; // Por defecto
        if (VersionComboBox.SelectedItem is VersionBiblica versionSeleccionada)
        {
            versionId = versionSeleccionada.Id;
        }
        
        // URL directa a BibleGateway
        string url;
        
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia
            case 2: // Capítulo completo
            case 3: // Libro completo
                url = $"https://www.biblegateway.com/passage/?search={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
            case 1: // Por texto
                url = $"https://www.biblegateway.com/search/?q={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
            default:
                url = $"https://www.biblegateway.com/search/?q={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
        }
        
        // Abrir en el navegador
        Process.Start(new ProcessStartInfo
        {
            FileName = url,
            UseShellExecute = true
        });
        
        StatusTextBlock.Text = "Página abierta en BibleGateway.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al abrir navegador: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al abrir BibleGateway.";
    }
}
```

## 3. Modificar la interfaz XAML

```xml
<!-- Añadir estos botones en la sección de búsqueda -->
<Grid Grid.Row="1" Margin="0,0,0,15">
    <!-- Contenido existente -->
    
    <!-- Añadir una fila adicional para los nuevos botones -->
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>
    
    <!-- Fila existente con TipoBusqueda y Version ... -->
    
    <!-- Fila existente con Consulta y botón Buscar ... -->
    
    <!-- Nueva fila con botones adicionales -->
    <StackPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" 
                Orientation="Horizontal" Margin="0,10,0,0">
        <Button x:Name="BuscarConGoogleBtn" Content="Buscar con Google" 
               Width="150" Margin="0,0,10,0" Click="BuscarConGoogleBtn_Click"/>
        <Button x:Name="AbrirEnBibleGatewayBtn" Content="Abrir en BibleGateway" 
               Width="180" Margin="0,0,10,0" Click="AbrirEnBibleGatewayBtn_Click"/>
        <TextBlock VerticalAlignment="Center" TextWrapping="Wrap" Foreground="Gray" 
                  Text="Estas opciones abrirán los resultados en su navegador web"/>
    </StackPanel>
</Grid>
```

## 4. Otra alternativa: Añadir un WebBrowser embebido

Si prefieres mantener al usuario dentro de tu aplicación, podrías incorporar un navegador web:

```xml
<!-- Reemplazar la GridView de resultados con WebBrowser -->
<Grid Grid.Row="2">
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    
    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
        <TextBlock Text="Navegador web integrado:" FontWeight="Bold"/>
        <Button x:Name="RefrescarBtn" Content="⟳" Width="30" Margin="10,0,0,0" 
               Click="RefrescarBtn_Click" ToolTip="Refrescar página"/>
        <Button x:Name="VolverBtn" Content="←" Width="30" Margin="5,0,0,0" 
               Click="VolverBtn_Click" ToolTip="Volver"/>
        <Button x:Name="AvanzarBtn" Content="→" Width="30" Margin="5,0,0,0" 
               Click="AvanzarBtn_Click" ToolTip="Avanzar"/>
        <TextBlock x:Name="UrlTextBlock" Text="" VerticalAlignment="Center" 
                  Margin="10,0,0,0" TextTrimming="CharacterEllipsis"/>
    </StackPanel>
    
    <WebBrowser x:Name="WebBrowserControl" Grid.Row="1"/>
</Grid>
```

Y en el code-behind:

```csharp
private void NavegarBibleGateway(string consulta, string versionId)
{
    try
    {
        string url;
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia
                url = $"https://www.biblegateway.com/passage/?search={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
            case 1: // Por texto
                url = $"https://www.biblegateway.com/search/?q={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
            default:
                url = $"https://www.biblegateway.com/passage/?search={HttpUtility.UrlEncode(consulta)}&version={versionId}";
                break;
        }
        
        WebBrowserControl.Navigate(new Uri(url));
        UrlTextBlock.Text = url;
        StatusTextBlock.Text = "Navegando a BibleGateway...";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void RefrescarBtn_Click(object sender, RoutedEventArgs e)
{
    WebBrowserControl.Refresh();
}

private void VolverBtn_Click(object sender, RoutedEventArgs e)
{
    if (WebBrowserControl.CanGoBack)
        WebBrowserControl.GoBack();
}

private void AvanzarBtn_Click(object sender, RoutedEventArgs e)
{
    if (WebBrowserControl.CanGoForward)
        WebBrowserControl.GoForward();
}
```

## Conclusión

Utilizar Google para buscar en BibleGateway es una solución elegante que evita los problemas del scraping web. El usuario obtiene resultados de calidad y la experiencia es transparente. También tienes opciones para:

1. Abrir los resultados en el navegador web predeterminado
2. Navegar directamente a BibleGateway
3. Incorporar un navegador web dentro de tu aplicación

Recomiendo implementar las opciones 1 y 2, que son más ligeras y no requieren incorporar navegadores embebidos en tu aplicación, lo que puede generar problemas de compatibilidad.

¿Cuál de estas opciones prefieres implementar?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS8602: D
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_nplhgawn_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(345,73): e
rror CS0103: El nombre 'HttpUtility' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_nplhgawn_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(388,79): e 
rror CS0103: El nombre 'HttpUtility' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_nplhgawn_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(391,73): e 
rror CS0103: El nombre 'HttpUtility' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_nplhgawn_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(394,73): e 
rror CS0103: El nombre 'HttpUtility' no existe en el contexto act 
ual [C:\Biblia\BibliaApp\BibliaApp_nplhgawn_wpftmp.csproj]        

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de Errores en BusquedaOnlineWindow.xaml.cs

El problema principal es que estás usando `HttpUtility` sin incluir el namespace correspondiente. Esta clase se encuentra en `System.Web` y necesitas hacer algunas modificaciones:

## 1. Agregar la referencia al namespace System.Web

Primero, necesitas agregar la referencia al proyecto:

```bash
dotnet add package System.Web.HttpUtility
```

## 2. Agregar la directiva using en BusquedaOnlineWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Diagnostics;
using System.Web; // Agregar esta línea
using BibliaApp.Models;
using BibliaApp.Services;
```

## 3. Corregir el warning en MainWindow.xaml.cs

El warning en la línea 286 de MainWindow.xaml.cs está relacionado con una posible desreferencia de un objeto nulo. Para corregirlo, añade una verificación adicional:

```csharp
// En el método ExportarVersiculo_Click (línea 286 aproximadamente)
if (dialog.ShowDialog() == true && dialog.VersiculoSeleccionado != null)
{
    var versiculo = dialog.VersiculoSeleccionado;
    string referencia = $"{_libroActual?.Nombre ?? ""} {_capituloActual?.Numero.ToString() ?? ""}"
                      + $":{versiculo.Numero}";
    string texto = versiculo.Texto ?? "";
    string version = _versionActual?.Nombre ?? "";
    
    var exportarWindow = new ExportarVersiculoWindow(referencia, texto, version);
    exportarWindow.Owner = this;
    exportarWindow.ShowDialog();
}
```

## Alternativa a HttpUtility

Si prefieres no agregar la dependencia de System.Web, puedes usar una alternativa nativa para codificar URLs:

```csharp
// Reemplazar:
string urlBusqueda = $"https://www.google.com/search?q={HttpUtility.UrlEncode(consultaGoogle)}";

// Por:
string urlBusqueda = $"https://www.google.com/search?q={Uri.EscapeDataString(consultaGoogle)}";

// Y de manera similar reemplazar todas las ocurrencias de HttpUtility.UrlEncode por Uri.EscapeDataString
```

Con estos cambios, el código debería compilar correctamente. La decisión entre usar `HttpUtility.UrlEncode` o `Uri.EscapeDataString` es tuya, pero `Uri.EscapeDataString` es más moderno y no requiere una dependencia adicional.

RafaelG1986: 4. Otra alternativa: Añadir un WebBrowser embebido
Si prefieres mantener al usuario dentro de tu aplicación, podrías incorporar un navegador web---- quiero esta

GitHub Copilot: # Implementación de WebBrowser Embebido en BusquedaOnlineWindow

Vamos a integrar un navegador web directamente en tu aplicación para permitir a los usuarios navegar en BibleGateway sin salir de tu app.

## 1. Modificar el archivo XAML para añadir el WebBrowser

```xml
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título -->
        <TextBlock Grid.Row="0" Text="Búsqueda Online de Contenido Bíblico (BibleGateway)" 
                  FontSize="20" FontWeight="Bold" Margin="0,0,0,15"/>
        
        <!-- Controles de búsqueda -->
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <TextBlock Grid.Row="0" Grid.Column="0" Text="Tipo de búsqueda:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="TipoBusquedaComboBox" 
                     Margin="0,0,10,0"/>
            
            <TextBlock Grid.Row="0" Grid.Column="2" Text="Versión:" 
                     VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="VersionComboBox" 
                     Width="200"/>
            
            <TextBlock Grid.Row="1" Grid.Column="0" Text="Consulta:" 
                     VerticalAlignment="Center" Margin="0,10,10,0"/>
            <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" x:Name="ConsultaTextBox" 
                   Padding="5" Margin="0,10,10,0" KeyDown="ConsultaTextBox_KeyDown"/>
            <Button Grid.Row="1" Grid.Column="3" x:Name="BuscarBtn" Content="Buscar" 
                  Width="200" Margin="0,10,0,0" Click="BuscarBtn_Click"/>
            
            <!-- Nueva fila para botones adicionales -->
            <StackPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" 
                      Orientation="Horizontal" Margin="0,10,0,0">
                <Button x:Name="NavegarBtn" Content="Navegar en Ventana" 
                      Width="160" Margin="0,0,10,0" Click="NavegarBtn_Click"/>
                <Button x:Name="BuscarConGoogleBtn" Content="Google" 
                      Width="80" Margin="0,0,10,0" Click="BuscarConGoogleBtn_Click"/>
                <Button x:Name="AbrirEnBibleGatewayBtn" Content="Abrir en Navegador" 
                      Width="140" Margin="0,0,10,0" Click="AbrirEnBibleGatewayBtn_Click"/>
            </StackPanel>
        </Grid>
        
        <!-- Navegador Web Embebido -->
        <Grid Grid.Row="2" Margin="0,0,0,10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <!-- Barra de navegación -->
            <Grid Grid.Row="0" Margin="0,0,0,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <Button x:Name="VolverBtn" Content="←" Width="30" Margin="0,0,5,0" 
                          Click="VolverBtn_Click" ToolTip="Atrás"/>
                    <Button x:Name="AvanzarBtn" Content="→" Width="30" Margin="0,0,5,0" 
                          Click="AvanzarBtn_Click" ToolTip="Adelante"/>
                    <Button x:Name="RefrescarBtn" Content="⟳" Width="30" Margin="0,0,5,0" 
                          Click="RefrescarBtn_Click" ToolTip="Refrescar"/>
                    <Button x:Name="InicioBtn" Content="🏠" Width="30" Margin="0,0,5,0" 
                          Click="InicioBtn_Click" ToolTip="Página de inicio"/>
                </StackPanel>
                
                <TextBlock Grid.Column="1" x:Name="UrlTextBlock" Text="https://www.biblegateway.com/" 
                         VerticalAlignment="Center" Margin="5,0" TextTrimming="CharacterEllipsis"/>
                
                <ToggleButton Grid.Column="2" x:Name="MostrarResultadosBtn" Content="Mostrar Lista" 
                           Width="100" Click="MostrarResultadosBtn_Click" ToolTip="Alternar entre navegador y lista de resultados"/>
            </Grid>
            
            <!-- Contenedor para alternar entre WebBrowser y ListView -->
            <Grid Grid.Row="1">
                <!-- WebBrowser -->
                <WebBrowser x:Name="WebBrowserControl" Visibility="Visible" 
                          LoadCompleted="WebBrowserControl_LoadCompleted"/>
                
                <!-- Panel de resultados (oculto inicialmente) -->
                <Grid x:Name="ResultadosPanel" Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Lista de resultados -->
                    <DockPanel Grid.Column="0" Margin="0,0,10,0">
                        <TextBlock DockPanel.Dock="Top" Text="Resultados:" FontWeight="Bold" Margin="0,0,0,5"/>
                        <ListView x:Name="ResultadosListView" SelectionChanged="ResultadosListView_SelectionChanged">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Libro" DisplayMemberBinding="{Binding Libro}" Width="100"/>
                                    <GridViewColumn Header="Cap" DisplayMemberBinding="{Binding Capitulo}" Width="40"/>
                                    <GridViewColumn Header="Ver" DisplayMemberBinding="{Binding Numero}" Width="40"/>
                                    <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="250"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </DockPanel>
                    
                    <!-- Detalle del versículo -->
                    <DockPanel Grid.Column="1" Margin="10,0,0,0">
                        <TextBlock DockPanel.Dock="Top" Text="Detalle:" FontWeight="Bold" Margin="0,0,0,5"/>
                        <TextBlock x:Name="DetalleTextBlock" TextWrapping="Wrap" 
                                 Background="{DynamicResource FondoVersiculo}" Padding="10"/>
                    </DockPanel>
                </Grid>
                
                <!-- Panel de carga -->
                <Grid x:Name="LoadingPanel" Visibility="Collapsed">
                    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                        <TextBlock Text="Cargando contenido..." HorizontalAlignment="Center" Margin="0,0,0,10"/>
                        <ProgressBar IsIndeterminate="True" Height="20" Width="200"/>
                    </StackPanel>
                </Grid>
            </Grid>
        </Grid>
        
        <!-- Panel de importación y barra de estado -->
        <Grid Grid.Row="3">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <!-- Panel de importación -->
            <Grid Grid.Row="0" x:Name="ImportarPanel" Visibility="Collapsed" Margin="0,0,0,10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <TextBlock Grid.Column="0" Text="Importar a versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <ComboBox Grid.Column="1" x:Name="VersionLocalComboBox" Margin="0,0,10,0"/>
                <Button Grid.Column="2" x:Name="ImportarBtn" Content="Importar Contenido" 
                      Width="150" Click="ImportarBtn_Click"/>
            </Grid>
            
            <!-- Barra de estado -->
            <Border Grid.Row="1" Background="{DynamicResource FondoControl}" Padding="10">
                <TextBlock x:Name="StatusTextBlock" Text="Cargando versiones disponibles..." TextWrapping="Wrap"/>
            </Border>
        </Grid>
    </Grid>
</Window>
```

## 2. Añadir los métodos necesarios en el code-behind

```csharp
// Añadir estos métodos a tu clase existente

private void NavegarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        string consulta = ConsultaTextBox.Text.Trim();
        if (string.IsNullOrEmpty(consulta))
        {
            MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
            return;
        }
        
        // Obtener la versión seleccionada
        string versionId = "RVR1960"; // Por defecto
        if (VersionComboBox.SelectedItem is VersionBiblica versionSeleccionada)
        {
            versionId = versionSeleccionada.Id;
        }
        
        // URL directa a BibleGateway
        string url;
        
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia
            case 2: // Capítulo completo
            case 3: // Libro completo
                url = $"https://www.biblegateway.com/passage/?search={Uri.EscapeDataString(consulta)}&version={versionId}";
                break;
            case 1: // Por texto
                url = $"https://www.biblegateway.com/search/?q={Uri.EscapeDataString(consulta)}&version={versionId}";
                break;
            default:
                url = $"https://www.biblegateway.com/search/?q={Uri.EscapeDataString(consulta)}&version={versionId}";
                break;
        }
        
        // Mostrar el panel del navegador
        ResultadosPanel.Visibility = Visibility.Collapsed;
        WebBrowserControl.Visibility = Visibility.Visible;
        MostrarResultadosBtn.Content = "Mostrar Lista";
        MostrarResultadosBtn.IsChecked = false;
        
        // Navegar a la URL
        WebBrowserControl.Navigate(new Uri(url));
        UrlTextBlock.Text = url;
        StatusTextBlock.Text = "Navegando a BibleGateway...";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al navegar.";
    }
}

// Métodos para controlar el navegador
private void RefrescarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        WebBrowserControl.Refresh();
        StatusTextBlock.Text = "Actualizando página...";
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al refrescar: {ex.Message}";
    }
}

private void VolverBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        if (WebBrowserControl.CanGoBack)
        {
            WebBrowserControl.GoBack();
            StatusTextBlock.Text = "Volviendo a página anterior...";
        }
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al volver: {ex.Message}";
    }
}

private void AvanzarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        if (WebBrowserControl.CanGoForward)
        {
            WebBrowserControl.GoForward();
            StatusTextBlock.Text = "Avanzando a página siguiente...";
        }
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al avanzar: {ex.Message}";
    }
}

private void InicioBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        WebBrowserControl.Navigate(new Uri("https://www.biblegateway.com/"));
        UrlTextBlock.Text = "https://www.biblegateway.com/";
        StatusTextBlock.Text = "Navegando a página principal...";
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al ir a inicio: {ex.Message}";
    }
}

private void WebBrowserControl_LoadCompleted(object sender, System.Windows.Navigation.NavigationEventArgs e)
{
    try
    {
        UrlTextBlock.Text = WebBrowserControl.Source?.ToString() ?? "";
        StatusTextBlock.Text = "Página cargada.";
        
        // Intentar extraer contenido cuando la página termina de cargar
        // Nota: esto es opcional y puede ser complejo debido a limitaciones del WebBrowser
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al procesar página: {ex.Message}";
    }
}

private void MostrarResultadosBtn_Click(object sender, RoutedEventArgs e)
{
    if (MostrarResultadosBtn.IsChecked == true)
    {
        // Mostrar panel de resultados
        WebBrowserControl.Visibility = Visibility.Collapsed;
        ResultadosPanel.Visibility = Visibility.Visible;
        MostrarResultadosBtn.Content = "Mostrar Navegador";
    }
    else
    {
        // Mostrar navegador
        ResultadosPanel.Visibility = Visibility.Collapsed;
        WebBrowserControl.Visibility = Visibility.Visible;
        MostrarResultadosBtn.Content = "Mostrar Lista";
    }
}

// Modificar BuscarBtn_Click para que use el navegador embebido cuando corresponda
private async void BuscarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        string consulta = ConsultaTextBox.Text.Trim();
        if (string.IsNullOrEmpty(consulta))
        {
            MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
            return;
        }
        
        // Mostrar indicador de carga
        StatusTextBlock.Text = "Buscando...";
        BuscarBtn.IsEnabled = false;
        LoadingPanel.Visibility = Visibility.Visible;
        
        // Esto empieza la búsqueda normal para obtener la lista
        // Código existente para buscar y mostrar resultados...
        
        // Adicionalmente, cargar también el contenido en el navegador
        NavegarBtn_Click(sender, e);
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al realizar la búsqueda: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al realizar la búsqueda.";
    }
    finally
    {
        BuscarBtn.IsEnabled = true;
        LoadingPanel.Visibility = Visibility.Collapsed;
    }
}
```

## 3. Instrucciones adicionales de configuración

Para que el WebBrowser funcione correctamente:

1. Asegúrate de que tu aplicación tenga permisos para acceder a Internet
2. Ten en cuenta que el control WebBrowser de WPF utiliza la versión de Internet Explorer instalada en el sistema
3. Para soportar sitios modernos y mejorar la compatibilidad, agrega al inicio de tu aplicación:

```csharp
// En el constructor de App() o en OnStartup()
// Esto permite al WebBrowser utilizar una versión más moderna de IE
public App()
{
    InitializeComponent();
    
    // Configurar WebBrowser para usar la versión más reciente de IE
    SetBrowserFeatureControl();
}

private void SetBrowserFeatureControl()
{
    // Requiere: using System.Reflection;
    var appName = System.IO.Path.GetFileName(Assembly.GetExecutingAssembly().Location);
    
    // Habilitar versiones más recientes de IE
    SetBrowserFeatureControlKey("FEATURE_BROWSER_EMULATION", appName, 11000);
    
    // Otras características opcionales
    SetBrowserFeatureControlKey("FEATURE_AJAX_CONNECTIONEVENTS", appName, 1);
    SetBrowserFeatureControlKey("FEATURE_ENABLE_CLIPCHILDREN_OPTIMIZATION", appName, 1);
    SetBrowserFeatureControlKey("FEATURE_MANAGE_SCRIPT_CIRCULAR_REFS", appName, 1);
    SetBrowserFeatureControlKey("FEATURE_DOMSTORAGE ", appName, 1);
}

private void SetBrowserFeatureControlKey(string feature, string appName, uint value)
{
    using (var key = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(
        @"Software\Microsoft\Internet Explorer\Main\FeatureControl\" + feature,
        Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree))
    {
        key?.SetValue(appName, value, Microsoft.Win32.RegistryValueKind.DWord);
    }
}
```

Con estas modificaciones, tu aplicación ahora tiene un navegador web integrado que permite a los usuarios buscar y navegar en BibleGateway sin salir de la aplicación, ofreciendo una experiencia más fluida y conveniente.

Código similar encontrado con 5 tipos de licencias

RafaelG1986: salen errores de script, no carga toda la pagina.

GitHub Copilot: # Solución para Problemas de Carga del WebBrowser

Los errores de script y la carga incompleta de páginas son comunes cuando se usa el control WebBrowser de WPF, ya que está basado en Internet Explorer y tiene limitaciones con sitios web modernos como BibleGateway.

## Mejoras para el WebBrowser existente

Implementemos estas soluciones para mejorar el rendimiento:

```csharp
// Agregar estos métodos a tu clase

public BusquedaOnlineWindow(BibliaService bibliaService)
{
    InitializeComponent();
    
    // Agregar estas líneas después de InitializeComponent()
    ConfigurarWebBrowser();
    
    // Resto del código existente...
}

private void ConfigurarWebBrowser()
{
    try
    {
        // Desactivar mensajes de error de script
        dynamic activeX = WebBrowserControl.GetType().InvokeMember("ActiveXInstance", 
            BindingFlags.GetProperty | BindingFlags.Instance | BindingFlags.NonPublic, 
            null, WebBrowserControl, new object[] { });
        
        activeX.Silent = true;
        
        // Configurar navegador para modo de compatibilidad
        WebBrowserControl.Navigated += (s, e) => {
            try {
                var doc = WebBrowserControl.Document as mshtml.HTMLDocument;
                if (doc != null)
                {
                    // Intentar deshabilitar alertas de script
                    doc.parentWindow.onerror = "function() { return true; }";
                }
            }
            catch { /* ignorar errores aquí */ }
        };
        
        // Deshabilitar el almacenamiento en caché para evitar problemas
        WebBrowserControl.Navigating += (s, e) => {
            SetCacheMode();
        };
        
        StatusTextBlock.Text = "Navegador configurado correctamente.";
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al configurar navegador: {ex.Message}";
    }
}

private void SetCacheMode()
{
    try
    {
        // Requiere agregar referencia a:
        // using System.Reflection;
        
        FieldInfo fiComWebBrowser = typeof(WebBrowser).GetField("_axIWebBrowser2", BindingFlags.Instance | BindingFlags.NonPublic);
        if (fiComWebBrowser == null) return;
        
        object objComWebBrowser = fiComWebBrowser.GetValue(WebBrowserControl);
        if (objComWebBrowser == null) return;
        
        objComWebBrowser.GetType().InvokeMember("PutProperty", BindingFlags.InvokeMethod, null, objComWebBrowser, new object[] { "SilentMode", "yes" });
    }
    catch
    {
        // Ignorar errores aquí
    }
}
```

## Añadir una navegación amigable para móviles

BibleGateway tiene una versión móvil que es más simple y puede cargar mejor:

```csharp
// Modificar el método NavegarBtn_Click

private void NavegarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        string consulta = ConsultaTextBox.Text.Trim();
        if (string.IsNullOrEmpty(consulta))
        {
            MessageBox.Show("Por favor, ingrese un texto para buscar.", "Búsqueda vacía", MessageBoxButton.OK, MessageBoxImage.Information);
            return;
        }
        
        // Obtener la versión seleccionada
        string versionId = "RVR1960"; // Por defecto
        if (VersionComboBox.SelectedItem is VersionBiblica versionSeleccionada)
        {
            versionId = versionSeleccionada.Id;
        }
        
        // URL directa a BibleGateway - usando versión móvil para mejor compatibilidad
        string url;
        
        switch (TipoBusquedaComboBox.SelectedIndex)
        {
            case 0: // Por referencia
            case 2: // Capítulo completo
            case 3: // Libro completo
                url = $"https://www.biblegateway.com/passage/?search={Uri.EscapeDataString(consulta)}&version={versionId}&interface=amp";
                break;
            case 1: // Por texto
                url = $"https://www.biblegateway.com/search/?q={Uri.EscapeDataString(consulta)}&version={versionId}&interface=amp";
                break;
            default:
                url = $"https://www.biblegateway.com/search/?q={Uri.EscapeDataString(consulta)}&version={versionId}&interface=amp";
                break;
        }
        
        // Mostrar el panel del navegador
        ResultadosPanel.Visibility = Visibility.Collapsed;
        WebBrowserControl.Visibility = Visibility.Visible;
        MostrarResultadosBtn.Content = "Mostrar Lista";
        MostrarResultadosBtn.IsChecked = false;
        
        // Navegar a la URL
        WebBrowserControl.Navigate(new Uri(url));
        UrlTextBlock.Text = url;
        StatusTextBlock.Text = "Navegando a BibleGateway (versión simplificada)...";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al navegar.";
    }
}
```

## Añadir botón para alternar entre modo completo y simplificado

```xml
<!-- Añadir a la barra de navegación -->
<StackPanel Grid.Column="0" Orientation="Horizontal">
    <Button x:Name="VolverBtn" Content="←" Width="30" Margin="0,0,5,0" 
          Click="VolverBtn_Click" ToolTip="Atrás"/>
    <Button x:Name="AvanzarBtn" Content="→" Width="30" Margin="0,0,5,0" 
          Click="AvanzarBtn_Click" ToolTip="Adelante"/>
    <Button x:Name="RefrescarBtn" Content="⟳" Width="30" Margin="0,0,5,0" 
          Click="RefrescarBtn_Click" ToolTip="Refrescar"/>
    <Button x:Name="InicioBtn" Content="🏠" Width="30" Margin="0,0,5,0" 
          Click="InicioBtn_Click" ToolTip="Página de inicio"/>
    <ToggleButton x:Name="ModoSimpleBtn" Content="Simple" Width="60" Margin="5,0,0,0"
                 ToolTip="Alternar entre modo completo y simplificado"
                 Click="ModoSimpleBtn_Click" IsChecked="True"/>
</StackPanel>
```

Y su método correspondiente:

```csharp
private bool _modoSimple = true;

private void ModoSimpleBtn_Click(object sender, RoutedEventArgs e)
{
    _modoSimple = ModoSimpleBtn.IsChecked == true;
    
    // Si hay una URL actual, recargar con el modo apropiado
    if (WebBrowserControl.Source != null)
    {
        string url = WebBrowserControl.Source.ToString();
        
        if (_modoSimple)
        {
            // Cambiar a versión simplificada
            if (!url.Contains("interface=amp"))
            {
                url = url + (url.Contains("?") ? "&" : "?") + "interface=amp";
                WebBrowserControl.Navigate(new Uri(url));
                StatusTextBlock.Text = "Cambiando a versión simplificada...";
            }
        }
        else
        {
            // Cambiar a versión completa
            if (url.Contains("interface=amp"))
            {
                url = url.Replace("interface=amp", "").Replace("&&", "&");
                // Eliminar "&" final si existe
                if (url.EndsWith("&")) url = url.Substring(0, url.Length - 1);
                WebBrowserControl.Navigate(new Uri(url));
                StatusTextBlock.Text = "Cambiando a versión completa...";
            }
        }
    }
}
```

## Agregar referencia necesaria para el control de errores de script

Necesitarás agregar una referencia a Microsoft HTML Object Library:

```bash
# Ejecutar este comando para agregar la referencia
dotnet add package Microsoft.mshtml
```

Y añadir la directiva using:

```csharp
using mshtml; // Agregar esta línea
using System.Reflection; // Si no estaba ya incluido
```

Estas mejoras deberían:
1. Reducir los errores de script molestos
2. Usar la versión simplificada de BibleGateway que carga mejor en WebBrowser
3. Dar más opciones al usuario para controlar la experiencia

Si sigues teniendo problemas graves, la opción definitiva sería migrar a WebView2 (basado en Edge), que es mucho más moderno y compatible con sitios web actuales, pero requiere una refactorización más significativa.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(10,7): err
or CS0246: El nombre del tipo o del espacio de nombres 'mshtml' n 
o se encontró (¿falta una directiva using o una referencia de ens 
amblado?) [C:\Biblia\BibliaApp\BibliaApp_wi5jtg0a_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Resolución del Error de Referencia mshtml

El error indica que tu proyecto no puede encontrar la biblioteca `mshtml`, que es necesaria para interactuar con el control WebBrowser y habilitar funciones como desactivar errores de script.

## Solución 1: Añadir el paquete NuGet Microsoft.mshtml

El enfoque más sencillo es agregar la referencia mediante NuGet:

```bash
dotnet add package Microsoft.mshtml
```

## Solución 2: Modificar directamente el archivo .csproj

Si la solución 1 no funciona, puedes editar manualmente el archivo del proyecto:

```xml
<ItemGroup>
  <!-- Buscar o añadir esta sección -->
  <COMReference Include="MSHTML">
    <WrapperTool>TlbImp</WrapperTool>
    <VersionMinor>0</VersionMinor>
    <VersionMajor>4</VersionMajor>
    <Guid>3050f1c5-98b5-11cf-bb82-00aa00bdce0b</Guid>
    <Lcid>0</Lcid>
    <Isolated>false</Isolated>
    <EmbedInteropTypes>true</EmbedInteropTypes>
  </COMReference>
</ItemGroup>
```

## Solución 3: Alternativa sin mshtml

Si continúas teniendo problemas, puedes modificar tu código para eliminar la dependencia de mshtml:

```csharp
// Eliminar esta línea
// using mshtml;

// Reemplazar el método ConfigurarWebBrowser con esta versión simplificada
private void ConfigurarWebBrowser()
{
    try
    {
        // Usar un enfoque más seguro que no depende de mshtml
        dynamic activeX = WebBrowserControl.GetType().InvokeMember("ActiveXInstance", 
            BindingFlags.GetProperty | BindingFlags.Instance | BindingFlags.NonPublic, 
            null, WebBrowserControl, new object[] { });
        
        // Silenciar errores de script
        if (activeX != null)
        {
            activeX.Silent = true;
        }
        
        // Eliminar la parte que usa mshtml.HTMLDocument
        WebBrowserControl.Navigated += (s, e) => {
            StatusTextBlock.Text = "Navegación completada";
        };
        
        // Mantener el resto del método
        WebBrowserControl.Navigating += (s, e) => {
            SetCacheMode();
        };
        
        StatusTextBlock.Text = "Navegador configurado correctamente.";
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al configurar navegador: {ex.Message}";
    }
}
```

## Solución 4: Usar WebView2 (Recomendado si continúan los problemas)

WebView2 es el control web moderno para aplicaciones .NET que usa el motor de Edge Chromium:

1. Instalar el paquete:
```bash
dotnet add package Microsoft.Web.WebView2
```

2. Reemplazar WebBrowser por WebView2 en el XAML

Esta es una solución más robusta a largo plazo, pero requiere más cambios en tu código.

## ¿Cuál solución elijo?

Intenta primero la solución 1 (añadir el paquete). Si no funciona, la solución 3 (alternativa sin mshtml) es la más rápida de implementar sin cambiar mucho código.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run                                
C:\Program Files\dotnet\sdk\8.0.408\Microsoft.Common.CurrentVersi
on.targets(3040,5): error MSB4803: No se admite la tarea "Resolve 
ComReference" en la versión de MSBuild de .NET Core. Use la versi 
ón de MSBuild de .NET Framework. Vea https://aka.ms/msbuild/MSB48
03 para obtener más información. [C:\Biblia\BibliaApp\BibliaApp.c 
sproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para el Error con Referencias COM en .NET Core

El error que estás experimentando es porque las referencias COM tradicionales (como MSHTML) no son totalmente compatibles con proyectos .NET Core/.NET 5+ utilizando la versión moderna de MSBuild.

## Solución recomendada: Migrar a WebView2

La mejor solución es reemplazar el control WebBrowser (basado en IE) por WebView2 (basado en Edge Chromium), que es totalmente compatible con .NET 5+ y proporciona un navegador web moderno.

### Paso 1: Eliminar la referencia COM problemática

```xml
iaApp.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
  </ItemGroup>

  <!-- Eliminar la sección de COMReference -->

</Project>
```

### Paso 2: Modificar el XAML para usar WebView2

```xml
<!-- Añadir xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf" -->
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
    
    <!-- En la sección donde estaba el WebBrowser -->
    <Grid Grid.Row="2" Margin="0,0,0,10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Barra de navegación -->
        <Grid Grid.Row="0" Margin="0,0,0,5">
            <!-- Mismo contenido de antes -->
        </Grid>
        
        <!-- Reemplazar WebBrowser por WebView2 -->
        <wv2:WebView2 x:Name="WebBrowserControl" Grid.Row="1" 
                     NavigationCompleted="WebBrowserControl_NavigationCompleted"/>
        
        <!-- Panel de resultados (oculto inicialmente) -->
        <Grid x:Name="ResultadosPanel" Grid.Row="1" Visibility="Collapsed">
            <!-- Mismo contenido de antes -->
        </Grid>
        
        <!-- Panel de carga -->
        <Grid x:Name="LoadingPanel" Grid.Row="1" Visibility="Collapsed">
            <!-- Mismo contenido de antes -->
        </Grid>
    </Grid>
```

### Paso 3: Actualizar el code-behind

```csharp
// Eliminar la referencia a mshtml
// using mshtml;

// Añadir esta referencia
using Microsoft.Web.WebView2.Core;

// En el constructor, después de InitializeComponent()
public BusquedaOnlineWindow(BibliaService bibliaService)
{
    InitializeComponent();
    
    // Inicializar WebView2
    InitializeWebView2();
    
    // Resto del código existente...
}

private async void InitializeWebView2()
{
    try
    {
        // Inicializar el entorno para WebView2
        await WebBrowserControl.EnsureCoreWebView2Async();
        
        // Configurar el navegador
        WebBrowserControl.CoreWebView2.Settings.AreDefaultScriptDialogsEnabled = false;
        WebBrowserControl.CoreWebView2.Settings.AreDevToolsEnabled = false;
        WebBrowserControl.CoreWebView2.Settings.IsScriptEnabled = true;
        
        // Navegar a la página inicial
        WebBrowserControl.CoreWebView2.Navigate("https://www.biblegateway.com/");
        StatusTextBlock.Text = "Navegador inicializado correctamente.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al inicializar WebView2: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al inicializar el navegador.";
    }
}

// Reemplazar los métodos actuales que usan WebBrowser
private void NavegarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        // Código para obtener consulta y versión (sin cambios)
        
        // URL directa a BibleGateway
        string url;
        
        // Switch para construir URL (sin cambios)
        
        // Navegar con WebView2
        WebBrowserControl.CoreWebView2.Navigate(url);
        UrlTextBlock.Text = url;
        StatusTextBlock.Text = "Navegando a BibleGateway...";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        StatusTextBlock.Text = "Error al navegar.";
    }
}

// Actualizar otros métodos
private void RefrescarBtn_Click(object sender, RoutedEventArgs e)
{
    WebBrowserControl.CoreWebView2?.Reload();
}

private void VolverBtn_Click(object sender, RoutedEventArgs e)
{
    if (WebBrowserControl.CoreWebView2?.CanGoBack == true)
        WebBrowserControl.CoreWebView2.GoBack();
}

private void AvanzarBtn_Click(object sender, RoutedEventArgs e)
{
    if (WebBrowserControl.CoreWebView2?.CanGoForward == true)
        WebBrowserControl.CoreWebView2.GoForward();
}

private void InicioBtn_Click(object sender, RoutedEventArgs e)
{
    WebBrowserControl.CoreWebView2?.Navigate("https://www.biblegateway.com/");
}

// Cambiar el evento de navegación completada
private void WebBrowserControl_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e)
{
    if (e.IsSuccess)
    {
        StatusTextBlock.Text = "Página cargada correctamente.";
        UrlTextBlock.Text = WebBrowserControl.Source?.ToString() ?? WebBrowserControl.CoreWebView2.Source;
    }
    else
    {
        StatusTextBlock.Text = $"Error al cargar la página: {e.WebErrorStatus}";
    }
}
```

## Si prefieres no usar WebView2

Si por alguna razón no puedes usar WebView2, aquí tienes algunas alternativas:

1. **Eliminar la referencia a MSHTML y simplificar el código:**
   Quita la referencia COM y modifica el código para no depender de esa biblioteca.

2. **Usar Process.Start para abrir el navegador predeterminado del sistema:**
   En lugar de integrar un navegador en tu aplicación, abre los enlaces en el navegador del usuario.

3. **Cambiar el proyecto a .NET Framework:**
   Si necesitas específicamente la funcionalidad de MSHTML, considera usar .NET Framework en lugar de .NET Core.

La opción WebView2 es la más recomendada para aplicaciones modernas, ya que proporciona un navegador actualizado y evita los problemas de compatibilidad del control WebBrowser basado en IE.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Program Files\dotnet\sdk\8.0.408\Microsoft.Common.CurrentVersi
on.targets(3040,5): error MSB4803: No se admite la tarea "Resolve 
ComReference" en la versión de MSBuild de .NET Core. Use la versi 
ón de MSBuild de .NET Framework. Vea https://aka.ms/msbuild/MSB48
03 para obtener más información. [C:\Biblia\BibliaApp\BibliaApp.c 
sproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección del Error de Referencias COM

El error que estás viendo indica que tu proyecto está intentando usar una referencia COM que no es compatible con la versión actual de .NET Core. Vamos a resolver esto eliminando la referencia COM del archivo del proyecto.

## Solución: Eliminar la referencia COM de MSHTML

Debes eliminar la sección COMReference de tu archivo de proyecto ya que no es necesaria porque estás usando WebView2:

```xml
csproj -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
  </ItemGroup>

  <!-- Eliminar completamente esta sección:
  <ItemGroup>
    <COMReference Include="MSHTML">
      <WrapperTool>TlbImp</WrapperTool>
      <VersionMinor>0</VersionMinor>
      <VersionMajor>4</VersionMajor>
      <Guid>3050f1c5-98b5-11cf-bb82-00aa00bdce0b</Guid>
      <Lcid>0</Lcid>
      <Isolated>false</Isolated>
      <EmbedInteropTypes>true</EmbedInteropTypes>
    </COMReference>
  </ItemGroup>
  -->

</Project>
```

## Explicación

1. Tu código ya está usando correctamente WebView2 (control web moderno basado en Edge Chromium) en vez del antiguo WebBrowser.
2. La referencia a MSHTML no es necesaria cuando trabajas con WebView2.
3. La tarea "ResolveComReference" no es compatible con la versión moderna de MSBuild que usa .NET Core/.NET 5+.

Esta modificación debería solucionar el problema de compilación y permitir que tu aplicación funcione correctamente con WebView2.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: en que parte del codigo esta?

GitHub Copilot: # Ubicación de Componentes en BusquedaOnlineWindow.xaml.cs

Basado en el código que has adjuntado, estos son los componentes principales y su ubicación en el archivo:

## Inicialización del WebView2
```csharp
private async void InitializeWebView2()
{
    // Líneas 46-62 aproximadamente
    // Configura el entorno WebView2 y navega a BibleGateway
}
```

## Botones de Navegación y su Funcionalidad
- **NavegarBtn_Click**: Líneas ~344-376 - Navega a BibleGateway con la consulta
- **RefrescarBtn_Click**: Líneas ~378-387 - Actualiza la página actual
- **VolverBtn_Click**: Líneas ~389-402 - Retrocede a la página anterior
- **AvanzarBtn_Click**: Líneas ~404-417 - Avanza a la página siguiente
- **InicioBtn_Click**: Líneas ~419-431 - Va a la página principal de BibleGateway

## Manejo de Búsqueda
- **BuscarBtn_Click**: Líneas ~150-177 - Inicia la búsqueda principal
- **BuscarConGoogleBtn_Click**: Líneas ~242-285 - Abre la búsqueda en Google
- **AbrirEnBibleGatewayBtn_Click**: Líneas ~287-328 - Abre BibleGateway en navegador externo

## Alternar entre Modos de Visualización
- **MostrarResultadosBtn_Click**: Líneas ~450-466 - Cambia entre vista de navegador y lista
- **ModoSimpleBtn_Click**: Líneas ~468-496 - Alterna entre versión simple y completa del sitio

## Importación de Contenido
- **ImportarBtn_Click**: Líneas ~179-240 - Importa versículos a la base de datos local

Si estás buscando algo específico que no aparece en esta lista, por favor indícamelo.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml(99,14): error
 MC3074: la etiqueta 'WebView2' no existe en el espacio de nombre 
s XML 'clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsof 
t.Web.WebView2.Wpf'. Línea 99, posición 14. [C:\Biblia\BibliaApp\
BibliaApp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Añadir la Referencia de WebView2 al Proyecto

El error indica que la etiqueta 'WebView2' no existe en el espacio de nombres XML, lo que significa que no has añadido el paquete NuGet de Microsoft.Web.WebView2 a tu proyecto.

## 1. Primero, añade la referencia al paquete WebView2 en tu proyecto:

```xml
iaApp.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
  </ItemGroup>

</Project>
```

## 2. Puedes añadir el paquete mediante la línea de comandos:

```bash
dotnet add package Microsoft.Web.WebView2
```

## 3. Asegúrate de que en el archivo XAML tengas la declaración correcta del espacio de nombres:

```xml
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
        Title="Búsqueda e Importación de Contenido Bíblico" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
```

## 4. Y asegúrate de que el control se declare correctamente:

```xml
<!-- En la parte correspondiente de tu XAML -->
<wv2:WebView2 x:Name="WebBrowserControl" Grid.Row="1" 
             NavigationCompleted="WebBrowserControl_NavigationCompleted"/>
```

Este error ocurre porque estás intentando usar el control WebView2 en tu XAML, pero no tienes la referencia al paquete NuGet correspondiente en tu proyecto. 

Estas modificaciones deberían resolver el problema. Después de aplicarlas, asegúrate de reconstruir la solución.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: mira este error

GitHub Copilot: # Corrección del Error de Referencia Nula en WebView2

El mensaje de error "Object reference not set to an instance of an object" (Referencia de objeto no establecida a una instancia de un objeto) aparece porque estás intentando usar propiedades o métodos del control WebView2 antes de que esté completamente inicializado.

## Solución: Correcta Inicialización de WebView2

El control WebView2 requiere una inicialización asíncrona completa antes de poder usarlo. Aquí está la solución:

```csharp
public BusquedaOnlineWindow(BibliaService bibliaService)
{
    InitializeComponent();
    
    _bibliaService = bibliaService;
    _bibliaApiService = new BibleGatewayService();
    
    // Inicializar WebView2 correctamente
    InitializeWebView2Async();
    
    // Configurar UI
    ConfigurarComboBoxes();
    
    // Cargar versiones disponibles en BibleGateway
    CargarVersionesBibleGateway();
}

// Importante: este método debe ser asíncrono y esperar a que el WebView2 se inicialice
private async void InitializeWebView2Async()
{
    try
    {
        // El indicador de carga puede ser útil aquí
        LoadingPanel.Visibility = Visibility.Visible;
        StatusTextBlock.Text = "Inicializando navegador...";
        
        // Esto debe completarse antes de usar CoreWebView2
        await WebBrowserControl.EnsureCoreWebView2Async();
        
        // Ahora es seguro configurar propiedades de CoreWebView2
        WebBrowserControl.CoreWebView2.Settings.AreDefaultScriptDialogsEnabled = false;
        WebBrowserControl.CoreWebView2.Settings.AreDevToolsEnabled = false;
        WebBrowserControl.CoreWebView2.Settings.IsScriptEnabled = true;
        
        // Navegar a la página inicial
        WebBrowserControl.CoreWebView2.Navigate("https://www.biblegateway.com/");
        
        StatusTextBlock.Text = "Navegador inicializado correctamente.";
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al inicializar el navegador: {ex.Message}\n\n" +
                       "El componente WebView2 requiere el tiempo de ejecución de WebView2. " +
                       "Visite https://developer.microsoft.com/en-us/microsoft-edge/webview2/ para instalarlo.",
                       "Error de inicialización", 
                       MessageBoxButton.OK, 
                       MessageBoxImage.Error);
        
        StatusTextBlock.Text = "Error al inicializar el navegador. Algunas funciones pueden no estar disponibles.";
    }
    finally
    {
        LoadingPanel.Visibility = Visibility.Collapsed;
    }
}

// Modificar todos los métodos que usan CoreWebView2 para verificar que esté inicializado
private void NavegarBtn_Click(object sender, RoutedEventArgs e)
{
    try
    {
        // Verificar si WebView2 está inicializado
        if (WebBrowserControl.CoreWebView2 == null)
        {
            MessageBox.Show("El navegador aún no está inicializado. Por favor, espere un momento y vuelva a intentarlo.",
                          "Navegador no disponible", 
                          MessageBoxButton.OK, 
                          MessageBoxImage.Information);
            return;
        }
        
        // Resto del código...
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
```

## Verificar la instalación del runtime de WebView2

El componente WebView2 requiere que el tiempo de ejecución de WebView2 esté instalado en el sistema. Si no está instalado, aparecerá este error.

1. Descarga e instala el WebView2 Runtime desde [la página oficial de Microsoft](https://developer.microsoft.com/en-us/microsoft-edge/webview2/).

2. Alternativamente, puedes incluir el instalador como parte de tu aplicación:

```csharp
private async Task VerificarWebView2RuntimeAsync()
{
    try
    {
        if (!Microsoft.Web.WebView2.Core.CoreWebView2Environment.GetAvailableBrowserVersionString().Any())
        {
            var result = MessageBox.Show(
                "El componente WebView2 no está instalado. ¿Desea instalarlo ahora?",
                "Componente necesario",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);
                
            if (result == MessageBoxResult.Yes)
            {
                Process.Start(new ProcessStartInfo
                {
                    FileName = "https://developer.microsoft.com/en-us/microsoft-edge/webview2/",
                    UseShellExecute = true
                });
            }
        }
    }
    catch
    {
        // El método GetAvailableBrowserVersionString lanzará una excepción si WebView2 no está disponible
        MessageBox.Show(
            "El componente WebView2 no está instalado. Esta aplicación requiere WebView2 Runtime.",
            "Componente necesario",
            MessageBoxButton.OK,
            MessageBoxImage.Warning);
    }
}
```

Implementando estas correcciones, deberías poder resolver el problema de referencia nula y usar WebView2 correctamente en tu aplicación.

RafaelG1986: Ahora quiero cargar los versiculos directamente al panel donde esta escrito

GitHub Copilot: # Implementación de Carga de Versículos en el Panel de Texto

Para cargar los versículos directamente en tu panel de resultados cuando navegas a BibleGateway, vamos a implementar una función que extraiga el contenido del navegador WebView2 y lo muestre en el panel de resultados.

## 1. Agregar método para extraer versículos de WebView2

```csharp
// Agregar este método para extraer y mostrar versículos
private async void ExtraerVersiculosDeWebView()
{
    try
    {
        LoadingPanel.Visibility = Visibility.Visible;
        StatusTextBlock.Text = "Extrayendo versículos...";
        
        // Ejecutar JavaScript para obtener el contenido del pasaje
        string scriptSelector = "";
        
        if (_modoSimple)
        {
            // Selector para versión móvil (AMP)
            scriptSelector = @"
                Array.from(document.querySelectorAll('.passage-text')).map(el => {
                    const referencia = document.querySelector('.passage-display-bcv')?.innerText || '';
                    const version = document.querySelector('.passage-display-version')?.innerText || '';
                    const texto = el.innerText;
                    return { referencia, version, texto };
                });
            ";
        }
        else
        {
            // Selector para versión completa
            scriptSelector = @"
                Array.from(document.querySelectorAll('.passage-text')).map(el => {
                    const referencia = document.querySelector('.bcv')?.innerText || '';
                    const version = document.querySelector('.passage-display-version')?.innerText || '';
                    const texto = el.innerText;
                    return { referencia, version, texto };
                });
            ";
        }
        
        string jsonResult = await WebBrowserControl.CoreWebView2.ExecuteScriptAsync(scriptSelector);
        
        // Procesar resultado JSON
        if (!string.IsNullOrEmpty(jsonResult) && jsonResult != "[]" && jsonResult != "null")
        {
            // Deserializar el JSON eliminando las comillas escapadas
            jsonResult = jsonResult.Replace("\\\"", "\"").Trim('"');
            
            // Parseamos el resultado obtenido
            var resultado = System.Text.Json.JsonSerializer.Deserialize<List<dynamic>>(jsonResult);
            
            if (resultado != null && resultado.Count > 0)
            {
                _resultados = new List<VersiculoOnline>();
                string textoCompleto = "";
                
                foreach (var item in resultado)
                {
                    string referencia = item.GetProperty("referencia").GetString();
                    string version = item.GetProperty("version").GetString();
                    string texto = item.GetProperty("texto").GetString();
                    
                    // Limpiar el texto y procesar versículos individuales
                    texto = texto.Replace("\r\n", "\n").Replace("\n\n", "\n");
                    
                    // Añadir al texto completo
                    textoCompleto += $"**{referencia} {version}**\n\n{texto}\n\n";
                    
                    // Intentar dividir en versículos individuales (esto es aproximado)
                    string[] lineas = texto.Split('\n');
                    foreach (var linea in lineas)
                    {
                        if (string.IsNullOrWhiteSpace(linea)) continue;
                        
                        // Buscar el número de versículo
                        var match = System.Text.RegularExpressions.Regex.Match(linea, @"^\s*(\d+)\s+(.+)$");
                        if (match.Success)
                        {
                            int numero = int.Parse(match.Groups[1].Value);
                            string contenido = match.Groups[2].Value.Trim();
                            
                            _resultados.Add(new VersiculoOnline
                            {
                                ReferenciaCompleta = $"{referencia}:{numero}",
                                Texto = contenido,
                                Numero = numero
                                // Libro y Capitulo se podrían parsear de la referencia
                            });
                        }
                    }
                }
                
                // Actualizar panel de resultados
                ResultadosListView.ItemsSource = _resultados;
                
                // Actualizar el texto de detalle
                DetalleTextBlock.Text = textoCompleto;
                
                // Mostrar panel de resultados
                WebBrowserControl.Visibility = Visibility.Collapsed;
                ResultadosPanel.Visibility = Visibility.Visible;
                MostrarResultadosBtn.Content = "Mostrar Navegador";
                MostrarResultadosBtn.IsChecked = true;
                
                // Habilitar el botón de importar
                ImportarPanel.Visibility = Visibility.Visible;
                
                StatusTextBlock.Text = $"Se encontraron {_resultados.Count} versículos.";
            }
            else
            {
                StatusTextBlock.Text = "No se encontraron versículos en la página.";
            }
        }
        else
        {
            // Intentar un método alternativo para búsquedas
            await ExtraerResultadosDeBusqueda();
        }
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al extraer versículos: {ex.Message}";
    }
    finally
    {
        LoadingPanel.Visibility = Visibility.Collapsed;
    }
}

// Método adicional para extraer resultados de búsqueda
private async Task ExtraerResultadosDeBusqueda()
{
    try
    {
        // Script para extraer resultados de búsqueda
        string scriptBusqueda = @"
            Array.from(document.querySelectorAll('.bible-item')).map(el => {
                const referencia = el.querySelector('.bible-item-reference')?.innerText || '';
                const texto = el.querySelector('.bible-item-text')?.innerText || '';
                return { referencia, texto };
            });
        ";
        
        string jsonResult = await WebBrowserControl.CoreWebView2.ExecuteScriptAsync(scriptBusqueda);
        
        if (!string.IsNullOrEmpty(jsonResult) && jsonResult != "[]" && jsonResult != "null")
        {
            // Deserializar el JSON eliminando las comillas escapadas
            jsonResult = jsonResult.Replace("\\\"", "\"").Trim('"');
            
            // Parseamos el resultado obtenido
            var resultado = System.Text.Json.JsonSerializer.Deserialize<List<dynamic>>(jsonResult);
            
            if (resultado != null && resultado.Count > 0)
            {
                _resultados = new List<VersiculoOnline>();
                string textoCompleto = "";
                
                foreach (var item in resultado)
                {
                    string referencia = item.GetProperty("referencia").GetString();
                    string texto = item.GetProperty("texto").GetString();
                    
                    // Añadir al texto completo
                    textoCompleto += $"**{referencia}**\n{texto}\n\n";
                    
                    // Parsear la referencia para obtener libro, capítulo y versículo
                    var match = System.Text.RegularExpressions.Regex.Match(referencia, @"(.+)\s+(\d+):(\d+)");
                    if (match.Success)
                    {
                        string libro = match.Groups[1].Value;
                        int capitulo = int.Parse(match.Groups[2].Value);
                        int numero = int.Parse(match.Groups[3].Value);
                        
                        _resultados.Add(new VersiculoOnline
                        {
                            Libro = libro,
                            Capitulo = capitulo,
                            Numero = numero,
                            ReferenciaCompleta = referencia,
                            Texto = texto
                        });
                    }
                }
                
                // Actualizar panel de resultados como antes
                ResultadosListView.ItemsSource = _resultados;
                DetalleTextBlock.Text = textoCompleto;
                ResultadosPanel.Visibility = Visibility.Visible;
                WebBrowserControl.Visibility = Visibility.Collapsed;
                MostrarResultadosBtn.IsChecked = true;
                MostrarResultadosBtn.Content = "Mostrar Navegador";
                ImportarPanel.Visibility = Visibility.Visible;
                
                StatusTextBlock.Text = $"Se encontraron {_resultados.Count} resultados de búsqueda.";
            }
            else
            {
                StatusTextBlock.Text = "No se encontraron resultados de búsqueda.";
            }
        }
        else
        {
            StatusTextBlock.Text = "No se pudo extraer contenido de la página.";
        }
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al extraer resultados: {ex.Message}";
    }
}
```

## 2. Modificar el evento NavigationCompleted para llamar a la extracción

```csharp
// Modificar este método existente
private void WebBrowserControl_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e)
{
    try
    {
        if (e.IsSuccess)
        {
            StatusTextBlock.Text = "Página cargada correctamente.";
            UrlTextBlock.Text = WebBrowserControl.CoreWebView2.Source;
            
            // Agregar un pequeño retraso para asegurar que la página esté completamente cargada
            Task.Delay(1000).ContinueWith(_ => Dispatcher.Invoke(() => 
            {
                // Extraer versículos automáticamente cuando la página carga
                ExtraerVersiculosDeWebView();
            }));
        }
        else
        {
            StatusTextBlock.Text = $"Error al cargar la página: {e.WebErrorStatus}";
        }
    }
    catch (Exception ex)
    {
        StatusTextBlock.Text = $"Error al procesar página: {ex.Message}";
    }
}
```

## 3. Añadir un botón para extraer versículos manualmente

```xml
<Grid Grid.Row="0" Margin="0,0,0,5">
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
    </Grid.ColumnDefinitions>
    
    <StackPanel Grid.Column="0" Orientation="Horizontal">
        <Button x:Name="VolverBtn" Content="←" Width="30" Margin="0,0,5,0" 
              Click="VolverBtn_Click" ToolTip="Atrás"/>
        <Button x:Name="AvanzarBtn" Content="→" Width="30" Margin="0,0,5,0" 
              Click="AvanzarBtn_Click" ToolTip="Adelante"/>
        <Button x:Name="RefrescarBtn" Content="⟳" Width="30" Margin="0,0,5,0" 
              Click="RefrescarBtn_Click" ToolTip="Refrescar"/>
        <Button x:Name="InicioBtn" Content="🏠" Width="30" Margin="0,0,5,0" 
              Click="InicioBtn_Click" ToolTip="Página de inicio"/>
        <ToggleButton x:Name="ModoSimpleBtn" Content="Simple" Width="60" Margin="5,0,0,0"
                    ToolTip="Alternar entre modo completo y simplificado"
                    Click="ModoSimpleBtn_Click" IsChecked="True"/>
        <Button x:Name="ExtraerBtn" Content="Extraer Versículos" Width="130" Margin="5,0,0,0"
              Click="ExtraerBtn_Click" ToolTip="Extraer versículos de la página actual"/>
    </StackPanel>
    
    <!-- Resto del código existente -->
</Grid>
```

Y su método en el code-behind:

```csharp
private void ExtraerBtn_Click(object sender, RoutedEventArgs e)
{
    ExtraerVersiculosDeWebView();
}
```

Con estas modificaciones, cuando navegues a una página de BibleGateway:

1. La aplicación intentará extraer automáticamente los versículos cuando la página termine de cargar
2. Los versículos se mostrarán en el panel de resultados
3. También puedes extraerlos manualmente con el botón "Extraer Versículos" si la extracción automática falla
4. Los versículos extraídos pueden ser importados a la base de datos local

Esto debería proporcionar una experiencia integrada donde puedes navegar por BibleGateway y tener los versículos disponibles directamente en tu aplicación sin necesidad de copiarlos manualmente.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: La extraccion se hizo mal, necesito una funcion que borre el contenido de lo que se esta agregando.

GitHub Copilot: # Función para Limpiar Resultados de Extracción de Versículos

Para solucionar el problema de acumulación incorrecta de versículos, necesitas implementar una función que limpie los resultados previos antes de realizar una nueva extracción. Aquí tienes una solución:

```csharp
// Agregar este método para limpiar resultados
private void LimpiarResultados()
{
    // Limpiar la lista de resultados
    _resultados = new List<VersiculoOnline>();
    
    // Limpiar la vista de lista y el panel de detalle
    ResultadosListView.ItemsSource = null;
    DetalleTextBlock.Text = string.Empty;
    
    // Ocultar el panel de importación hasta que haya nuevos resultados
    ImportarPanel.Visibility = Visibility.Collapsed;
    
    StatusTextBlock.Text = "Resultados limpiados. Listo para nueva extracción.";
}

// Modificar el método ExtraerVersiculosDeWebView() para usar la limpieza
private async void ExtraerVersiculosDeWebView()
{
    try
    {
        // Primero, limpiar resultados anteriores
        LimpiarResultados();
        
        LoadingPanel.Visibility = Visibility.Visible;
        StatusTextBlock.Text = "Extrayendo versículos...";
        
        // Resto del método continúa igual...
```

## Botón de Limpiar Resultados

También sería útil agregar un botón explícito para limpiar resultados:

```xml
<!-- Añadir este botón junto a los demás en la barra de navegación -->
<StackPanel Grid.Column="0" Orientation="Horizontal">
    <Button x:Name="VolverBtn" Content="←" Width="30" Margin="0,0,5,0" 
          Click="VolverBtn_Click" ToolTip="Atrás"/>
    <!-- Otros botones existentes -->
    <Button x:Name="ExtraerBtn" Content="Extraer Versículos" Width="130" Margin="5,0,0,0"
          Click="ExtraerBtn_Click" ToolTip="Extraer versículos de la página actual"/>
    <Button x:Name="LimpiarBtn" Content="🗑️" Width="30" Margin="5,0,0,0"
          Click="LimpiarBtn_Click" ToolTip="Limpiar resultados"/>
</StackPanel>
```

Y su método correspondiente:

```csharp
private void LimpiarBtn_Click(object sender, RoutedEventArgs e)
{
    LimpiarResultados();
}
```

## Mejora del Extractor

Para obtener mejores resultados en la extracción, también podríamos mejorar los selectores JavaScript:

```csharp
// Modificar los selectores en ExtraerVersiculosDeWebView()
if (_modoSimple)
{
    // Selector para versión móvil (AMP) - mejorado
    scriptSelector = @"
        (function() {
            try {
                const passage = document.querySelector('.passage-text');
                if (!passage) return [];
                
                const referencia = document.querySelector('.passage-display-bcv')?.innerText || '';
                const version = document.querySelector('.passage-display-version')?.innerText || '';
                
                // Extraer todos los versículos individualmente
                const versiculos = Array.from(passage.querySelectorAll('.verse')).map(v => {
                    const num = v.getAttribute('data-usfm')?.match(/\\d+$/)?.[0] || '';
                    const texto = v.innerText.replace(/^\\d+\\s/, '');
                    return { num: num, texto: texto };
                });
                
                return [{ referencia, version, texto: passage.innerText, versiculos: versiculos }];
            } catch(e) {
                return [{ error: e.toString() }];
            }
        })();
    ";
}
```

Esta mejora producirá una extracción más precisa de los versículos individuales y facilitará su procesamiento posterior.

RafaelG1986: El Error esta en que no carga el libro, al que se le va a agregar, ni el capitulo que se le va a agregar; libro sale vacio, capitulo 0..

GitHub Copilot: # Corrección para la Extracción de Libro y Capítulo en Importación de Versículos

He identificado el problema: cuando extraes versículos desde WebView2, el método `ExtraerVersiculosDeWebView()` no está asignando correctamente los valores de Libro y Capítulo a cada versículo, lo que provoca que cuando intentas importarlos, estos campos estén vacíos o con valor 0.

## Solución:

```csharp
// Modifica este fragmento en el método ExtraerVersiculosDeWebView() - alrededor de la línea 694

// Añadir al texto completo
textoCompleto += $"**{referencia} {version}**\n\n{texto}\n\n";

// Parsear la referencia para obtener libro y capítulo
var referenciaMatch = System.Text.RegularExpressions.Regex.Match(referencia, @"(.+)\s+(\d+)");
string libro = "";
int capitulo = 0;

if (referenciaMatch.Success)
{
    libro = referenciaMatch.Groups[1].Value.Trim();
    capitulo = int.Parse(referenciaMatch.Groups[2].Value);
}

// Intentar dividir en versículos individuales (esto es aproximado)
string[] lineas = texto.Split('\n');
foreach (var linea in lineas)
{
    if (string.IsNullOrWhiteSpace(linea)) continue;
    
    // Buscar el número de versículo
    var match = System.Text.RegularExpressions.Regex.Match(linea, @"^\s*(\d+)\s+(.+)$");
    if (match.Success)
    {
        int numero = int.Parse(match.Groups[1].Value);
        string contenido = match.Groups[2].Value.Trim();
        
        _resultados.Add(new VersiculoOnline
        {
            ReferenciaCompleta = $"{referencia}:{numero}",
            Texto = contenido,
            Numero = numero,
            Libro = libro,   // Añadir el libro extraído
            Capitulo = capitulo  // Añadir el capítulo extraído
        });
    }
}
```

## Explicación:

1. **Problema original**: No se estaban asignando los valores de `Libro` y `Capitulo` a los objetos `VersiculoOnline`, solo `ReferenciaCompleta`, `Texto` y `Numero`.

2. **Solución**: He añadido una expresión regular para extraer el libro y el capítulo de la referencia completa antes de procesar los versículos individuales.

3. **Expresión regular usada**: `@"(.+)\s+(\d+)"` - Captura texto (el libro) seguido de un espacio y luego un número (el capítulo).

4. **Validación**: Con esta modificación, cada versículo ahora tendrá correctamente asignados su libro y capítulo al ser agregado a la lista de resultados.

Esta solución debería resolver el problema de importación, asegurando que se asignen correctamente el libro y el capítulo a cada versículo extraído de BibleGateway.

RafaelG1986: sigue el mismo error. no carga bien el libro y el capitulo

GitHub Copilot: # Corrección del Problema de Extracción de Libro y Capítulo

Veo el problema en tu implementación. En la imagen se muestra que está extrayendo "0" como valor para el Libro cuando debería ser "Juan", y el capítulo aparece como "3", pero no se está asignando correctamente. Vamos a solucionar esto:

## 1. Modificar la extracción de datos en ExtraerVersiculosDeWebView

```csharp
// Modificar alrededor de la línea 637-688 en el método ExtraerVersiculosDeWebView()

// Después de que obtienes el texto y antes de añadir al textoCompleto
string referencia = item.GetProperty("referencia").GetString();
string version = item.GetProperty("version").GetString();
string texto = item.GetProperty("texto").GetString();

// Agregar depuración para ver qué contiene la referencia
Console.WriteLine($"Referencia extraída: '{referencia}'");

// Limpiar el texto y procesar versículos individuales
texto = texto.Replace("\r\n", "\n").Replace("\n\n", "\n");

// Añadir al texto completo
textoCompleto += $"**{referencia} {version}**\n\n{texto}\n\n";

// CORRECCIÓN: Mejorar la expresión regular para manejar mejor la extracción
// La expresión anterior podría estar fallando en algunas referencias
string libro = "";
int capitulo = 0;

// Primera intenta extraer libro y capítulo con el formato "Libro Capítulo"
var referenciaMatch = System.Text.RegularExpressions.Regex.Match(referencia, @"^([a-zA-ZáéíóúÁÉÍÓÚñÑ\s\.]+)\s+(\d+)$");

if (referenciaMatch.Success)
{
    libro = referenciaMatch.Groups[1].Value.Trim();
    capitulo = int.Parse(referenciaMatch.Groups[2].Value);
    Console.WriteLine($"Extracción correcta - Libro: '{libro}', Capítulo: {capitulo}");
}
else
{
    // Si falla, intentar con una expresión más permisiva
    referenciaMatch = System.Text.RegularExpressions.Regex.Match(referencia, @"([a-zA-ZáéíóúÁÉÍÓÚñÑ\s\.]+).*?(\d+)");
    if (referenciaMatch.Success)
    {
        libro = referenciaMatch.Groups[1].Value.Trim();
        capitulo = int.Parse(referenciaMatch.Groups[2].Value);
        Console.WriteLine($"Extracción alternativa - Libro: '{libro}', Capítulo: {capitulo}");
    }
    else
    {
        // Si todavía falla, intentar extraer de la URL si estamos en un pasaje
        string url = WebBrowserControl.CoreWebView2.Source;
        if (url.Contains("passage") && url.Contains("search="))
        {
            var urlMatch = System.Text.RegularExpressions.Regex.Match(
                url, @"search=([^&]+)");
            if (urlMatch.Success)
            {
                string busqueda = Uri.UnescapeDataString(urlMatch.Groups[1].Value);
                var partes = busqueda.Split(new[] { ' ', '+', '%20', ':', '.' }, StringSplitOptions.RemoveEmptyEntries);
                
                if (partes.Length >= 2 && int.TryParse(partes[1], out int cap))
                {
                    libro = partes[0];
                    capitulo = cap;
                    Console.WriteLine($"Extracción desde URL - Libro: '{libro}', Capítulo: {capitulo}");
                }
            }
        }
    }
}

// Si todo falla, usar valores por defecto
if (string.IsNullOrEmpty(libro))
{
    libro = referencia.Split(' ')[0]; // Tomar la primera palabra de la referencia
    Console.WriteLine($"Usando valor por defecto - Libro: '{libro}'");
}
```

## 2. Añadir un método especial para manejar referencias bíblicas

```csharp
// Añadir este método a la clase BusquedaOnlineWindow

private (string libro, int capitulo, int? versiculo) ParsearReferenciaBiblica(string referencia)
{
    // Referencias comunes: "Juan 3", "Juan 3:16", "1 Juan 2:3"
    string libro = "";
    int capitulo = 0;
    int? versiculo = null;
    
    // Primero buscar el patrón completo: Libro capítulo:versículo
    var matchCompleto = System.Text.RegularExpressions.Regex.Match(
        referencia, @"^((?:\d+\s+)?[a-zA-ZáéíóúÁÉÍÓÚñÑ\s\.]+)\s+(\d+)(?::(\d+))?");
        
    if (matchCompleto.Success)
    {
        libro = matchCompleto.Groups[1].Value.Trim();
        capitulo = int.Parse(matchCompleto.Groups[2].Value);
        
        if (matchCompleto.Groups[3].Success)
            versiculo = int.Parse(matchCompleto.Groups[3].Value);
            
        return (libro, capitulo, versiculo);
    }
    
    // Si no coincide, intentar extraer solo libro y capítulo
    var matchSimple = System.Text.RegularExpressions.Regex.Match(
        referencia, @"^((?:\d+\s+)?[a-zA-ZáéíóúÁÉÍÓÚñÑ\s\.]+).*?(\d+)");
        
    if (matchSimple.Success)
    {
        libro = matchSimple.Groups[1].Value.Trim();
        capitulo = int.Parse(matchSimple.Groups[2].Value);
        return (libro, capitulo, versiculo);
    }
    
    // Si todo falla, intentar obtener al menos alguna información
    var palabras = referencia.Split(' ');
    if (palabras.Length > 0)
    {
        libro = palabras[0];
        if (palabras.Length > 1 && int.TryParse(palabras[1], out int cap))
            capitulo = cap;
    }
    
    return (libro, capitulo, versiculo);
}
```

## 3. Usar este método en ambos extractores (principal y búsqueda)

```csharp
// En el método ExtraerVersiculosDeWebView(), reemplaza tu manejo de referencia con esto:
string referencia = item.GetProperty("referencia").GetString();
// ...

// Parsear la referencia para obtener libro y capítulo
var (libro, capitulo, _) = ParsearReferenciaBiblica(referencia);

// Y también modifica la línea ~825 en ExtraerResultadosDeBusqueda():
// Reemplazar:
var match = System.Text.RegularExpressions.Regex.Match(referencia, @"(.+)\s+(\d+):(\d+)");
if (match.Success)
{
    string libro = match.Groups[1].Value;
    int capitulo = int.Parse(match.Groups[2].Value);
    int numero = int.Parse(match.Groups[3].Value);
}

// Con:
var (libro, capitulo, versiculoNum) = ParsearReferenciaBiblica(referencia);
int numero = versiculoNum ?? 1; // Si no hay versículo, usar 1 como predeterminado
```

Esta implementación mejora la detección de libros y capítulos con expresiones regulares más robustas y un método especializado para analizar referencias bíblicas, lo que debería resolver el problema de extracción incorrecta de valores.

La solución maneja diferentes formatos de referencia y tiene varias capas de respaldo en caso de que falle alguna de las estrategias de análisis.

RafaelG1986: Ok, pero ahora tengo en desorden la extraccion a la hora de verlo en el panel de contenido

GitHub Copilot: # Solución para el Desorden en la Extracción de Versículos

He identificado el problema: los versículos extraídos no se ordenan correctamente antes de mostrarlos en el panel de contenido. Vamos a implementar la solución:

## Ordenar los versículos extraídos por número

```csharp
// Modificar en el método ExtraerVersiculosDeWebView() - después de procesar todos los versículos

// Cerca de la línea 745, después de agregar todos los versículos a _resultados, 
// pero antes de asignarlos a ResultadosListView.ItemsSource

// Añadir este bloque de código justo antes de:
// ResultadosListView.ItemsSource = _resultados;

// Ordenar los resultados por número de versículo
_resultados = _resultados.OrderBy(v => v.Numero).ToList();

// Actualizar panel de resultados
ResultadosListView.ItemsSource = _resultados;
```

## Hacer lo mismo en el método ExtraerResultadosDeBusqueda

```csharp
// Modificar en el método ExtraerResultadosDeBusqueda() - después de procesar todos los resultados

// Cerca de la línea 844, antes de asignar a ResultadosListView.ItemsSource

// Ordenar los resultados por libro, capítulo y versículo
_resultados = _resultados
    .OrderBy(v => v.Libro)
    .ThenBy(v => v.Capitulo)
    .ThenBy(v => v.Numero)
    .ToList();

// Actualizar panel de resultados como antes
ResultadosListView.ItemsSource = _resultados;
```

## Mejorar la extracción de versículos con un JavaScript más preciso

Para una mejor extracción de versículos específicamente numerados, puedes mejorar el script JavaScript:

```csharp
// Reemplazar el scriptSelector en ExtraerVersiculosDeWebView() para versión móvil

scriptSelector = @"
    (function() {
        try {
            const passage = document.querySelector('.passage-text');
            if (!passage) return [];
            
            const referencia = document.querySelector('.passage-display-bcv')?.innerText || '';
            const version = document.querySelector('.passage-display-version')?.innerText || '';
            
            // Extraer versículos en orden
            const versiculos = [];
            const versiculoElements = passage.querySelectorAll('[data-usfm]');
            
            for (let v of versiculoElements) {
                // Extraer el número del atributo data-usfm (ejemplo: 'v3' -> '3')
                const match = v.getAttribute('data-usfm')?.match(/v(\d+)/);
                if (match && match[1]) {
                    const num = parseInt(match[1]);
                    const texto = v.innerText.replace(/^\\d+\\s+/, '').trim();
                    versiculos.push({ num: num, texto: texto });
                }
            }
            
            // Ordenar los versículos por número
            versiculos.sort((a, b) => a.num - b.num);
            
            return [{ 
                referencia, 
                version, 
                texto: passage.innerText,
                versiculos: versiculos
            }];
        } catch(e) {
            return [{ error: e.toString() }];
        }
    })();
";
```

## Mostrar mensajes informativos en el panel de importación

Cuando se importan versículos desordenados, es útil mostrar un mensaje explicativo:

```csharp
// Agregar dentro del método ImportarBtn_Click(), justo antes de iniciar la importación

if (_resultados.Count > 0) 
{
    // Verificar si hay saltos en la secuencia de versículos
    var grupos = _resultados.GroupBy(v => new { v.Libro, v.Capitulo });
    foreach (var grupo in grupos)
    {
        var versiculos = grupo.OrderBy(v => v.Numero).ToList();
        int esperado = 1;
        bool secuenciaCompleta = true;
        
        foreach (var v in versiculos)
        {
            if (v.Numero != esperado)
            {
                secuenciaCompleta = false;
                break;
            }
            esperado++;
        }
        
        if (!secuenciaCompleta)
        {
            StatusTextBlock.Text = $"Aviso: Se detectaron posibles saltos en la secuencia de versículos para {grupo.Key.Libro} {grupo.Key.Capitulo}";
        }
    }
}
```

Estos cambios garantizarán que los versículos se muestren siempre en el orden correcto en el panel de contenido, incluso si la extracción los obtiene en un orden diferente.

RafaelG1986: Antes de seguir extrayendo me gustaria organizar los versiculos ya inscritos y tener la forma de moverlos, los que ya estan en la base de datos

GitHub Copilot: # Organización y Gestión de Versículos en la Base de Datos

Para organizar y gestionar los versículos ya existentes en tu base de datos, vamos a crear una nueva ventana de administración que te permita visualizar, reordenar y mover versículos. Esta herramienta será muy útil para mantener tu biblioteca bíblica organizada.

## 1. Crear una nueva Ventana de Gestión de Versículos

```xml
<Window x:Class="BibliaApp.Views.GestionVersiculosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Versículos" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título y filtros -->
        <StackPanel Grid.Row="0" Margin="0,0,0,15">
            <TextBlock Text="Gestión y Organización de Versículos" 
                     FontSize="20" FontWeight="Bold" Margin="0,0,0,15"/>
            
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                
                <TextBlock Grid.Column="0" Text="Versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <ComboBox Grid.Column="1" x:Name="VersionComboBox" Margin="0,0,20,0" SelectionChanged="VersionComboBox_SelectionChanged"/>
                
                <TextBlock Grid.Column="2" Text="Filtrar:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <TextBox Grid.Column="3" x:Name="FiltroTextBox" TextChanged="FiltroTextBox_TextChanged"/>
            </Grid>
        </StackPanel>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="3*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel de navegación (árbol de libros/capítulos) -->
            <Grid Grid.Column="0" Margin="0,0,10,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" Text="Navegación" FontWeight="Bold" Margin="0,0,0,5"/>
                
                <TreeView Grid.Row="1" x:Name="NavegacionTreeView" SelectedItemChanged="NavegacionTreeView_SelectedItemChanged">
                    <TreeView.Resources>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="IsExpanded" Value="False"/>
                        </Style>
                    </TreeView.Resources>
                </TreeView>
            </Grid>
            
            <!-- Panel de versículos -->
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Encabezado del panel de versículos -->
                <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                    <TextBlock x:Name="SeleccionTextBlock" Text="Versículos" FontWeight="Bold" VerticalAlignment="Center"/>
                    <Button x:Name="GuardarCambiosBtn" Content="Guardar Cambios" Margin="20,0,0,0" 
                           Click="GuardarCambiosBtn_Click" IsEnabled="False"/>
                    <Button x:Name="ReordenarBtn" Content="Reordenar Versículos" Margin="10,0,0,0" 
                           Click="ReordenarBtn_Click" IsEnabled="False"/>
                </StackPanel>
                
                <!-- ListView de versículos -->
                <ListView Grid.Row="1" x:Name="VersiculosListView" AllowDrop="True" 
                         MouseMove="VersiculosListView_MouseMove" 
                         Drop="VersiculosListView_Drop" 
                         PreviewMouseLeftButtonDown="VersiculosListView_PreviewMouseLeftButtonDown"
                         SelectionChanged="VersiculosListView_SelectionChanged"
                         ItemsSource="{Binding}">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Núm." DisplayMemberBinding="{Binding Numero}" Width="50"/>
                            <GridViewColumn Header="Texto" Width="600">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBox Text="{Binding Texto, UpdateSourceTrigger=PropertyChanged}" 
                                               Width="580" TextWrapping="Wrap" AcceptsReturn="True"
                                               BorderThickness="0" Background="Transparent"
                                               LostFocus="TextoVersiculo_LostFocus"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>
                
                <!-- Controles para mover versículos -->
                <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,10,0,0">
                    <Button x:Name="MoverArribaBtn" Content="↑ Mover Arriba" Width="120" Margin="0,0,10,0" 
                           Click="MoverArribaBtn_Click" IsEnabled="False"/>
                    <Button x:Name="MoverAbajoBtn" Content="↓ Mover Abajo" Width="120" Margin="0,0,10,0" 
                           Click="MoverAbajoBtn_Click" IsEnabled="False"/>
                    <Button x:Name="InsertarVersiculoBtn" Content="+ Insertar Versículo" Width="140" Margin="0,0,10,0" 
                           Click="InsertarVersiculoBtn_Click" IsEnabled="False"/>
                    <Button x:Name="EliminarVersiculoBtn" Content="- Eliminar Versículo" Width="140" Margin="0,0,10,0" 
                           Click="EliminarVersiculoBtn_Click" IsEnabled="False"/>
                </StackPanel>
            </Grid>
        </Grid>
        
        <!-- Barra de estado -->
        <Border Grid.Row="2" Background="{DynamicResource FondoControl}" Padding="10" Margin="0,15,0,0">
            <TextBlock x:Name="StatusTextBlock" Text="Listo"/>
        </Border>
    </Grid>
</Window>
```

## 2. Implementar el Code-Behind

```csharp
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionVersiculosWindow : Window, INotifyPropertyChanged
    {
        private BibliaService _bibliaService;
        private VersionBiblica _versionActual;
        private ObservableCollection<Versiculo> _versiculosActuales = new ObservableCollection<Versiculo>();
        private bool _hayCambiosPendientes = false;
        private Point _startPoint;
        
        // Para el árbol de navegación
        private Dictionary<string, List<int>> _mapLibroCapitulos = new Dictionary<string, List<int>>();
        private string _libroSeleccionado;
        private int _capituloSeleccionado;
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public GestionVersiculosWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            
            // Cargar versiones disponibles
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            try
            {
                var versiones = _bibliaService.ObtenerVersiones();
                VersionComboBox.ItemsSource = versiones;
                VersionComboBox.DisplayMemberPath = "Nombre";
                
                if (versiones.Count > 0)
                {
                    VersionComboBox.SelectedIndex = 0;
                }
                
                StatusTextBlock.Text = $"Se cargaron {versiones.Count} versiones.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al cargar versiones: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al cargar versiones.";
            }
        }
        
        private void VersionComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionComboBox.SelectedItem is VersionBiblica version)
            {
                // Verificar cambios pendientes
                if (_hayCambiosPendientes)
                {
                    var result = MessageBox.Show("Hay cambios sin guardar. ¿Desea guardarlos antes de cambiar de versión?", 
                                              "Cambios pendientes", 
                                              MessageBoxButton.YesNoCancel, 
                                              MessageBoxImage.Question);
                    
                    if (result == MessageBoxResult.Cancel)
                    {
                        // Restaurar selección anterior
                        VersionComboBox.SelectedItem = _versionActual;
                        return;
                    }
                    else if (result == MessageBoxResult.Yes)
                    {
                        GuardarCambios();
                    }
                }
                
                _versionActual = version;
                CargarEstructuraBiblia();
            }
        }
        
        private void CargarEstructuraBiblia()
        {
            try
            {
                NavegacionTreeView.Items.Clear();
                _mapLibroCapitulos.Clear();
                
                // Obtener la estructura de la Biblia para la versión seleccionada
                var libros = _bibliaService.ObtenerLibros(_versionActual.Id);
                
                foreach (var libro in libros)
                {
                    var libroItem = new TreeViewItem { Header = libro.Nombre, Tag = libro.Nombre };
                    NavegacionTreeView.Items.Add(libroItem);
                    
                    // Obtener capítulos para este libro
                    var capitulos = _bibliaService.ObtenerCapitulos(libro.Id);
                    _mapLibroCapitulos[libro.Nombre] = capitulos.Select(c => c.Numero).ToList();
                    
                    foreach (var capitulo in capitulos)
                    {
                        libroItem.Items.Add(new TreeViewItem 
                        { 
                            Header = $"Capítulo {capitulo.Numero}", 
                            Tag = capitulo.Numero 
                        });
                    }
                }
                
                StatusTextBlock.Text = $"Estructura cargada para {_versionActual.Nombre}.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al cargar estructura: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al cargar estructura.";
            }
        }
        
        private void NavegacionTreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            if (e.NewValue is TreeViewItem item)
            {
                // Verificar cambios pendientes
                if (_hayCambiosPendientes)
                {
                    var result = MessageBox.Show("Hay cambios sin guardar. ¿Desea guardarlos antes de continuar?", 
                                              "Cambios pendientes", 
                                              MessageBoxButton.YesNoCancel, 
                                              MessageBoxImage.Question);
                    
                    if (result == MessageBoxResult.Cancel)
                    {
                        // Restaurar selección anterior
                        return;
                    }
                    else if (result == MessageBoxResult.Yes)
                    {
                        GuardarCambios();
                    }
                    
                    _hayCambiosPendientes = false;
                }
                
                var parent = item.Parent as TreeViewItem;
                
                if (parent == null)
                {
                    // Se seleccionó un libro
                    _libroSeleccionado = item.Header.ToString();
                    SeleccionTextBlock.Text = $"Libro: {_libroSeleccionado}";
                    VersiculosListView.ItemsSource = null;
                    
                    GuardarCambiosBtn.IsEnabled = false;
                    ReordenarBtn.IsEnabled = false;
                    MoverArribaBtn.IsEnabled = false;
                    MoverAbajoBtn.IsEnabled = false;
                    InsertarVersiculoBtn.IsEnabled = false;
                    EliminarVersiculoBtn.IsEnabled = false;
                }
                else
                {
                    // Se seleccionó un capítulo
                    _libroSeleccionado = parent.Header.ToString();
                    _capituloSeleccionado = (int)item.Tag;
                    
                    CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
                }
            }
        }
        
        private void CargarVersiculos(string libroNombre, int capituloNumero)
        {
            try
            {
                var libro = _bibliaService.ObtenerLibroPorNombre(libroNombre, _versionActual.Id);
                if (libro != null)
                {
                    var capitulo = _bibliaService.ObtenerCapituloPorNumero(libro.Id, capituloNumero);
                    if (capitulo != null)
                    {
                        var versiculos = _bibliaService.ObtenerVersiculos(capitulo.Id);
                        
                        _versiculosActuales.Clear();
                        foreach (var v in versiculos.OrderBy(v => v.Numero))
                        {
                            _versiculosActuales.Add(v);
                        }
                        
                        VersiculosListView.ItemsSource = _versiculosActuales;
                        SeleccionTextBlock.Text = $"Libro: {libroNombre} - Capítulo: {capituloNumero}";
                        
                        // Habilitar controles de edición
                        GuardarCambiosBtn.IsEnabled = true;
                        ReordenarBtn.IsEnabled = true;
                        InsertarVersiculoBtn.IsEnabled = true;
                        
                        StatusTextBlock.Text = $"Cargados {versiculos.Count} versículos de {libroNombre} {capituloNumero}.";
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al cargar versículos: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al cargar versículos.";
            }
        }
        
        private void VersiculosListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            bool haySeleccion = VersiculosListView.SelectedItem != null;
            
            MoverArribaBtn.IsEnabled = haySeleccion && VersiculosListView.SelectedIndex > 0;
            MoverAbajoBtn.IsEnabled = haySeleccion && VersiculosListView.SelectedIndex < _versiculosActuales.Count - 1;
            EliminarVersiculoBtn.IsEnabled = haySeleccion;
        }
        
        private void TextoVersiculo_LostFocus(object sender, RoutedEventArgs e)
        {
            if (sender is TextBox textBox && textBox.DataContext is Versiculo)
            {
                _hayCambiosPendientes = true;
                GuardarCambiosBtn.IsEnabled = true;
            }
        }
        
        private void GuardarCambiosBtn_Click(object sender, RoutedEventArgs e)
        {
            GuardarCambios();
        }
        
        private void GuardarCambios()
        {
            try
            {
                foreach (var versiculo in _versiculosActuales)
                {
                    _bibliaService.ActualizarVersiculo(versiculo);
                }
                
                _hayCambiosPendientes = false;
                StatusTextBlock.Text = "Cambios guardados correctamente.";
                
                // Recargar para asegurar que todo esté actualizado
                CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar cambios: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al guardar cambios.";
            }
        }
        
        private void ReordenarBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Reordenar versículos (asegurar secuencia correcta)
                int numero = 1;
                
                foreach (var versiculo in _versiculosActuales.OrderBy(v => v.Numero))
                {
                    versiculo.Numero = numero++;
                }
                
                VersiculosListView.Items.Refresh();
                _hayCambiosPendientes = true;
                
                StatusTextBlock.Text = "Versículos reordenados. No olvide guardar los cambios.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al reordenar: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al reordenar versículos.";
            }
        }
        
        private void MoverArribaBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosListView.SelectedItem is Versiculo versiculo && VersiculosListView.SelectedIndex > 0)
            {
                int indiceActual = VersiculosListView.SelectedIndex;
                Versiculo versiculoAnterior = _versiculosActuales[indiceActual - 1];
                
                // Intercambiar números
                int temp = versiculo.Numero;
                versiculo.Numero = versiculoAnterior.Numero;
                versiculoAnterior.Numero = temp;
                
                // Reordenar la lista
                var ordenada = new ObservableCollection<Versiculo>(_versiculosActuales.OrderBy(v => v.Numero));
                _versiculosActuales.Clear();
                foreach (var v in ordenada)
                {
                    _versiculosActuales.Add(v);
                }
                
                // Mantener la selección
                VersiculosListView.SelectedIndex = indiceActual - 1;
                
                _hayCambiosPendientes = true;
                StatusTextBlock.Text = "Versículo movido. No olvide guardar los cambios.";
            }
        }
        
        private void MoverAbajoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosListView.SelectedItem is Versiculo versiculo && VersiculosListView.SelectedIndex < _versiculosActuales.Count - 1)
            {
                int indiceActual = VersiculosListView.SelectedIndex;
                Versiculo versiculoSiguiente = _versiculosActuales[indiceActual + 1];
                
                // Intercambiar números
                int temp = versiculo.Numero;
                versiculo.Numero = versiculoSiguiente.Numero;
                versiculoSiguiente.Numero = temp;
                
                // Reordenar la lista
                var ordenada = new ObservableCollection<Versiculo>(_versiculosActuales.OrderBy(v => v.Numero));
                _versiculosActuales.Clear();
                foreach (var v in ordenada)
                {
                    _versiculosActuales.Add(v);
                }
                
                // Mantener la selección
                VersiculosListView.SelectedIndex = indiceActual + 1;
                
                _hayCambiosPendientes = true;
                StatusTextBlock.Text = "Versículo movido. No olvide guardar los cambios.";
            }
        }
        
        private void InsertarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int numero;
                if (VersiculosListView.SelectedItem is Versiculo versiculoSeleccionado)
                {
                    // Insertar después del versículo seleccionado
                    numero = versiculoSeleccionado.Numero + 1;
                }
                else
                {
                    // Insertar al final
                    numero = _versiculosActuales.Count > 0 ? _versiculosActuales.Max(v => v.Numero) + 1 : 1;
                }
                
                // Desplazar números de versículos existentes
                foreach (var v in _versiculosActuales.Where(v => v.Numero >= numero).OrderByDescending(v => v.Numero))
                {
                    v.Numero++;
                }
                
                // Crear nuevo versículo
                var libro = _bibliaService.ObtenerLibroPorNombre(_libroSeleccionado, _versionActual.Id);
                var capitulo = _bibliaService.ObtenerCapituloPorNumero(libro.Id, _capituloSeleccionado);
                
                var nuevoVersiculo = new Versiculo
                {
                    CapituloId = capitulo.Id,
                    Numero = numero,
                    Texto = "[Nuevo versículo]"
                };
                
                // Agregarlo a la BD
                _bibliaService.InsertarVersiculo(nuevoVersiculo);
                
                // Recargar versículos para incluir el nuevo
                CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
                
                // Seleccionar el nuevo versículo
                foreach (var item in VersiculosListView.Items)
                {
                    if (item is Versiculo v && v.Numero == numero)
                    {
                        VersiculosListView.SelectedItem = item;
                        break;
                    }
                }
                
                StatusTextBlock.Text = "Versículo insertado correctamente.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al insertar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusTextBlock.Text = "Error al insertar versículo.";
            }
        }
        
        private void EliminarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosListView.SelectedItem is Versiculo versiculoSeleccionado)
            {
                var result = MessageBox.Show($"¿Está seguro de eliminar el versículo {versiculoSeleccionado.Numero}?", 
                                         "Eliminar versículo", 
                                         MessageBoxButton.YesNo, 
                                         MessageBoxImage.Warning);
                
                if (result == MessageBoxResult.Yes)
                {
                    try
                    {
                        // Eliminar versículo
                        _bibliaService.EliminarVersiculo(versiculoSeleccionado.Id);
                        
                        // Reajustar números si es necesario
                        var versiculosRestantes = _versiculosActuales.Where(v => v.Id != versiculoSeleccionado.Id).OrderBy(v => v.Numero).ToList();
                        for (int i = 0; i < versiculosRestantes.Count; i++)
                        {
                            versiculosRestantes[i].Numero = i + 1;
                            _bibliaService.ActualizarVersiculo(versiculosRestantes[i]);
                        }
                        
                        // Recargar versículos
                        CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
                        
                        StatusTextBlock.Text = "Versículo eliminado correctamente.";
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        StatusTextBlock.Text = "Error al eliminar versículo.";
                    }
                }
            }
        }
        
        private void FiltroTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            AplicarFiltro();
        }
        
        private void AplicarFiltro()
        {
            string filtro = FiltroTextBox.Text.ToLower().Trim();
            
            if (string.IsNullOrEmpty(filtro))
            {
                // Mostrar todo
                CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
            }
            else
            {
                // Aplicar filtro a los versículos cargados
                var versiculosFiltrados = _versiculosActuales.Where(v => 
                    v.Texto.ToLower().Contains(filtro) || 
                    v.Numero.ToString().Contains(filtro)).ToList();
                
                VersiculosListView.ItemsSource = versiculosFiltrados;
                StatusTextBlock.Text = $"Mostrando {versiculosFiltrados.Count} versículos que coinciden con '{filtro}'.";
            }
        }
        
        #region Drag & Drop para reordenar
        
        private void VersiculosListView_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                Point currentPosition = e.GetPosition(VersiculosListView);
                
                if (Math.Abs(currentPosition.X - _startPoint.X) > SystemParameters.MinimumHorizontalDragDistance ||
                    Math.Abs(currentPosition.Y - _startPoint.Y) > SystemParameters.MinimumVerticalDragDistance)
                {
                    if (VersiculosListView.SelectedItem != null)
                    {
                        Versiculo selectedVersiculo = VersiculosListView.SelectedItem as Versiculo;
                        DragDrop.DoDragDrop(VersiculosListView, selectedVersiculo, DragDropEffects.Move);
                    }
                }
            }
        }
        
        private void VersiculosListView_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _startPoint = e.GetPosition(VersiculosListView);
        }
        
        private void VersiculosListView_Drop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(Versiculo)))
            {
                Versiculo droppedItem = e.Data.GetData(typeof(Versiculo)) as Versiculo;
                Versiculo targetItem = GetListViewItemAtPoint(e.GetPosition(VersiculosListView)) as Versiculo;
                
                if (droppedItem != null && targetItem != null && droppedItem != targetItem)
                {
                    // Intercambiar números
                    int droppedNum = droppedItem.Numero;
                    int targetNum = targetItem.Numero;
                    
                    droppedItem.Numero = targetNum;
                    targetItem.Numero = droppedNum;
                    
                    // Reordenar la lista
                    var ordenada = new ObservableCollection<Versiculo>(_versiculosActuales.OrderBy(v => v.Numero));
                    _versiculosActuales.Clear();
                    foreach (var v in ordenada)
                    {
                        _versiculosActuales.Add(v);
                    }
                    
                    VersiculosListView.Items.Refresh();
                    _hayCambiosPendientes = true;
                    
                    StatusTextBlock.Text = "Versículos reordenados. No olvide guardar los cambios.";
                }
            }
        }
        
        private object GetListViewItemAtPoint(Point point)
        {
            HitTestResult result = VisualTreeHelper.HitTest(VersiculosListView, point);
            DependencyObject obj = result.VisualHit;
            
            while (obj != null && !(obj is ListViewItem))
            {
                obj = VisualTreeHelper.GetParent(obj);
            }
            
            if (obj is ListViewItem item)
            {
                return item.Content;
            }
            
            return null;
        }
        
        #endregion
    }
}
```

## 3. Añadir método en BibliaService para actualizar versículos

Asegúrate de que tu servicio `BibliaService` tenga los métodos necesarios para actualizar versículos:

```csharp
// Añade estos métodos si no existen ya

public void ActualizarVersiculo(Versiculo versiculo)
{
    using (var conexion = ConexionDB())
    {
        conexion.Open();
        
        string query = @"
            UPDATE Versiculos
            SET Numero = @Numero, Texto = @Texto
            WHERE Id = @Id";
            
        using (var comando = new SQLiteCommand(query, conexion))
        {
            comando.Parameters.AddWithValue("@Numero", versiculo.Numero);
            comando.Parameters.AddWithValue("@Texto", versiculo.Texto);
            comando.Parameters.AddWithValue("@Id", versiculo.Id);
            
            comando.ExecuteNonQuery();
        }
    }
}

public void InsertarVersiculo(Versiculo versiculo)
{
    using (var conexion = ConexionDB())
    {
        conexion.Open();
        
        string query = @"
            INSERT INTO Versiculos (CapituloId, Numero, Texto)
            VALUES (@CapituloId, @Numero, @Texto);
            SELECT last_insert_rowid();";
            
        using (var comando = new SQLiteCommand(query, conexion))
        {
            comando.Parameters.AddWithValue("@CapituloId", versiculo.CapituloId);
            comando.Parameters.AddWithValue("@Numero", versiculo.Numero);
            comando.Parameters.AddWithValue("@Texto", versiculo.Texto);
            
            long id = (long)comando.ExecuteScalar();
            versiculo.Id = (int)id;
        }
    }
}

public void EliminarVersiculo(int id)
{
    using (var conexion = ConexionDB())
    {
        conexion.Open();
        
        string query = "DELETE FROM Versiculos WHERE Id = @Id";
        
        using (var comando = new SQLiteCommand(query, conexion))
        {
            comando.Parameters.AddWithValue("@Id", id);
            comando.ExecuteNonQuery();
        }
    }
}
```

## 4. Añadir botón en MainWindow para abrir la ventana de gestión

```csharp
// Añade este método

private void GestionVersiculosMenuItem_Click(object sender, RoutedEventArgs e)
{
    var gestionWindow = new GestionVersiculosWindow(_bibliaService);
    gestionWindow.Owner = this;
    gestionWindow.ShowDialog();
    
    // Recargar datos cuando se cierre la ventana de gestión
    if (_libroActual != null && _capituloActual != null)
    {
        CargarCapitulo(_libroActual, _capituloActual.Numero);
    }
}
```

## 5. Agregar la opción al menú

```xml
<!-- Añadir este ítem de menú en la sección de herramientas -->
<MenuItem Header="Herramientas">
    <!-- Otros ítems existentes -->
    <MenuItem Header="Gestión de Versículos" Click="GestionVersiculosMenuItem_Click"/>
</MenuItem>
```

Con esta implementación, ahora tendrás una poderosa herramienta para gestionar y reorganizar los versículos en tu base de datos. Podrás:

1. Ver y navegar por los versículos organizados por libro y capítulo
2. Mover versículos hacia arriba o abajo para cambiar su orden
3. Editar el texto de los versículos directamente
4. Insertar nuevos versículos o eliminar existentes
5. Reordenar automáticamente los versículos para corregir secuencias
6. Arrastrar y soltar versículos para cambiar su posición
7. Filtrar por texto o número de versículo

Esta herramienta será especialmente útil para corregir errores de importación o para reorganizar contenido según tus preferencias.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml(85,37): error MC3089: el obje
to 'Window' tiene ya un elemento secundario y no puede agregar 'M 
enuItem'. 'Window' sólo puede aceptar un elemento secundario. Lín 
ea 85, posición 37. [C:\Biblia\BibliaApp\BibliaApp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección para Agregar Menú a MainWindow

El error ocurre porque estás intentando añadir un `MenuItem` directamente como hijo del `Window`, lo cual no es válido. Un `Window` solo puede tener un elemento hijo directo (en tu caso, ya tienes un `Grid`).

## Solución: Añadir un Menú Adecuadamente

Modifica tu MainWindow.xaml para incluir un menú en la estructura correcta:

```xaml
<!-- filepath: c:\Biblia\BibliaApp\MainWindow.xaml -->
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BibliaApp"
        mc:Ignorable="d"
        Title="Biblia App" Height="600" Width="900"
        Background="{DynamicResource FondoVentana}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>  <!-- Fila para el menú -->
            <RowDefinition Height="Auto"/>  <!-- Fila para la barra superior -->
            <RowDefinition Height="*"/>     <!-- Fila para el contenido principal -->
        </Grid.RowDefinitions>
        
        <!-- Menú principal -->
        <Menu Grid.Row="0" Background="{DynamicResource FondoControl}">
            <MenuItem Header="Archivo">
                <MenuItem Header="Salir" Click="SalirMenuItem_Click"/>
            </MenuItem>
            <MenuItem Header="Herramientas">
                <MenuItem Header="Gestión de Versículos" Click="GestionVersiculosMenuItem_Click"/>
                <MenuItem Header="Buscar Online" Click="AbrirBusquedaOnline_Click"/>
                <MenuItem Header="Agregar Contenido" Click="AbrirAgregarContenido_Click"/>
            </MenuItem>
            <MenuItem Header="Marcadores">
                <MenuItem Header="Agregar Marcador" Click="AgregarMarcador_Click"/>
                <MenuItem Header="Mis Marcadores" Click="AbrirMarcadores_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Barra superior -->
        <Grid Grid.Row="1" Background="{DynamicResource FondoControl}" Margin="0,0,0,2">
            <!-- Contenido existente de la barra superior -->
```

Luego, actualiza todas las referencias a `Grid.Row` en el resto del archivo para reflejar la nueva estructura (incrementa en 1 todos los índices de fila):

```xaml
<!-- Contenido principal - ahora es Grid.Row="2" en lugar de "1" -->
<Grid Grid.Row="2">
    <!-- Resto del código sin cambios -->
</Grid>
```

## Añadir el Método para Salir

Asegúrate de implementar el nuevo método en MainWindow.xaml.cs:

```csharp
private void SalirMenuItem_Click(object sender, RoutedEventArgs e)
{
    Close();
}
```

Con estos cambios, tendrás una barra de menú apropiada en la parte superior de tu aplicación, con opciones organizadas en categorías, y el error se solucionará.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Services\BibliaService.cs(4,19): error CS0234
: El tipo o el nombre del espacio de nombres 'SQLite' no existe e 
n el espacio de nombres 'System.Data' (¿falta alguna referencia d 
e ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_n25noir2_wpftmp.csp
roj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(332,17): error CS02 
46: El nombre del tipo o del espacio de nombres 'SQLiteConnection 
' no se encontró (¿falta una directiva using o una referencia de  
ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_n25noir2_wpftmp.cspro 
j]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(27,50): 
 warning CS8612: La nulabilidad de los tipos de referencia del ti 
po de "event PropertyChangedEventHandler GestionVersiculosWindow. 
PropertyChanged" no coincide con el miembro "event PropertyChange 
dEventHandler? INotifyPropertyChanged.PropertyChanged" implementa 
do de forma implícita. [C:\Biblia\BibliaApp\BibliaApp_n25noir2_wp 
ftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para Errores de Compilación en BibliaApp

Los errores que estás experimentando se deben principalmente a la falta de la referencia a SQLite en tu proyecto. Vamos a resolverlos:

## 1. Añadir la referencia a SQLite

Primero, necesitas añadir el paquete NuGet de SQLite a tu proyecto:

```bash
dotnet add package System.Data.SQLite
```

Alternativamente, puedes editar manualmente el archivo .csproj:

```xml
csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <!-- Añadir esta línea: -->
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

</Project>
```

## 2. Verificar las directivas using en BibliaService

Asegúrate de que el archivo BibliaService.cs tenga estas directivas using:

```csharp
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
// Otras directivas using según sea necesario
```

## 3. Corregir la implementación de INotifyPropertyChanged

Para solucionar la advertencia sobre el evento PropertyChanged en GestionVersiculosWindow:

```csharp
// Modificar la declaración del evento para que coincida con la interfaz INotifyPropertyChanged
public event PropertyChangedEventHandler? PropertyChanged;

// Método para invocar el evento de forma segura
protected void OnPropertyChanged(string propertyName)
{
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}
```

## 4. Configurar la conexión SQLite correctamente

Asegúrate de que el método ConexionDB() en BibliaService esté correctamente implementado:

```csharp
private SQLiteConnection ConexionDB()
{
    string dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "biblia.db");
    
    // Crear el directorio si no existe
    Directory.CreateDirectory(Path.GetDirectoryName(dbPath));
    
    // Crear la DB si no existe
    if (!File.Exists(dbPath))
    {
        CrearBaseDeDatos(dbPath);
    }
    
    string connectionString = $"Data Source={dbPath};Version=3;";
    return new SQLiteConnection(connectionString);
}
```

Una vez hayas realizado estos cambios, deberías poder compilar y ejecutar el proyecto sin errores. El paquete SQLite proporcionará las clases necesarias para la conexión a la base de datos y el manejo de la nulabilidad corregirá la advertencia de implementación.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run                                
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(35,16):
 warning CS8618: El elemento campo "_versionActual" que no acepta 
 valores NULL debe contener un valor distinto de NULL al salir de 
l constructor. Considere la posibilidad de agregar el modificador
 "required'"o declarar el campo como un valor que acepta valores  
NULL. [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]      
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(35,16): 
 warning CS8618: El elemento campo "_libroSeleccionado" que no ac 
epta valores NULL debe contener un valor distinto de NULL al sali 
r del constructor. Considere la posibilidad de agregar el modific 
ador "required'"o declarar el campo como un valor que acepta valo 
res NULL. [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]  
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(24,16): wa 
rning CS8618: El elemento campo "_resultados" que no acepta valor 
es NULL debe contener un valor distinto de NULL al salir del cons 
tructor. Considere la posibilidad de agregar el modificador "requ 
ired'"o declarar el campo como un valor que acepta valores NULL.  
[C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS8602: D 
esreferencia de una referencia posiblemente NULL. [C:\Biblia\Bibl 
iaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(104,45) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerLibros" ni un método de extensión accesible "ObtenerLibros 
" que acepte un primer argumento del tipo "BibliaService" (¿falta 
 alguna directiva using o una referencia de ensamblado?) [C:\Bibl 
ia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(112,52) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerCapitulos" ni un método de extensión accesible "ObtenerCap 
itulos" que acepte un primer argumento del tipo "BibliaService" ( 
¿falta alguna directiva using o una referencia de ensamblado?) [C 
:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(164,42) 
: warning CS8601: Posible asignación de referencia nula. [C:\Bibl 
ia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(178,42) 
: warning CS8601: Posible asignación de referencia nula. [C:\Bibl 
ia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(181,38) 
: warning CS8604: Posible argumento de referencia nulo para el pa 
rámetro "libroNombre" en "void GestionVersiculosWindow.CargarVers 
iculos(string libroNombre, int capituloNumero)". [C:\Biblia\Bibli 
aApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\MainWindow.xaml.cs(408,17): error CS0103: El  
nombre 'CargarCapitulo' no existe en el contexto actual [C:\Bibli 
a\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(190,44) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerLibroPorNombre" ni un método de extensión accesible "Obten 
erLibroPorNombre" que acepte un primer argumento del tipo "Biblia 
Service" (¿falta alguna directiva using o una referencia de ensam 
blado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(193,51) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerCapituloPorNumero" ni un método de extensión accesible "Ob 
tenerCapituloPorNumero" que acepte un primer argumento del tipo " 
BibliaService" (¿falta alguna directiva using o una referencia de 
 ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(196,57) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerVersiculos" ni un método de extensión accesible "ObtenerVe 
rsiculos" que acepte un primer argumento del tipo "BibliaService" 
 (¿falta alguna directiva using o una referencia de ensamblado?)  
[C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(212,60) 
: error CS1503: Argumento 1: no se puede convertir de 'grupo de m 
étodos' a 'object?' [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftm 
p.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(145,28): w 
arning CS1998: El método asincrónico carece de operadores "await" 
 y se ejecutará de forma sincrónica. Puede usar el operador 'awai 
t' para esperar llamadas API que no sean de bloqueo o 'await Task 
.Run(...)' para hacer tareas enlazadas a la CPU en un subproceso  
en segundo plano. [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp. 
csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(287,70): error CS10 
61: "Versiculo" no contiene una definición para "Id" ni un método 
 de extensión accesible "Id" que acepte un primer argumento del t 
ipo "Versiculo" (¿falta alguna directiva using o una referencia d 
e ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csp 
roj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(307,78): error CS10 
61: "Versiculo" no contiene una definición para "CapituloId" ni u 
n método de extensión accesible "CapituloId" que acepte un primer 
 argumento del tipo "Versiculo" (¿falta alguna directiva using o  
una referencia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpf 
hu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(312,31): error CS10 
61: "Versiculo" no contiene una definición para "Id" ni un método 
 de extensión accesible "Id" que acepte un primer argumento del t 
ipo "Versiculo" (¿falta alguna directiva using o una referencia d 
e ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csp 
roj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(338,39): warning CS 
8604: Posible argumento de referencia nulo para el parámetro "pat 
h" en "DirectoryInfo Directory.CreateDirectory(string path)". [C: 
\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(371,44) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerLibroPorNombre" ni un método de extensión accesible "Obten 
erLibroPorNombre" que acepte un primer argumento del tipo "Biblia 
Service" (¿falta alguna directiva using o una referencia de ensam 
blado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(372,47) 
: error CS1061: "BibliaService" no contiene una definición para " 
ObtenerCapituloPorNumero" ni un método de extensión accesible "Ob 
tenerCapituloPorNumero" que acepte un primer argumento del tipo " 
BibliaService" (¿falta alguna directiva using o una referencia de 
 ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(376,21) 
: error CS0117: 'Versiculo' no contiene una definición para 'Capi 
tuloId' [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]    
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(420,80) 
: error CS1061: "Versiculo" no contiene una definición para "Id"  
ni un método de extensión accesible "Id" que acepte un primer arg 
umento del tipo "Versiculo" (¿falta alguna directiva using o una  
referencia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3l 
n_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(423,84)
: error CS1061: "Versiculo" no contiene una definición para "Id"  
ni un método de extensión accesible "Id" que acepte un primer arg 
umento del tipo "Versiculo" (¿falta alguna directiva using o una  
referencia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3l 
n_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(423,112 
): error CS1061: "Versiculo" no contiene una definición para "Id" 
 ni un método de extensión accesible "Id" que acepte un primer ar 
gumento del tipo "Versiculo" (¿falta alguna directiva using o una 
 referencia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3 
ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(424,41) 
: error CS0019: El operador '<' no se puede aplicar a operandos d 
el tipo 'int' y 'grupo de métodos' [C:\Biblia\BibliaApp\BibliaApp 
_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(462,21) 
: warning CS8602: Desreferencia de una referencia posiblemente NU 
LL. [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(483,55) 
: warning CS8600: Se va a convertir un literal nulo o un posible  
valor nulo en un tipo que no acepta valores NULL [C:\Biblia\Bibli 
aApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(499,41) 
: warning CS8600: Se va a convertir un literal nulo o un posible  
valor nulo en un tipo que no acepta valores NULL [C:\Biblia\Bibli 
aApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(500,40) 
: warning CS8600: Se va a convertir un literal nulo o un posible  
valor nulo en un tipo que no acepta valores NULL [C:\Biblia\Bibli 
aApp\BibliaApp_gpfhu3ln_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(529,13) 
: error CS0246: El nombre del tipo o del espacio de nombres 'HitT 
estResult' no se encontró (¿falta una directiva using o una refer 
encia de ensamblado?) [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpf 
tmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(529,36) 
: error CS0103: El nombre 'VisualTreeHelper' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(534,23) 
: error CS0103: El nombre 'VisualTreeHelper' no existe en el cont 
exto actual [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(542,20) 
: warning CS8603: Posible tipo de valor devuelto de referencia nu 
lo. [C:\Biblia\BibliaApp\BibliaApp_gpfhu3ln_wpftmp.csproj]        

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para los Errores de Compilación en BibliaApp

Vamos a resolver sistemáticamente los errores que aparecen en tu proyecto. Necesitaremos modificar varios archivos para corregir las incompatibilidades y agregar la funcionalidad requerida.

## 1. Actualizar el modelo de Versiculo

```csharp
using System;

namespace BibliaApp.Models
{
    public class Versiculo
    {
        // Agregar propiedades faltantes
        public int Id { get; set; }
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;

        // Constructor opcional para facilitar la creación
        public Versiculo() { }

        public Versiculo(int numero, string texto)
        {
            Numero = numero;
            Texto = texto;
        }
    }
}
```

## 2. Agregar métodos faltantes a BibliaService

```csharp
// Agregar estos métodos a la clase BibliaService

// Método para obtener libros de una versión
public List<Libro> ObtenerLibros(string versionId)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        throw new ArgumentException($"No se encontró la versión con ID '{versionId}'");
    }
    return version.Libros;
}

// Método para obtener capítulos de un libro
public List<Capitulo> ObtenerCapitulos(string libroId)
{
    // En este caso, el libroId es el nombre del libro
    foreach (var version in _versiones)
    {
        foreach (var libro in version.Libros)
        {
            if (libro.Nombre == libroId)
            {
                return libro.Capitulos;
            }
        }
    }
    throw new ArgumentException($"No se encontró el libro con ID '{libroId}'");
}

// Método para obtener un libro por nombre
public Libro? ObtenerLibroPorNombre(string nombreLibro, string versionId)
{
    var version = ObtenerVersion(versionId);
    if (version == null)
    {
        return null;
    }
    return version.Libros.FirstOrDefault(l => l.Nombre == nombreLibro);
}

// Método para obtener un capítulo por número
public Capitulo? ObtenerCapituloPorNumero(string libroId, int numeroCapitulo)
{
    // Buscar el libro primero
    foreach (var version in _versiones)
    {
        foreach (var libro in version.Libros)
        {
            if (libro.Nombre == libroId)
            {
                return libro.Capitulos.FirstOrDefault(c => c.Numero == numeroCapitulo);
            }
        }
    }
    return null;
}

// Método para obtener versículos de un capítulo
public List<Versiculo> ObtenerVersiculos(int capituloId)
{
    // En este caso, capituloId sería un identificador único del capítulo
    foreach (var version in _versiones)
    {
        foreach (var libro in version.Libros)
        {
            foreach (var capitulo in libro.Capitulos)
            {
                if (capitulo.Id == capituloId)
                {
                    return capitulo.Versiculos;
                }
            }
        }
    }
    return new List<Versiculo>();
}

// Método para CrearBaseDeDatos (actualmente tiene throw NotImplementedException)
private void CrearBaseDeDatos(string dbPath)
{
    SQLiteConnection.CreateFile(dbPath);
    
    using (var conexion = new SQLiteConnection($"Data Source={dbPath};Version=3;"))
    {
        conexion.Open();
        
        string crearTablaVersiones = @"
            CREATE TABLE IF NOT EXISTS Versiones (
                Id TEXT PRIMARY KEY,
                Nombre TEXT NOT NULL,
                Idioma TEXT NOT NULL
            )";
            
        string crearTablaLibros = @"
            CREATE TABLE IF NOT EXISTS Libros (
                Id INTEGER PRIMARY KEY AUTOINCREMENT,
                VersionId TEXT NOT NULL,
                Nombre TEXT NOT NULL,
                Abreviatura TEXT,
                FOREIGN KEY (VersionId) REFERENCES Versiones(Id)
            )";
            
        string crearTablaCapitulos = @"
            CREATE TABLE IF NOT EXISTS Capitulos (
                Id INTEGER PRIMARY KEY AUTOINCREMENT,
                LibroId INTEGER NOT NULL,
                Numero INTEGER NOT NULL,
                FOREIGN KEY (LibroId) REFERENCES Libros(Id)
            )";
            
        string crearTablaVersiculos = @"
            CREATE TABLE IF NOT EXISTS Versiculos (
                Id INTEGER PRIMARY KEY AUTOINCREMENT,
                CapituloId INTEGER NOT NULL,
                Numero INTEGER NOT NULL,
                Texto TEXT NOT NULL,
                FOREIGN KEY (CapituloId) REFERENCES Capitulos(Id)
            )";
            
        using (var comando = new SQLiteCommand(crearTablaVersiones, conexion))
        {
            comando.ExecuteNonQuery();
        }
        
        using (var comando = new SQLiteCommand(crearTablaLibros, conexion))
        {
            comando.ExecuteNonQuery();
        }
        
        using (var comando = new SQLiteCommand(crearTablaCapitulos, conexion))
        {
            comando.ExecuteNonQuery();
        }
        
        using (var comando = new SQLiteCommand(crearTablaVersiculos, conexion))
        {
            comando.ExecuteNonQuery();
        }
    }
}
```

## 3. Corregir la clase GestionVersiculosWindow

```csharp
// Agregar las siguientes directivas using
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionVersiculosWindow : Window, INotifyPropertyChanged
    {
        private BibliaService _bibliaService;
        private VersionBiblia? _versionActual;  // Agregar ? para permitir nulos
        private ObservableCollection<Versiculo> _versiculosActuales = new ObservableCollection<Versiculo>();
        private bool _hayCambiosPendientes = false;
        private Point _startPoint;
        
        // Para el árbol de navegación
        private Dictionary<string, List<int>> _mapLibroCapitulos = new Dictionary<string, List<int>>();
        private string? _libroSeleccionado;  // Agregar ? para permitir nulos
        private int _capituloSeleccionado;
        
        public event PropertyChangedEventHandler? PropertyChanged;  // Hacer nullable con ?
        
        // El resto del código queda igual
```

## 4. Agregar el método CargarCapitulo a MainWindow

```csharp
// Agregar el método faltante

public void CargarCapitulo(Libro libro, int numeroCapitulo)
{
    try
    {
        if (libro == null)
        {
            return;
        }

        _libroActual = libro;
        
        // Buscar el capítulo por número
        var capitulo = libro.Capitulos.FirstOrDefault(c => c.Numero == numeroCapitulo);
        if (capitulo != null)
        {
            _capituloActual = capitulo;
            ActualizarInterfaz();
            
            // Actualizar la selección en los controles
            if (LibrosListBox.Items.Contains(libro.Nombre))
            {
                LibrosListBox.SelectedItem = libro.Nombre;
            }
            
            if (CapitulosComboBox.Items.Contains(numeroCapitulo))
            {
                CapitulosComboBox.SelectedItem = numeroCapitulo;
            }
            
            // Mostrar el contenido
            MostrarContenidoCapitulo(capitulo);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al cargar el capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void ActualizarInterfaz()
{
    // Actualizar elementos de la interfaz según el capítulo actual
    if (_libroActual != null && _capituloActual != null)
    {
        Title = $"Biblia App - {_libroActual.Nombre} {_capituloActual.Numero}";
    }
}

private void MostrarContenidoCapitulo(Capitulo capitulo)
{
    if (capitulo == null || capitulo.Versiculos == null || capitulo.Versiculos.Count == 0)
    {
        return;
    }

    // Mostrar los versículos en tu interfaz
    // Implementa según tu diseño específico
}
```

## 5. Corregir la implementación en GestionVersiculosWindow

```csharp
// Reemplazar el método GetListViewItemAtPoint

private object? GetListViewItemAtPoint(Point point)
{
    HitTestResult result = VisualTreeHelper.HitTest(VersiculosListView, point);
    DependencyObject obj = result.VisualHit;
    
    while (obj != null && !(obj is ListViewItem))
    {
        obj = VisualTreeHelper.GetParent(obj);
    }
    
    if (obj is ListViewItem item)
    {
        return item.Content;
    }
    
    return null;
}
```

## 6. Agregar propiedades al modelo Capitulo

```csharp
// Asegurarte de que la clase Capitulo tenga una propiedad Id

namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();

        // Constructor opcional
        public Capitulo() { }

        public Capitulo(int numero)
        {
            Numero = numero;
        }
    }
}
```

Con estas modificaciones, tu proyecto debería compilar correctamente. Los cambios principales incluyen:

1. Actualización de modelos para incluir las propiedades Id y CapituloId
2. Implementación de los métodos faltantes en BibliaService
3. Corrección de problemas de nulabilidad
4. Agregado de directivas using faltantes
5. Implementación del método CargarCapitulo en MainWindow

Es posible que necesites ajustes adicionales dependiendo de tu implementación específica, pero estos cambios deberían resolver los errores principales que estás enfrentando.

RafaelG1986: C:\Biblia\BibliaApp\Models\Capitulo.cs(5,18): error CS0101: El es
pacio de nombres 'BibliaApp.Models' ya contiene una definición pa 
ra 'Capitulo' [C:\Biblia\BibliaApp\BibliaApp_0lrx2me3_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\Models\Versiculo.cs(5,18): error CS0101: El e
spacio de nombres 'BibliaApp.Models' ya contiene una definición p 
ara 'Versiculo' [C:\Biblia\BibliaApp\BibliaApp_0lrx2me3_wpftmp.cs 
proj]
C:\Biblia\BibliaApp\Models\Capitulo.cs(12,16): error CS0111: El t 
ipo 'Capitulo' ya define un miembro denominado 'Capitulo' con los 
 mismos tipos de parámetro [C:\Biblia\BibliaApp\BibliaApp_0lrx2me 
3_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.


GitHub Copilot: # Solución para Errores de Definición de Clases Duplicadas

El error indica que estás tratando de crear clases `Capitulo` y `Versiculo` cuando ya existen definiciones para estas clases en el espacio de nombres `BibliaApp.Models`. 

## 1. Modificar las clases existentes en lugar de crear nuevas

En lugar de crear nuevos archivos, debes modificar los existentes para agregar las propiedades necesarias.

### Para la clase Capitulo existente

```csharp
// MODIFICAR el archivo existente, no crear uno nuevo
namespace BibliaApp.Models
{
    public class Capitulo
    {
        // Añadir propiedades faltantes que necesitas
        public int Id { get; set; }
        public int LibroId { get; set; } // Si aún no existe
        public int Numero { get; set; }  // Si ya existe, mantenerlo
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
        
        // No duplicar constructores si ya existen
    }
}
```

### Para la clase Versiculo existente

```csharp
// MODIFICAR el archivo existente, no crear uno nuevo
namespace BibliaApp.Models
{
    public class Versiculo
    {
        // Añadir propiedades faltantes que necesitas
        public int Id { get; set; }
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        
        // No duplicar constructores si ya existen
    }
}
```

## 2. Corregir la implementación de BibliaService

Para los métodos que faltan en BibliaService, asegúrate de implementarlos correctamente:

```csharp
// Agregar estos métodos (no duplicar si ya existen)
public List<Libro> ObtenerLibros(string versionId)
{
    // Implementación...
}

public List<Capitulo> ObtenerCapitulos(string libroId)
{
    // Implementación...
}

// Etc. para los otros métodos necesarios
```

## 3. Evitar crear archivos duplicados

El problema principal es que estás intentando crear archivos que ya existen. Asegúrate de:

1. Verificar los archivos existentes primero
2. Modificar los existentes en lugar de crear nuevos
3. No duplicar código o definiciones de clase

Con estas correcciones, deberías poder resolver los errores de compilación relacionados con la duplicación de clases y miembros.

RafaelG1986: C:\Biblia\BibliaApp\Models\Capitulo.cs(13,16): error CS0111: El t 
ipo 'Capitulo' ya define un miembro denominado 'Capitulo' con los 
 mismos tipos de parámetro [C:\Biblia\BibliaApp\BibliaApp_o1fvbuk 
2_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto

GitHub Copilot: # Solución para el Error de Constructor Duplicado en Capitulo

El error que estás enfrentando ocurre porque tienes dos constructores idénticos definidos en tu clase `Capitulo`. Esto sucede cuando:

1. Intentas añadir código a una clase que ya existe
2. Terminas duplicando constructores con la misma firma

## Cómo resolver el error:

```csharp
namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int LibroId { get; set; } 
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();

        // ELIMINAR UNO de estos constructores duplicados
        // Dejar solo uno de estos - ambos tienen la misma firma
        // public Capitulo() { }
        
        // Mantener solo este constructor vacío
        public Capitulo() { }

        // Este constructor con parámetros se puede mantener ya que tiene firma diferente
        public Capitulo(int numero)
        {
            Numero = numero;
        }
    }
}
```

## Explicación detallada:

1. El error `CS0111` indica que tienes dos miembros con el mismo nombre y la misma firma (los mismos tipos de parámetros)

2. En este caso, tienes dos constructores sin parámetros:
   ```csharp
   public Capitulo() { }
   // y en otro lugar del código o en otro archivo parcial
   public Capitulo() { }
   ```

3. Para resolver esto:
   - Elimina uno de los constructores duplicados
   - Asegúrate de que todas las propiedades y métodos estén definidos una sola vez

4. Verifica también que no tengas definida la clase `Capitulo` en múltiples archivos sin usar la palabra clave `partial`.

Este tipo de error suele ocurrir cuando intentamos modificar clases existentes añadiendo código que ya está presente en el proyecto.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Models\Capitulo.cs(5,18): error CS0101: El es
pacio de nombres 'BibliaApp.Models' ya contiene una definición pa 
ra 'Capitulo' [C:\Biblia\BibliaApp\BibliaApp_0x2k1xif_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\Models\Versiculo.cs(5,18): error CS0101: El e
spacio de nombres 'BibliaApp.Models' ya contiene una definición p 
ara 'Versiculo' [C:\Biblia\BibliaApp\BibliaApp_0x2k1xif_wpftmp.cs 
proj]
C:\Biblia\BibliaApp\Models\Capitulo.cs(13,16): error CS0111: El t 
ipo 'Capitulo' ya define un miembro denominado 'Capitulo' con los 
 mismos tipos de parámetro [C:\Biblia\BibliaApp\BibliaApp_0x2k1xi 
f_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución: Eliminar los Archivos Duplicados

El error indica que tienes **archivos duplicados** para las clases `Capitulo` y `Versiculo` en tu proyecto. Esto sucede cuando:

1. Ya existían los archivos originales: Capitulo.cs y `Versiculo.cs`
2. Creaste nuevos archivos con el mismo nombre siguiendo mis instrucciones

## Pasos para solucionar el problema:

### 1. Identificar los archivos duplicados

```powershell
# Ejecuta este comando en la terminal para encontrar todos los archivos Capitulo.cs
dir -r c:\Biblia -Filter "Capitulo.cs" | select FullName

# Ejecuta este comando para encontrar todos los archivos Versiculo.cs
dir -r c:\Biblia -Filter "Versiculo.cs" | select FullName
```

### 2. Eliminar los archivos nuevos (duplicados)

Debes mantener solo un archivo de cada tipo. Si hay múltiples archivos como:
- Capitulo.cs
- `c:\Biblia\BibliaApp\Capitulo.cs` (o en otra ubicación)

Elimina el segundo archivo (o cualquier archivo que no esté en la carpeta Models).

### 3. Modificar los archivos originales

Una vez que hayas eliminado los duplicados, modifica los archivos originales para asegurarte de que contengan todas las propiedades necesarias:

```csharp
namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int LibroId { get; set; } 
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
        
        // Solo UN constructor vacío
        public Capitulo() { }
        
        // Y este constructor con parámetro
        public Capitulo(int numero)
        {
            Numero = numero;
        }
    }
}
```

```csharp
namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        
        public Versiculo() { }
        
        public Versiculo(int numero, string texto)
        {
            Numero = numero;
            Texto = texto;
        }
    }
}
```

### 4. Verificar todos los archivos del proyecto

Esta situación sugiere que podrías tener otros archivos duplicados. Asegúrate de:

- No tener múltiples definiciones de `GestionVersiculosWindow`
- Mantener solo una copia de cada archivo de clase
- No tener versiones duplicadas de `BibliaService`

Cuando crees nuevas funcionalidades, siempre verifica si el archivo ya existe y modifícalo en lugar de crear uno nuevo.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Services\BibliaService.cs(495,18): err
or CS0101: El espacio de nombres 'BibliaApp.Models' ya con 
tiene una definición para 'Capitulo' [C:\Biblia\BibliaApp\ 
BibliaApp_5jxxr3kb_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(512,18): err
or CS0101: El espacio de nombres 'BibliaApp.Models' ya con 
tiene una definición para 'Versiculo' [C:\Biblia\BibliaApp 
\BibliaApp_5jxxr3kb_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(503,16): err 
or CS0111: El tipo 'Capitulo' ya define un miembro denomin 
ado 'Capitulo' con los mismos tipos de parámetro [C:\Bibli 
a\BibliaApp\BibliaApp_5jxxr3kb_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para Eliminar Definiciones Duplicadas en BibliaService.cs

El problema es que tienes definiciones de clases duplicadas al final del archivo BibliaService.cs. Estas clases ya existen en archivos separados en la carpeta Models.

## Pasos para solucionar el error:

1. Abre el archivo BibliaService.cs
2. **Elimina todo el código** a partir de la línea 494 hasta el final:

```csharp
// ELIMINAR todo este bloque de código del final del archivo
namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int LibroId { get; set; } 
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
        
        // Solo UN constructor vacío
        public Capitulo() { }
        
        // Y este constructor con parámetro
        public Capitulo(int numero)
        {
            Numero = numero;
        }
    }

    public class Versiculo
    {
        public int Id { get; set; }
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        
        public Versiculo() { }
        
        public Versiculo(int numero, string texto)
        {
            Numero = numero;
            Texto = texto;
        }
    }
}
```

3. Guarda el archivo tras eliminar ese código

## Explicación:

Lo que ocurrió es que accidentalmente añadiste las definiciones de `Capitulo` y `Versiculo` al final del archivo BibliaService.cs, pero estas clases ya existen en sus propios archivos en la carpeta Models:
- `c:\Biblia\BibliaApp\Models\Capitulo.cs`
- `c:\Biblia\BibliaApp\Models\Versiculo.cs`

Este es un error común cuando se sigue una guía de implementación y se copia código a archivos incorrectos.

Con esta eliminación, el código debería compilar correctamente usando las definiciones existentes de tus modelos.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\MainWindow.xaml.cs(286,25): warning CS
8602: Desreferencia de una referencia posiblemente NULL. [ 
C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]      
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs(
113,75): error CS1061: "Libro" no contiene una definición  
para "Id" ni un método de extensión accesible "Id" que ace 
pte un primer argumento del tipo "Libro" (¿falta alguna di 
rectiva using o una referencia de ensamblado?) [C:\Biblia\ 
BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
105,59): warning CS8602: Desreferencia de una referencia p 
osiblemente NULL. [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_ 
wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
114,40): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "key" en "List<int> Dictionary<strin 
g, List<int>>.this[string key]". [C:\Biblia\BibliaApp\Bibl 
iaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(24, 
16): warning CS8618: El elemento campo "_resultados" que n 
o acepta valores NULL debe contener un valor distinto de N 
ULL al salir del constructor. Considere la posibilidad de  
agregar el modificador "required'"o declarar el campo como 
 un valor que acepta valores NULL. [C:\Biblia\BibliaApp\Bi 
bliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
182,38): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "libroNombre" en "void GestionVersic 
ulosWindow.CargarVersiculos(string libroNombre, int capitu 
loNumero)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp 
.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
194,82): error CS1061: "Libro" no contiene una definición  
para "Id" ni un método de extensión accesible "Id" que ace 
pte un primer argumento del tipo "Libro" (¿falta alguna di 
rectiva using o una referencia de ensamblado?) [C:\Biblia\ 
BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
197,84): error CS1061: "Capitulo" no contiene una definici 
ón para "Id" ni un método de extensión accesible "Id" que  
acepte un primer argumento del tipo "Capitulo" (¿falta alg 
una directiva using o una referencia de ensamblado?) [C:\B 
iblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
191,79): warning CS8602: Desreferencia de una referencia p 
osiblemente NULL. [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_ 
wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
260,34): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "libroNombre" en "void GestionVersic 
ulosWindow.CargarVersiculos(string libroNombre, int capitu 
loNumero)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp 
.csproj]
C:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml.cs(145 
,28): warning CS1998: El método asincrónico carece de oper 
adores "await" y se ejecutará de forma sincrónica. Puede u 
sar el operador 'await' para esperar llamadas API que no s 
ean de bloqueo o 'await Task.Run(...)' para hacer tareas e 
nlazadas a la CPU en un subproceso en segundo plano. [C:\B 
iblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
373,78): error CS1061: "Libro" no contiene una definición  
para "Id" ni un método de extensión accesible "Id" que ace 
pte un primer argumento del tipo "Libro" (¿falta alguna di 
rectiva using o una referencia de ensamblado?) [C:\Biblia\ 
BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
377,21): error CS0117: 'Versiculo' no contiene una definic 
ión para 'CapituloId' [C:\Biblia\BibliaApp\BibliaApp_vz4s3 
0w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
377,43): error CS1061: "Capitulo" no contiene una definici 
ón para "Id" ni un método de extensión accesible "Id" que  
acepte un primer argumento del tipo "Capitulo" (¿falta alg 
una directiva using o una referencia de ensamblado?) [C:\B
iblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
372,86): warning CS8602: Desreferencia de una referencia p 
osiblemente NULL. [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_ 
wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
372,66): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "nombreLibro" en "Libro? BibliaServi 
ce.ObtenerLibroPorNombre(string nombreLibro, string versio 
nId)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.cspr 
oj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
421,80): error CS1061: "Versiculo" no contiene una definic 
ión para "Id" ni un método de extensión accesible "Id" que 
 acepte un primer argumento del tipo "Versiculo" (¿falta a 
lguna directiva using o una referencia de ensamblado?) [C: 
\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
424,84): error CS1061: "Versiculo" no contiene una definic 
ión para "Id" ni un método de extensión accesible "Id" que 
 acepte un primer argumento del tipo "Versiculo" (¿falta a 
lguna directiva using o una referencia de ensamblado?) [C: 
\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]        
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
424,112): error CS1061: "Versiculo" no contiene una defini 
ción para "Id" ni un método de extensión accesible "Id" qu 
e acepte un primer argumento del tipo "Versiculo" (¿falta  
alguna directiva using o una referencia de ensamblado?) [C 
:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]       
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
425,41): error CS0019: El operador '<' no se puede aplicar 
 a operandos del tipo 'int' y 'grupo de métodos' [C:\Bibli 
a\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
432,42): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "libroNombre" en "void GestionVersic 
ulosWindow.CargarVersiculos(string libroNombre, int capitu 
loNumero)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp 
.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
457,34): warning CS8604: Posible argumento de referencia n 
ulo para el parámetro "libroNombre" en "void GestionVersic 
ulosWindow.CargarVersiculos(string libroNombre, int capitu 
loNumero)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp 
.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
463,21): warning CS8602: Desreferencia de una referencia p 
osiblemente NULL. [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_ 
wpftmp.csproj]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
484,55): warning CS8600: Se va a convertir un literal nulo 
 o un posible valor nulo en un tipo que no acepta valores  
NULL [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
500,41): warning CS8600: Se va a convertir un literal nulo 
 o un posible valor nulo en un tipo que no acepta valores  
NULL [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml.cs( 
501,40): warning CS8600: Se va a convertir un literal nulo 
 o un posible valor nulo en un tipo que no acepta valores  
NULL [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj 
]
C:\Biblia\BibliaApp\Services\BibliaService.cs(287,70): err 
or CS1061: "Versiculo" no contiene una definición para "Id 
" ni un método de extensión accesible "Id" que acepte un p 
rimer argumento del tipo "Versiculo" (¿falta alguna direct 
iva using o una referencia de ensamblado?) [C:\Biblia\Bibl 
iaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(307,78): err 
or CS1061: "Versiculo" no contiene una definición para "Ca 
pituloId" ni un método de extensión accesible "CapituloId" 
 que acepte un primer argumento del tipo "Versiculo" (¿fal 
ta alguna directiva using o una referencia de ensamblado?) 
 [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_wpftmp.csproj]    
C:\Biblia\BibliaApp\Services\BibliaService.cs(312,31): err 
or CS1061: "Versiculo" no contiene una definición para "Id 
" ni un método de extensión accesible "Id" que acepte un p 
rimer argumento del tipo "Versiculo" (¿falta alguna direct 
iva using o una referencia de ensamblado?) [C:\Biblia\Bibl 
iaApp\BibliaApp_vz4s30w5_wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(338,39): war 
ning CS8604: Posible argumento de referencia nulo para el  
parámetro "path" en "DirectoryInfo Directory.CreateDirecto 
ry(string path)". [C:\Biblia\BibliaApp\BibliaApp_vz4s30w5_ 
wpftmp.csproj]
C:\Biblia\BibliaApp\Services\BibliaService.cs(472,38): err 
or CS1061: "Capitulo" no contiene una definición para "Id" 
 ni un método de extensión accesible "Id" que acepte un pr 
imer argumento del tipo "Capitulo" (¿falta alguna directiv 
a using o una referencia de ensamblado?) [C:\Biblia\Biblia 
App\BibliaApp_vz4s30w5_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución para Errores en los Modelos de Datos

Los errores que estás experimentando se deben a que tus modelos de datos (`Libro`, `Capitulo` y `Versiculo`) no tienen definidas todas las propiedades que tu código está intentando usar. Vamos a actualizar cada modelo para incluir las propiedades faltantes.

## 1. Actualizar el modelo Libro

```csharp
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        // Añadir propiedad Id 
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

## 2. Actualizar el modelo Capitulo

```csharp
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Capitulo
    {
        // Añadir propiedad Id
        public int Id { get; set; }
        // Añadir propiedad LibroId para la relación
        public int LibroId { get; set; }
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
```

## 3. Actualizar el modelo Versiculo

```csharp
namespace BibliaApp.Models
{
    public class Versiculo
    {
        // Añadir propiedad Id
        public int Id { get; set; }
        // Añadir propiedad CapituloId para la relación
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
    }
}
```

## 4. Asignar IDs en los datos de prueba

En tu método `CargarDatosDePrueba()` de `BibliaService`, asigna IDs temporales a los objetos:

```csharp
// Dentro del método CargarDatosDePrueba()

// GÉNESIS
var genesis = new Libro { Id = 1, Nombre = "Génesis", Abreviatura = "Gen" };
var genesisC1 = new Capitulo { Id = 1, LibroId = 1, Numero = 1 };
genesisC1.Versiculos.Add(new Versiculo { Id = 1, CapituloId = 1, Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra." });
genesisC1.Versiculos.Add(new Versiculo { Id = 2, CapituloId = 1, Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas." });
genesis.Capitulos.Add(genesisC1);

// Y así con los demás libros...
```

## 5. Corregir el método que causa el error CS0019

En tu clase `GestionVersiculosWindow`, hay un error en la línea 425 donde estás intentando comparar un `int` con un grupo de métodos:

```csharp
// Encuentra esta línea (cerca de la línea 425):
if (candidato.Numero < versiculosRestantes.Count) // Error aquí

// Y reemplázala con:
if (i < versiculosRestantes.Count) // Usar el índice i en lugar de candidato.Numero
```

## 6. Manejar posibles valores nulos

Para los warnings sobre posibles valores nulos, añade comprobaciones:

```csharp
// Por ejemplo, para la línea donde usas _libroSeleccionado:

if (!string.IsNullOrEmpty(_libroSeleccionado)) 
{
    CargarVersiculos(_libroSeleccionado, _capituloSeleccionado);
}
else
{
    // Manejar el caso donde no hay libro seleccionado
    StatusTextBlock.Text = "Por favor, seleccione un libro primero.";
}
```

## 7. Para el error en el método ConexionDB

```csharp
// Alrededor de la línea 338:
string? directoryPath = Path.GetDirectoryName(dbPath);
if (!string.IsNullOrEmpty(directoryPath))
{
    Directory.CreateDirectory(directoryPath);
}
```

Con estas actualizaciones, deberías poder resolver los errores de compilación principales. Si aparecen errores adicionales, revisa los mensajes específicos y aplica soluciones similares donde sea necesario.

RafaelG1986: C:\Biblia\BibliaApp\Models\Libro.cs(5,18): error CS0101: E
l espacio de nombres 'BibliaApp.Models' ya contiene una de 
finición para 'Libro' [C:\Biblia\BibliaApp\BibliaApp_acttj 
dan_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\Capitulo.cs(5,18): error CS0101
: El espacio de nombres 'BibliaApp.Models' ya contiene una 
 definición para 'Capitulo' [C:\Biblia\BibliaApp\BibliaApp 
_acttjdan_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\Versiculo.cs(3,18): error CS010 
1: El espacio de nombres 'BibliaApp.Models' ya contiene un 
a definición para 'Versiculo' [C:\Biblia\BibliaApp\BibliaA 
pp_acttjdan_wpftmp.csproj]

GitHub Copilot: # Solución para Eliminar Archivos de Modelo Duplicados

El error CS0101 indica que sigues teniendo múltiples definiciones de las clases `Libro`, `Capitulo` y `Versiculo`. Este problema puede ocurrir cuando tienes varios archivos con las mismas definiciones de clase en tu proyecto.

## Pasos para eliminar los archivos duplicados

Necesitas encontrar y eliminar todos los archivos duplicados de tus modelos. Ejecuta estos comandos desde PowerShell para encontrar todos los archivos:

```powershell
# En PowerShell, ejecuta esto para ver todos los archivos de modelos que podrían estar duplicados
Get-ChildItem -Path C:\Biblia -Recurse -Include Libro.cs,Capitulo.cs,Versiculo.cs | Select-Object FullName
```

### Solución 1: Eliminar manualmente los archivos duplicados

1. **Identifica qué archivos mantener**:
   - Mantén solo los archivos en la carpeta Models
   - Elimina cualquier otra copia de estos archivos que esté en otras ubicaciones

2. **Archivos a mantener**:
   - Libro.cs
   - Capitulo.cs
   - Versiculo.cs

### Solución 2: Modificar el proyecto para excluir archivos

Si no puedes encontrar o eliminar los archivos duplicados, puedes modificar tu archivo de proyecto para excluir ciertos archivos:

```xml
.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <!-- Excluir archivos duplicados -->
  <ItemGroup>
    <Compile Remove="**\Models\**\*.cs" Exclude="Models\Libro.cs;Models\Capitulo.cs;Models\Versiculo.cs" />
  </ItemGroup>

  <!-- Solo incluir los archivos oficiales -->
  <ItemGroup>
    <Compile Include="Models\Libro.cs" />
    <Compile Include="Models\Capitulo.cs" />
    <Compile Include="Models\Versiculo.cs" />
  </ItemGroup>

</Project>
```

### Solución 3: Crear un proyecto limpio

Si todo lo demás falla, podrías:

1. Crear un nuevo proyecto WPF
2. Copiar solo los archivos necesarios (excluyendo los modelos duplicados)
3. Agregar nuevos archivos de modelo con las definiciones correctas

### Verificar la solución

Después de eliminar los archivos duplicados, asegúrate de que tus definiciones de modelo en los archivos restantes tengan todas las propiedades necesarias:

```csharp
// En Libro.cs:
public int Id { get; set; }

// En Capitulo.cs:
public int Id { get; set; }
public int LibroId { get; set; }

// En Versiculo.cs:
public int Id { get; set; }
public int CapituloId { get; set; }
```

Este tipo de problema es común cuando se trabaja con archivos de código duplicados y puede ser frustrante de resolver. ¡No te desanimes!

Código similar encontrado con 2 tipos de licencias

RafaelG1986: C:\Biblia\BibliaApp\BibliaApp.csproj(20,41): error MSB4066
: No se reconoce el atributo "Exclude" del elemento <Compi
le>.

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección del Archivo de Proyecto para Archivos Duplicados

El error ocurre porque el atributo `Exclude` no funciona en la sintaxis `<Compile Remove>`. Vamos a modificar correctamente el archivo de proyecto:

```xml
\BibliaApp.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <!-- Manejar archivos de modelo -->
  <ItemGroup>
    <!-- Primero eliminar todos los archivos .cs de la carpeta Models excepto los "oficiales" -->
    <Compile Remove="Models\*.cs" />
    
    <!-- Luego incluir específicamente solo los archivos oficiales -->
    <Compile Include="Models\Libro.cs" />
    <Compile Include="Models\Capitulo.cs" />
    <Compile Include="Models\Versiculo.cs" />
    
    <!-- Eliminar posibles duplicados en otras ubicaciones -->
    <Compile Remove="**\Libro.cs" Condition="'%(Directory)' != '$(MSBuildThisFileDirectory)Models\'" />
    <Compile Remove="**\Capitulo.cs" Condition="'%(Directory)' != '$(MSBuildThisFileDirectory)Models\'" />
    <Compile Remove="**\Versiculo.cs" Condition="'%(Directory)' != '$(MSBuildThisFileDirectory)Models\'" />
  </ItemGroup>

</Project>
```

Alternativamente, un enfoque más simple podría ser:

```xml
iaApp.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <!-- Enfoque simple: incluir solo los archivos específicos y excluir el resto -->
  <ItemGroup>
    <!-- Excluir todos los archivos modelo por defecto -->
    <Compile Remove="**\Libro.cs" />
    <Compile Remove="**\Capitulo.cs" />
    <Compile Remove="**\Versiculo.cs" />
    
    <!-- Incluir solo los archivos oficiales -->
    <Compile Include="Models\Libro.cs" />
    <Compile Include="Models\Capitulo.cs" />
    <Compile Include="Models\Versiculo.cs" />
  </ItemGroup>

</Project>
```

Después de hacer estos cambios al archivo de proyecto, también asegúrate de que cada archivo de modelo (Libro.cs, Capitulo.cs, Versiculo.cs) en la carpeta Models contenga las propiedades necesarias:

1. Libro.cs debe tener Id
2. Capitulo.cs debe tener Id y LibroId
3. Versiculo.cs debe tener Id y CapituloId

Esta solución debería permitir que el proyecto compile correctamente al excluir las versiones duplicadas de los archivos de modelo.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\BibliaApp.csproj(29,35): error MSB4190
: La referencia a los metadatos integrados "Directory" en  
la posición 1 no se permite en esta condición "'%(Director 
y)' != '$(MSBuildThisFileDirectory)Models\'".

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Simplificación del Archivo de Proyecto para Eliminar Duplicados

El error actual se debe a una sintaxis incorrecta en la condición de exclusión. Vamos a simplificar el enfoque por completo:

```xml
.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <!-- Enfoque mucho más simple para manejar archivos de modelo -->
  <ItemGroup>
    <!-- Primero excluir todos los archivos modelo de cualquier lugar en el proyecto -->
    <Compile Remove="**\Libro.cs" />
    <Compile Remove="**\Capitulo.cs" />
    <Compile Remove="**\Versiculo.cs" />
    
    <!-- Luego incluir específicamente solo los archivos de la carpeta Models -->
    <Compile Include="Models\Libro.cs" />
    <Compile Include="Models\Capitulo.cs" />
    <Compile Include="Models\Versiculo.cs" />
  </ItemGroup>

</Project>
```

Este enfoque es más simple y directo:

1. Primero excluimos todos los archivos con nombre `Libro.cs`, `Capitulo.cs` y `Versiculo.cs` del proyecto, independientemente de dónde estén.
2. Luego incluimos específicamente solo los archivos de la carpeta `Models`.

La ventaja de este enfoque es que no intenta usar condiciones complejas que pueden causar errores de compilación. Es una solución concisa y debería funcionar sin problemas.

Después de aplicar este cambio, asegúrate de que los archivos en la carpeta `Models` contengan todas las propiedades necesarias (Id, LibroId, CapituloId, etc.).

Código similar encontrado con 2 tipos de licencias

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Models\Libro.cs(5,18): error CS0101: E
l espacio de nombres 'BibliaApp.Models' ya contiene una de 
finición para 'Libro' [C:\Biblia\BibliaApp\BibliaApp_ngdsn 
p2w_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\Capitulo.cs(5,18): error CS0101
: El espacio de nombres 'BibliaApp.Models' ya contiene una 
 definición para 'Capitulo' [C:\Biblia\BibliaApp\BibliaApp 
_ngdsnp2w_wpftmp.csproj]
C:\Biblia\BibliaApp\Models\Versiculo.cs(3,18): error CS010 
1: El espacio de nombres 'BibliaApp.Models' ya contiene un 
a definición para 'Versiculo' [C:\Biblia\BibliaApp\BibliaA 
pp_ngdsnp2w_wpftmp.csproj]

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Enfoque Manual para Eliminar Archivos Duplicados

El error persiste a pesar de nuestros intentos con el archivo .csproj. Necesitamos una solución más directa.

## Solución Manual: Crear Nuevos Archivos y Eliminar los Antiguos

Sigue estos pasos exactamente:

### 1. Cerrar Visual Studio o tu editor

Primero cierra tu IDE para evitar que se bloqueen archivos.

### 2. Eliminar todos los archivos modelo existentes

En PowerShell, ejecuta:

```powershell
# Eliminar todos los archivos de modelo que estén causando los problemas
Get-ChildItem -Path C:\Biblia -Recurse -Include Libro.cs,Capitulo.cs,Versiculo.cs | Remove-Item -Force
```

### 3. Crear nuevos archivos de modelo desde cero

Ahora crea tres archivos nuevos con el contenido correcto:

```powershell
# Crear la carpeta Models si no existe
New-Item -Path C:\Biblia\BibliaApp\Models -ItemType Directory -Force

# Crear Libro.cs
@'
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
'@ | Out-File -FilePath C:\Biblia\BibliaApp\Models\Libro.cs -Encoding utf8

# Crear Capitulo.cs
@'
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int LibroId { get; set; }
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
'@ | Out-File -FilePath C:\Biblia\BibliaApp\Models\Capitulo.cs -Encoding utf8

# Crear Versiculo.cs
@'
namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int CapituloId { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
    }
}
'@ | Out-File -FilePath C:\Biblia\BibliaApp\Models\Versiculo.cs -Encoding utf8
```

### 4. Simplificar tu archivo .csproj

Reemplaza tu archivo .csproj por esta versión simplificada:

```xml
.csproj -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="HtmlAgilityPack" Version="1.12.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2277.86" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.118" />
  </ItemGroup>

  <!-- Eliminar la sección de manejo de modelos -->

</Project>
```

### 5. Limpiar los archivos temporales

```powershell
# Eliminar archivos temporales de compilación
Get-ChildItem -Path C:\Biblia\BibliaApp\obj -Recurse | Remove-Item -Recurse -Force
Get-ChildItem -Path C:\Biblia\BibliaApp\bin -Recurse | Remove-Item -Recurse -Force
```

### 6. Volver a compilar

Ahora ejecuta:

```powershell
cd C:\Biblia\BibliaApp
dotnet build --no-incremental
```

Este enfoque asegura que:
1. Eliminas completamente todos los archivos duplicados
2. Creas nuevos archivos limpios con el contenido correcto
3. Reconstruyes el proyecto desde cero sin usar cachés que podrían estar causando problemas

Si aún persisten los problemas, considera crear un nuevo proyecto desde cero y migrar el código.

Código similar encontrado con 2 tipos de licencias
# Corrección de Errores en MainWindow.xaml

Veo que los principales errores están en el archivo `MainWindow.xaml.cs` que está haciendo referencia a controles de UI que no existen en el archivo XAML correspondiente. Vamos a crear una MainWindow adecuada que incluya todos estos elementos:

```xaml
<!-- filepath: c:\Biblia\BibliaApp\MainWindow.xaml -->
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Biblia App" Height="700" Width="1000"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Menú superior -->
        <Menu Grid.Row="0">
            <MenuItem Header="Archivo">
                <MenuItem Header="Salir" Click="MenuSalir_Click"/>
            </MenuItem>
            <MenuItem Header="Herramientas">
                <MenuItem Header="Buscar Versículo" Click="MenuBuscarVersiculo_Click"/>
                <MenuItem Header="Búsqueda Online" Click="MenuBusquedaOnline_Click"/>
                <MenuItem Header="Mis Marcadores" Click="MenuMarcadores_Click"/>
                <MenuItem Header="Gestionar Versículos" Click="MenuGestionVersiculos_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Panel principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel de navegación -->
            <Grid Grid.Column="0" Margin="10">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Selector de versión -->
                <StackPanel Grid.Row="0" Margin="0,0,0,10">
                    <TextBlock Text="Versión:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <ComboBox x:Name="VersionesComboBox" SelectionChanged="VersionesComboBox_SelectionChanged"/>
                </StackPanel>
                
                <!-- Búsqueda de libro -->
                <StackPanel Grid.Row="1" Margin="0,0,0,10">
                    <TextBlock Text="Buscar libro:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <TextBox x:Name="BusquedaTextBox" TextChanged="BusquedaTextBox_TextChanged"/>
                </StackPanel>
                
                <!-- Lista de libros -->
                <ListBox x:Name="LibrosListBox" Grid.Row="2" Margin="0,0,0,10" 
                         SelectionChanged="LibrosListBox_SelectionChanged"/>
                
                <!-- Selector de capítulo -->
                <StackPanel Grid.Row="3" Margin="0,0,0,10">
                    <TextBlock Text="Capítulo:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <ComboBox x:Name="CapitulosComboBox" SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                </StackPanel>
                
                <!-- Botón para cambiar tema -->
                <Button x:Name="CambiarTemaBtn" Grid.Row="4" Content="Cambiar Tema" 
                        Click="CambiarTemaBtn_Click" Padding="10,5"/>
            </Grid>
            
            <!-- Contenido del capítulo -->
            <ScrollViewer Grid.Column="1" Margin="10">
                <StackPanel x:Name="ContenidoPanel">
                    <TextBlock Text="Selecciona un libro y capítulo para comenzar"
                               FontSize="18" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" Margin="0,50,0,0"/>
                </StackPanel>
            </ScrollViewer>
        </Grid>
        
        <!-- Barra de estado -->
        <StatusBar Grid.Row="2">
            <TextBlock x:Name="StatusText" Text="Listo"/>
        </StatusBar>
    </Grid>
</Window>
```

## Ahora vamos a modificar MarcadoresService para añadir el método CrearMarcador:

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class MarcadoresService
    {
        private readonly string _archivoDatos;
        private List<Marcador> _marcadores = new List<Marcador>();

        public MarcadoresService(string? rutaArchivo = null)
        {
            // Si no se especifica una ruta, usar una predeterminada en AppData
            _archivoDatos = rutaArchivo ?? Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "BibliaApp", 
                "marcadores.json");
                
            // Crear directorio si no existe
            if (_archivoDatos != null)
                Directory.CreateDirectory(Path.GetDirectoryName(_archivoDatos) ?? "");
            
            // Cargar marcadores existentes o crear lista vacía
            CargarMarcadores();
        }

        public List<Marcador> ObtenerTodos()
        {
            return _marcadores.OrderByDescending(m => m.FechaCreacion).ToList();
        }

        public Marcador? ObtenerPorId(int id)
        {
            return _marcadores.FirstOrDefault(m => m.Id == id);
        }

        public List<Marcador> BuscarPorTexto(string texto)
        {
            if (string.IsNullOrWhiteSpace(texto))
                return ObtenerTodos();
                
            texto = texto.ToLowerInvariant();
            
            return _marcadores.Where(m => 
                m.Titulo.ToLowerInvariant().Contains(texto) ||
                m.Notas.ToLowerInvariant().Contains(texto) ||
                m.TextoVersiculo.ToLowerInvariant().Contains(texto) ||
                m.Referencia.ToLowerInvariant().Contains(texto)
            ).ToList();
        }

        // Método añadido para crear un marcador a partir de un versículo seleccionado
        public Marcador CrearMarcador(Versiculo versiculo, string? titulo = null, string? notas = null)
        {
            var marcador = new Marcador
            {
                VersoId = versiculo.Id,
                LibroId = versiculo.CapituloId / 1000, // Asumiendo estructura de IDs
                CapituloId = versiculo.CapituloId,
                NumeroVersiculo = versiculo.Numero,
                TextoVersiculo = versiculo.Texto,
                Titulo = titulo ?? $"Marcador {DateTime.Now.ToString("dd/MM/yyyy HH:mm")}",
                Notas = notas ?? "",
                FechaCreacion = DateTime.Now
            };
            
            return Agregar(marcador);
        }

        public Marcador Agregar(Marcador marcador)
        {
            // Asignar ID único
            marcador.Id = _marcadores.Any() ? _marcadores.Max(m => m.Id) + 1 : 1;
            marcador.FechaCreacion = DateTime.Now;
            
            _marcadores.Add(marcador);
            GuardarMarcadores();
            
            return marcador;
        }

        public void Actualizar(Marcador marcador)
        {
            var existente = _marcadores.FirstOrDefault(m => m.Id == marcador.Id);
            if (existente == null)
                throw new KeyNotFoundException($"No se encontró marcador con ID {marcador.Id}");
                
            // Actualizar propiedades
            var index = _marcadores.IndexOf(existente);
            _marcadores[index] = marcador;
            
            GuardarMarcadores();
        }

        public void Eliminar(int id)
        {
            var marcador = _marcadores.FirstOrDefault(m => m.Id == marcador.Id);
            if (marcador != null)
            {
                _marcadores.Remove(marcador);
                GuardarMarcadores();
            }
        }

        private void CargarMarcadores()
        {
            try
            {
                if (File.Exists(_archivoDatos))
                {
                    string json = File.ReadAllText(_archivoDatos);
                    _marcadores = JsonSerializer.Deserialize<List<Marcador>>(json) ?? new List<Marcador>();
                }
                else
                {
                    _marcadores = new List<Marcador>();
                }
            }
            catch (Exception)
            {
                // Si hay error al cargar, iniciar con lista vacía
                _marcadores = new List<Marcador>();
            }
        }

        private void GuardarMarcadores()
        {
            try
            {
                string json = JsonSerializer.Serialize(_marcadores, new JsonSerializerOptions
                {
                    WriteIndented = true
                });
                File.WriteAllText(_archivoDatos, json);
            }
            catch (Exception ex)
            {
                // En producción, deberías manejar o registrar este error
                Console.WriteLine($"Error al guardar marcadores: {ex.Message}");
                throw;
            }
        }
    }
}
```

## Ahora vamos a crear las clases que faltan:

```csharp
using System;
using System.Windows;
using System.Windows.Controls;
using Microsoft.Web.WebView2.Core;

namespace BibliaApp.Views
{
    public partial class BusquedaOnlineWindow : Window
    {
        public BusquedaOnlineWindow()
        {
            InitializeComponent();
            InitializeAsync();
        }

        private async void InitializeAsync()
        {
            try
            {
                await webView.EnsureCoreWebView2Async();
                webView.CoreWebView2.Navigate("https://www.biblegateway.com/");
                txtUrl.Text = webView.Source?.ToString() ?? "https://www.biblegateway.com/";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al inicializar WebView2: {ex.Message}\n\nAsegúrate de tener WebView2 Runtime instalado.", 
                               "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnNavegar_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(txtUrl.Text))
            {
                string url = txtUrl.Text;
                if (!url.StartsWith("http://") && !url.StartsWith("https://"))
                {
                    url = "https://" + url;
                }
                
                webView.CoreWebView2?.Navigate(url);
            }
        }

        private void webView_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e)
        {
            txtUrl.Text = webView.Source?.ToString() ?? "";
        }

        private void btnAtras_Click(object sender, RoutedEventArgs e)
        {
            if (webView.CoreWebView2?.CanGoBack == true)
            {
                webView.CoreWebView2.GoBack();
            }
        }

        private void btnAdelante_Click(object sender, RoutedEventArgs e)
        {
            if (webView.CoreWebView2?.CanGoForward == true)
            {
                webView.CoreWebView2.GoForward();
            }
        }

        private void btnHome_Click(object sender, RoutedEventArgs e)
        {
            webView.CoreWebView2?.Navigate("https://www.biblegateway.com/");
        }
    }
}
```

```xaml
<!-- filepath: c:\Biblia\BibliaApp\Views\BusquedaOnlineWindow.xaml -->
<Window x:Class="BibliaApp.Views.BusquedaOnlineWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
        Title="Búsqueda Online - Bible Gateway" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Barra de navegación -->
        <Grid Grid.Row="0" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <Button x:Name="btnAtras" Grid.Column="0" Content="⬅️" Click="btnAtras_Click" 
                    Width="40" Margin="0,0,5,0"/>
            <Button x:Name="btnAdelante" Grid.Column="1" Content="➡️" Click="btnAdelante_Click" 
                    Width="40" Margin="0,0,5,0"/>
            <Button x:Name="btnHome" Grid.Column="2" Content="🏠" Click="btnHome_Click" 
                    Width="40" Margin="0,0,5,0"/>
            <TextBox x:Name="txtUrl" Grid.Column="3" Margin="0,0,5,0" Padding="5"/>
            <Button x:Name="btnNavegar" Grid.Column="4" Content="Ir" Click="btnNavegar_Click" 
                    Width="40"/>
        </Grid>
        
        <!-- Contenido Web -->
        <wv2:WebView2 x:Name="webView" Grid.Row="1" 
                     NavigationCompleted="webView_NavigationCompleted"/>
    </Grid>
</Window>
```

```csharp
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionVersiculosWindow : Window
    {
        private ObservableCollection<Versiculo> _versiculosFavoritos = new ObservableCollection<Versiculo>();
        
        public GestionVersiculosWindow()
        {
            InitializeComponent();
            lstVersiculos.ItemsSource = _versiculosFavoritos;
            
            // Cargar datos de ejemplo
            CargarEjemplos();
        }
        
        private void CargarEjemplos()
        {
            // Estos serían reemplazados por versículos cargados de una base de datos
            _versiculosFavoritos.Add(new Versiculo { 
                Id = 1, Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra."
            });
            _versiculosFavoritos.Add(new Versiculo { 
                Id = 2, Numero = 16, Texto = "Porque de tal manera amó Dios al mundo, que ha dado a su Hijo unigénito, para que todo aquel que en él cree, no se pierda, mas tenga vida eterna."
            });
        }

        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            // En una aplicación real, esto buscaría en una base de datos
            MessageBox.Show("Función para agregar versículos aún en desarrollo.", 
                          "En desarrollo", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (lstVersiculos.SelectedItem is Versiculo versiculo)
            {
                var resultado = MessageBox.Show($"¿Estás seguro de eliminar este versículo?\n\n{versiculo.Texto}", 
                                              "Confirmar eliminación", 
                                              MessageBoxButton.YesNo, 
                                              MessageBoxImage.Question);
                                              
                if (resultado == MessageBoxResult.Yes)
                {
                    _versiculosFavoritos.Remove(versiculo);
                }
            }
            else
            {
                MessageBox.Show("Por favor, selecciona un versículo para eliminar.", 
                              "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void btnExportar_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculosFavoritos.Count == 0)
            {
                MessageBox.Show("No hay versículos para exportar.", 
                              "Lista vacía", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            
            MessageBox.Show("Función para exportar versículos aún en desarrollo.", 
                          "En desarrollo", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }
}
```

```xaml
<!-- filepath: c:\Biblia\BibliaApp\Views\GestionVersiculosWindow.xaml -->
<Window x:Class="BibliaApp.Views.GestionVersiculosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Versículos" Height="450" Width="600"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Título y botones superiores -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
            <TextBlock Text="Mis Versículos Favoritos" FontSize="18" FontWeight="Bold" 
                      VerticalAlignment="Center"/>
            <Button x:Name="btnAgregar" Content="Agregar" Margin="20,0,0,0" 
                    Click="btnAgregar_Click" Padding="10,5"/>
        </StackPanel>
        
        <!-- Lista de versículos -->
        <ListView x:Name="lstVersiculos" Grid.Row="1" Margin="0,0,0,10">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <StackPanel Margin="0,5">
                        <TextBlock Text="{Binding Numero, StringFormat={}Versículo {0}}" 
                                  FontWeight="Bold"/>
                        <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                    </StackPanel>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
        
        <!-- Botones inferiores -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="btnExportar" Content="Exportar" Click="btnExportar_Click" 
                    Width="100" Margin="0,0,10,0" Padding="10,5"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Click="btnEliminar_Click" 
                    Width="100" Padding="10,5"/>
        </StackPanel>
    </Grid>
</Window>
```

## Actualizar MarcadoresWindow para incluir el método SeleccionarVersiculo

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class MarcadoresWindow : Window
    {
        private readonly MarcadoresService _marcadoresService;
        private List<Marcador> _marcadores = new List<Marcador>();
        public Versiculo VersiculoSeleccionado { get; private set; }
        public bool VersoSeleccionado { get; private set; }

        public MarcadoresWindow()
        {
            InitializeComponent();
            _marcadoresService = new MarcadoresService();
            CargarMarcadores();
        }

        public MarcadoresWindow(MarcadoresService marcadoresService)
        {
            InitializeComponent();
            _marcadoresService = marcadoresService;
            CargarMarcadores();
        }

        private void CargarMarcadores()
        {
            _marcadores = _marcadoresService.ObtenerTodos();
            lstMarcadores.ItemsSource = _marcadores;
            
            if (_marcadores.Count == 0)
            {
                txtSinMarcadores.Visibility = Visibility.Visible;
            }
            else
            {
                txtSinMarcadores.Visibility = Visibility.Collapsed;
            }
        }

        private void txtBuscar_TextChanged(object sender, TextChangedEventArgs e)
        {
            string filtro = txtBuscar.Text.Trim();
            lstMarcadores.ItemsSource = _marcadoresService.BuscarPorTexto(filtro);
        }

        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            // Esta función se implementaría con un diálogo para seleccionar un versículo
            // y crear un nuevo marcador para él
            MessageBox.Show("Función para agregar marcadores aún no implementada", 
                           "En desarrollo", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (lstMarcadores.SelectedItem is Marcador marcador)
            {
                var resultado = MessageBox.Show(
                    $"¿Estás seguro de eliminar el marcador '{marcador.Titulo}'?",
                    "Confirmar eliminación",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);
                    
                if (resultado == MessageBoxResult.Yes)
                {
                    _marcadoresService.Eliminar(marcador.Id);
                    CargarMarcadores();
                }
            }
            else
            {
                MessageBox.Show("Por favor, selecciona un marcador para eliminar.",
                               "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void btnEditar_Click(object sender, RoutedEventArgs e)
        {
            if (lstMarcadores.SelectedItem is Marcador marcador)
            {
                // Aquí se abriría un diálogo para editar el marcador
                MessageBox.Show("Función para editar marcadores aún no implementada", 
                               "En desarrollo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("Por favor, selecciona un marcador para editar.",
                               "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void btnVerVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (lstMarcadores.SelectedItem is Marcador marcador)
            {
                // Crear un versículo a partir del marcador
                var versiculo = new Versiculo
                {
                    Id = marcador.VersoId,
                    CapituloId = marcador.CapituloId,
                    Numero = marcador.NumeroVersiculo,
                    Texto = marcador.TextoVersiculo
                };
                
                SeleccionarVersiculo(versiculo);
            }
            else
            {
                MessageBox.Show("Por favor, selecciona un marcador para ver el versículo.",
                               "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        // Método para seleccionar un versículo y cerrar el diálogo
        public void SeleccionarVersiculo(Versiculo versiculo)
        {
            VersiculoSeleccionado = versiculo;
            VersoSeleccionado = true;
            DialogResult = true;
        }
    }
}
```

## También actualiza SeleccionVersiculoDialog para corregir los problemas de nulabilidad:

```csharp
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;

namespace BibliaApp.Views
{
    public partial class SeleccionVersiculoDialog : Window
    {
        private IEnumerable<Versiculo> _todosLosVersiculos;
        public Versiculo? VersiculoSeleccionado { get; private set; }

        public SeleccionVersiculoDialog(IEnumerable<Versiculo> listaDeVersiculos)
        {
            InitializeComponent();
            _todosLosVersiculos = listaDeVersiculos;
            lstVersiculos.ItemsSource = _todosLosVersiculos;
        }

        private void btnSeleccionar_Click(object sender, RoutedEventArgs e)
        {
            if (lstVersiculos.SelectedItem != null)
            {
                VersiculoSeleccionado = (Versiculo)lstVersiculos.SelectedItem;
                DialogResult = true;
            }
            else
            {
                MessageBox.Show("Por favor, selecciona un versículo", "Selección requerida", 
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        private void txtBuscar_TextChanged(object sender, TextChangedEventArgs e)
        {
            string filtro = txtBuscar.Text.ToLower();
            
            if (string.IsNullOrWhiteSpace(filtro))
            {
                lstVersiculos.ItemsSource = _todosLosVersiculos;
            }
            else
            {
                lstVersiculos.ItemsSource = _todosLosVersiculos.Where(v => 
                    v.Texto.ToLower().Contains(filtro) || 
                    v.Numero.ToString().Contains(filtro)).ToList();
            }
        }
    }
}
```

Con estas correcciones y adiciones, deberías poder compilar el proyecto sin los errores actuales. Todavía faltaría la implementación completa de la funcionalidad, pero al menos ya tendrías la estructura básica para continuar el desarrollo.

¿Quieres que te ayude con la implementación de alguna funcionalidad específica?

Código similar encontrado con 3 tipos de licencias
RafaelG1986: Bien lee el contexto

GitHub Copilot: # Análisis del Código de BibliaApp

He revisado el código de tu aplicación BibliaApp, que es una aplicación WPF para leer y gestionar versiones de la Biblia. Aquí está mi análisis:

## Estructura general de la aplicación
La aplicación parece tener una arquitectura dividida en:
- **Modelos** (Libro, Capitulo, Versiculo)
- **Vistas** (MainWindow, BusquedaOnlineWindow, GestionVersiculosWindow)
- **Servicios** (BibliaService, MarcadoresService, AlmacenamientoService)

## Funcionalidades implementadas
De lo que puedo ver, la aplicación incluye:
- Navegación por versiones, libros y capítulos de la Biblia
- Búsqueda de texto en versículos
- Marcadores para guardar versículos favoritos
- Búsqueda en línea usando BibleGateway
- Temas claro/oscuro
- Gestión de versículos (añadir, editar, eliminar)

## Problemas principales detectados
El código muestra varios problemas que se han ido solucionando:
1. **Definiciones de clases duplicadas** - Hay varias instancias donde existen duplicados de Libro, Capitulo y Versiculo
2. **Referencias nulas** - Advertencias de nullable types (CS8618, CS8602)
3. **Problemas con WebView2** - Dificultades para integrar el navegador web
4. **Errores en SQLite** - La conexión a la base de datos SQLite parece haber dado problemas
5. **Estructura de proyecto** - Problemas al intentar excluir archivos duplicados del proyecto

## El método de búsqueda
El método `txtBuscar_TextChanged` que se muestra en el archivo es eficiente y conciso:
- Filtra la lista de versículos en tiempo real mientras el usuario escribe
- Permite buscar tanto por texto como por número de versículo
- Restablece la lista completa cuando el campo de búsqueda está vacío

## Recomendaciones
Basándome en el código, recomendaría:
1. **Limpiar los archivos duplicados** - Asegurarte de tener solo una definición de cada modelo
2. **Manejar referencias nulas** - Utilizar `?` para propiedades que puedan ser nulas
3. **Mejorar manejo de errores** - Añadir try/catch para operaciones críticas
4. **Unificar el enfoque de carga de datos** - Decide si usar SQLite o JSON para almacenamiento
5. **Documentar el código** - Añadir comentarios explicativos para facilitar el mantenimiento

¿Hay alguna parte específica del código que te gustaría que analizara en más detalle?

RafaelG1986: Bien, necesito implementar la aplicacion, para escritorio; ahora, quiero que la aplicacion sea programada para ensamblarle funcionalidades, es decir, quiero comenzar por implementar el CRUG de la Aplicacion Biblica, antes de la  busqueda por internet y demas funciones.

GitHub Copilot: # Implementación de CRUD para Aplicación Bíblica

Vamos a implementar el CRUD (Create, Read, Update, Delete) para la aplicación Bíblica, estableciendo los componentes fundamentales antes de añadir funcionalidades más avanzadas.

## 1. Estructura del Proyecto

Primero, organicemos el proyecto con una estructura clara:

```
BibliaApp/
├── Models/           # Clases de datos
├── Services/         # Lógica de negocio y persistencia
├── Views/            # Ventanas y controles de UI
├── App.xaml          # Punto de entrada
└── MainWindow.xaml   # Ventana principal
```

## 2. Definición de Modelos

Vamos a crear los modelos básicos:

```csharp
// Models/VersionBiblia.cs
namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Idioma { get; set; } = string.Empty;
        public List<Libro> Libros { get; set; } = new List<Libro>();
    }
}

// Models/Libro.cs
namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}

// Models/Capitulo.cs
namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}

// Models/Versiculo.cs
namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
    }
}
```

## 3. Implementación del Servicio de Persistencia

Utilizaremos SQLite para almacenar los datos:

```csharp
// Services/BibliaService.cs
using System.Data.SQLite;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private readonly string _dbPath;
        private List<VersionBiblia> _versiones = new List<VersionBiblia>();

        public BibliaService()
        {
            string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string appFolder = Path.Combine(appDataPath, "BibliaApp");
            
            if (!Directory.Exists(appFolder))
                Directory.CreateDirectory(appFolder);
                
            _dbPath = Path.Combine(appFolder, "biblia.db");
            
            // Crear base de datos si no existe
            if (!File.Exists(_dbPath))
                CrearBaseDeDatos();
                
            // Cargar datos
            CargarVersiones();
        }
        
        private void CrearBaseDeDatos()
        {
            SQLiteConnection.CreateFile(_dbPath);
            
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                // Crear tablas
                string crearTablaVersiones = @"
                    CREATE TABLE Versiones (
                        Id TEXT PRIMARY KEY,
                        Nombre TEXT NOT NULL,
                        Idioma TEXT NOT NULL
                    )";
                    
                string crearTablaLibros = @"
                    CREATE TABLE Libros (
                        Id INTEGER PRIMARY KEY,
                        VersionId TEXT NOT NULL,
                        Nombre TEXT NOT NULL,
                        Abreviatura TEXT,
                        FOREIGN KEY (VersionId) REFERENCES Versiones (Id)
                    )";
                
                string crearTablaCapitulos = @"
                    CREATE TABLE Capitulos (
                        Id INTEGER PRIMARY KEY,
                        LibroId INTEGER NOT NULL,
                        Numero INTEGER NOT NULL,
                        FOREIGN KEY (LibroId) REFERENCES Libros (Id)
                    )";
                
                string crearTablaVersiculos = @"
                    CREATE TABLE Versiculos (
                        Id INTEGER PRIMARY KEY,
                        CapituloId INTEGER NOT NULL,
                        Numero INTEGER NOT NULL,
                        Texto TEXT NOT NULL,
                        FOREIGN KEY (CapituloId) REFERENCES Capitulos (Id)
                    )";
                
                using (var comando = new SQLiteCommand(crearTablaVersiones, conexion))
                    comando.ExecuteNonQuery();
                    
                using (var comando = new SQLiteCommand(crearTablaLibros, conexion))
                    comando.ExecuteNonQuery();
                    
                using (var comando = new SQLiteCommand(crearTablaCapitulos, conexion))
                    comando.ExecuteNonQuery();
                    
                using (var comando = new SQLiteCommand(crearTablaVersiculos, conexion))
                    comando.ExecuteNonQuery();
            }
        }
        
        // OPERACIONES CRUD PARA VERSIONES
        
        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }
        
        public VersionBiblia? ObtenerVersion(string id)
        {
            return _versiones.FirstOrDefault(v => v.Id == id);
        }
        
        public void AgregarVersion(VersionBiblia version)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "INSERT INTO Versiones (Id, Nombre, Idioma) VALUES (@Id, @Nombre, @Idioma)";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", version.Id);
                    comando.Parameters.AddWithValue("@Nombre", version.Nombre);
                    comando.Parameters.AddWithValue("@Idioma", version.Idioma);
                    
                    comando.ExecuteNonQuery();
                }
            }
            
            _versiones.Add(version);
        }
        
        public void ActualizarVersion(VersionBiblia version)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "UPDATE Versiones SET Nombre = @Nombre, Idioma = @Idioma WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", version.Id);
                    comando.Parameters.AddWithValue("@Nombre", version.Nombre);
                    comando.Parameters.AddWithValue("@Idioma", version.Idioma);
                    
                    comando.ExecuteNonQuery();
                }
            }
            
            int index = _versiones.FindIndex(v => v.Id == version.Id);
            if (index >= 0)
                _versiones[index] = version;
        }
        
        public void EliminarVersion(string id)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "DELETE FROM Versiones WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", id);
                    comando.ExecuteNonQuery();
                }
            }
            
            _versiones.RemoveAll(v => v.Id == id);
        }
        
        // OPERACIONES CRUD PARA LIBROS
        
        public List<Libro> ObtenerLibros(string versionId)
        {
            var version = ObtenerVersion(versionId);
            return version?.Libros ?? new List<Libro>();
        }
        
        public Libro? ObtenerLibro(int id)
        {
            foreach (var version in _versiones)
            {
                var libro = version.Libros.FirstOrDefault(l => l.Id == id);
                if (libro != null)
                    return libro;
            }
            
            return null;
        }
        
        public void AgregarLibro(string versionId, Libro libro)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = @"
                    INSERT INTO Libros (VersionId, Nombre, Abreviatura) 
                    VALUES (@VersionId, @Nombre, @Abreviatura);
                    SELECT last_insert_rowid();";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@VersionId", versionId);
                    comando.Parameters.AddWithValue("@Nombre", libro.Nombre);
                    comando.Parameters.AddWithValue("@Abreviatura", libro.Abreviatura ?? "");
                    
                    libro.Id = Convert.ToInt32(comando.ExecuteScalar());
                }
            }
            
            var version = ObtenerVersion(versionId);
            if (version != null)
                version.Libros.Add(libro);
        }
        
        public void ActualizarLibro(Libro libro)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "UPDATE Libros SET Nombre = @Nombre, Abreviatura = @Abreviatura WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", libro.Id);
                    comando.Parameters.AddWithValue("@Nombre", libro.Nombre);
                    comando.Parameters.AddWithValue("@Abreviatura", libro.Abreviatura ?? "");
                    
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                int index = version.Libros.FindIndex(l => l.Id == libro.Id);
                if (index >= 0)
                {
                    version.Libros[index] = libro;
                    break;
                }
            }
        }
        
        public void EliminarLibro(int id)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "DELETE FROM Libros WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", id);
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                version.Libros.RemoveAll(l => l.Id == id);
            }
        }
        
        // OPERACIONES CRUD PARA CAPÍTULOS
        
        public List<Capitulo> ObtenerCapitulos(int libroId)
        {
            var libro = ObtenerLibro(libroId);
            return libro?.Capitulos ?? new List<Capitulo>();
        }
        
        public Capitulo? ObtenerCapitulo(int id)
        {
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    var capitulo = libro.Capitulos.FirstOrDefault(c => c.Id == id);
                    if (capitulo != null)
                        return capitulo;
                }
            }
            
            return null;
        }
        
        public void AgregarCapitulo(int libroId, Capitulo capitulo)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = @"
                    INSERT INTO Capitulos (LibroId, Numero) 
                    VALUES (@LibroId, @Numero);
                    SELECT last_insert_rowid();";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@LibroId", libroId);
                    comando.Parameters.AddWithValue("@Numero", capitulo.Numero);
                    
                    capitulo.Id = Convert.ToInt32(comando.ExecuteScalar());
                }
            }
            
            var libro = ObtenerLibro(libroId);
            if (libro != null)
                libro.Capitulos.Add(capitulo);
        }
        
        public void ActualizarCapitulo(Capitulo capitulo)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "UPDATE Capitulos SET Numero = @Numero WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", capitulo.Id);
                    comando.Parameters.AddWithValue("@Numero", capitulo.Numero);
                    
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    int index = libro.Capitulos.FindIndex(c => c.Id == capitulo.Id);
                    if (index >= 0)
                    {
                        libro.Capitulos[index] = capitulo;
                        return;
                    }
                }
            }
        }
        
        public void EliminarCapitulo(int id)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "DELETE FROM Capitulos WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", id);
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    libro.Capitulos.RemoveAll(c => c.Id == id);
                }
            }
        }
        
        // OPERACIONES CRUD PARA VERSÍCULOS
        
        public List<Versiculo> ObtenerVersiculos(int capituloId)
        {
            var capitulo = ObtenerCapitulo(capituloId);
            return capitulo?.Versiculos ?? new List<Versiculo>();
        }
        
        public Versiculo? ObtenerVersiculo(int id)
        {
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    foreach (var capitulo in libro.Capitulos)
                    {
                        var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == id);
                        if (versiculo != null)
                            return versiculo;
                    }
                }
            }
            
            return null;
        }
        
        public void AgregarVersiculo(int capituloId, Versiculo versiculo)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = @"
                    INSERT INTO Versiculos (CapituloId, Numero, Texto) 
                    VALUES (@CapituloId, @Numero, @Texto);
                    SELECT last_insert_rowid();";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@CapituloId", capituloId);
                    comando.Parameters.AddWithValue("@Numero", versiculo.Numero);
                    comando.Parameters.AddWithValue("@Texto", versiculo.Texto);
                    
                    versiculo.Id = Convert.ToInt32(comando.ExecuteScalar());
                }
            }
            
            var capitulo = ObtenerCapitulo(capituloId);
            if (capitulo != null)
                capitulo.Versiculos.Add(versiculo);
        }
        
        public void ActualizarVersiculo(Versiculo versiculo)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "UPDATE Versiculos SET Numero = @Numero, Texto = @Texto WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", versiculo.Id);
                    comando.Parameters.AddWithValue("@Numero", versiculo.Numero);
                    comando.Parameters.AddWithValue("@Texto", versiculo.Texto);
                    
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    foreach (var capitulo in libro.Capitulos)
                    {
                        int index = capitulo.Versiculos.FindIndex(v => v.Id == versiculo.Id);
                        if (index >= 0)
                        {
                            capitulo.Versiculos[index] = versiculo;
                            return;
                        }
                    }
                }
            }
        }
        
        public void EliminarVersiculo(int id)
        {
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                string query = "DELETE FROM Versiculos WHERE Id = @Id";
                
                using (var comando = new SQLiteCommand(query, conexion))
                {
                    comando.Parameters.AddWithValue("@Id", id);
                    comando.ExecuteNonQuery();
                }
            }
            
            foreach (var version in _versiones)
            {
                foreach (var libro in version.Libros)
                {
                    foreach (var capitulo in libro.Capitulos)
                    {
                        capitulo.Versiculos.RemoveAll(v => v.Id == id);
                    }
                }
            }
        }
        
        private void CargarVersiones()
        {
            _versiones.Clear();
            
            using (var conexion = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                conexion.Open();
                
                // Cargar versiones
                using (var comando = new SQLiteCommand("SELECT * FROM Versiones", conexion))
                {
                    using (var reader = comando.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var version = new VersionBiblia
                            {
                                Id = reader["Id"].ToString(),
                                Nombre = reader["Nombre"].ToString(),
                                Idioma = reader["Idioma"].ToString()
                            };
                            
                            _versiones.Add(version);
                        }
                    }
                }
                
                // Cargar libros para cada versión
                foreach (var version in _versiones)
                {
                    using (var comando = new SQLiteCommand("SELECT * FROM Libros WHERE VersionId = @VersionId", conexion))
                    {
                        comando.Parameters.AddWithValue("@VersionId", version.Id);
                        
                        using (var reader = comando.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var libro = new Libro
                                {
                                    Id = Convert.ToInt32(reader["Id"]),
                                    Nombre = reader["Nombre"].ToString(),
                                    Abreviatura = reader["Abreviatura"].ToString()
                                };
                                
                                version.Libros.Add(libro);
                            }
                        }
                    }
                    
                    // Cargar capítulos para cada libro
                    foreach (var libro in version.Libros)
                    {
                        using (var comando = new SQLiteCommand("SELECT * FROM Capitulos WHERE LibroId = @LibroId", conexion))
                        {
                            comando.Parameters.AddWithValue("@LibroId", libro.Id);
                            
                            using (var reader = comando.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    var capitulo = new Capitulo
                                    {
                                        Id = Convert.ToInt32(reader["Id"]),
                                        Numero = Convert.ToInt32(reader["Numero"])
                                    };
                                    
                                    libro.Capitulos.Add(capitulo);
                                }
                            }
                        }
                        
                        // Cargar versículos para cada capítulo
                        foreach (var capitulo in libro.Capitulos)
                        {
                            using (var comando = new SQLiteCommand("SELECT * FROM Versiculos WHERE CapituloId = @CapituloId", conexion))
                            {
                                comando.Parameters.AddWithValue("@CapituloId", capitulo.Id);
                                
                                using (var reader = comando.ExecuteReader())
                                {
                                    while (reader.Read())
                                    {
                                        var versiculo = new Versiculo
                                        {
                                            Id = Convert.ToInt32(reader["Id"]),
                                            Numero = Convert.ToInt32(reader["Numero"]),
                                            Texto = reader["Texto"].ToString()
                                        };
                                        
                                        capitulo.Versiculos.Add(versiculo);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
```

## 4. Ventana Principal para Navegación

```xml
<!-- MainWindow.xaml -->
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Biblia App" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Menú superior -->
        <Menu Grid.Row="0">
            <MenuItem Header="Archivo">
                <MenuItem Header="Salir" Click="MenuSalir_Click"/>
            </MenuItem>
            <MenuItem Header="Editar">
                <MenuItem Header="Agregar Nueva Versión" Click="MenuAgregarVersion_Click"/>
                <MenuItem Header="Gestionar Contenido" Click="MenuGestionarContenido_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Filtros y selección -->
        <Grid Grid.Row="1" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Grid.Column="0" Text="Versión:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <ComboBox Grid.Column="1" x:Name="VersionesComboBox" SelectionChanged="VersionesComboBox_SelectionChanged" Margin="0,0,10,0"/>
            
            <TextBlock Grid.Column="2" Text="Filtrar:" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <TextBox Grid.Column="3" x:Name="FiltroTextBox" TextChanged="FiltroTextBox_TextChanged"/>
        </Grid>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="2" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel izquierdo: Navegación -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" Text="Libros" FontWeight="Bold" Margin="0,0,0,5"/>
                <ListBox Grid.Row="1" x:Name="LibrosListBox" SelectionChanged="LibrosListBox_SelectionChanged" Margin="0,0,0,10"/>
                
                <TextBlock Grid.Row="2" Text="Capítulo" FontWeight="Bold" Margin="0,0,0,5"/>
                <ComboBox Grid.Row="3" x:Name="CapitulosComboBox" SelectionChanged="CapitulosComboBox_SelectionChanged"/>
            </Grid>
            
            <!-- Panel derecho: Contenido del capítulo -->
            <DockPanel Grid.Column="1" Margin="10,0,0,0">
                <TextBlock DockPanel.Dock="Top" x:Name="TituloTextBlock" FontSize="18" FontWeight="Bold" Margin="0,0,0,10"/>
                <ListView x:Name="VersiculosListView">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0"/>
                                <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </DockPanel>
        </Grid>
    </Grid>
</Window>
```

```csharp
// MainWindow.xaml.cs
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
using BibliaApp.Views;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia _versionActual;
        private Libro _libroActual;
        private Capitulo _capituloActual;
        
        public MainWindow()
        {
            InitializeComponent();
            
            _bibliaService = new BibliaService();
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            
            if (versiones.Count > 0)
            {
                VersionesComboBox.SelectedIndex = 0;
            }
            else
            {
                MessageBox.Show("No hay versiones disponibles. Por favor, añada una versión.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void CargarLibros(VersionBiblia version)
        {
            LibrosListBox.ItemsSource = version.Libros;
            LibrosListBox.DisplayMemberPath = "Nombre";
            
            if (version.Libros.Count > 0)
                LibrosListBox.SelectedIndex = 0;
            else
                LimpiarContenido();
        }
        
        private void CargarCapitulos(Libro libro)
        {
            CapitulosComboBox.ItemsSource = libro.Capitulos;
            CapitulosComboBox.DisplayMemberPath = "Numero";
            
            if (libro.Capitulos.Count > 0)
                CapitulosComboBox.SelectedIndex = 0;
            else
                LimpiarContenido();
        }
        
        private void MostrarCapitulo(Capitulo capitulo)
        {
            if (capitulo == null || _libroActual == null)
            {
                LimpiarContenido();
                return;
            }
            
            TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
            VersiculosListView.ItemsSource = capitulo.Versiculos.OrderBy(v => v.Numero).ToList();
        }
        
        private void LimpiarContenido()
        {
            TituloTextBlock.Text = "";
            VersiculosListView.ItemsSource = null;
        }
        
        // Eventos
        
        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionesComboBox.SelectedItem is VersionBiblia version)
            {
                _versionActual = version;
                CargarLibros(version);
            }
        }
        
        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (LibrosListBox.SelectedItem is Libro libro)
            {
                _libroActual = libro;
                CargarCapitulos(libro);
            }
        }
        
        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CapitulosComboBox.SelectedItem is Capitulo capitulo)
            {
                _capituloActual = capitulo;
                MostrarCapitulo(capitulo);
            }
        }
        
        private void FiltroTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_versionActual == null) return;
            
            string filtro = FiltroTextBox.Text.ToLower();
            
            if (string.IsNullOrWhiteSpace(filtro))
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
            }
            else
            {
                LibrosListBox.ItemsSource = _versionActual.Libros
                    .Where(l => l.Nombre.ToLower().Contains(filtro) || 
                                l.Abreviatura.ToLower().Contains(filtro))
                    .ToList();
            }
        }
        
        // Menú
        
        private void MenuSalir_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        
        private void MenuAgregarVersion_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new AgregarVersionWindow(_bibliaService);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                CargarVersiones();
            }
        }
        
        private void MenuGestionarContenido_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new GestionContenidoWindow(_bibliaService);
            ventana.Owner = this;
            ventana.ShowDialog();
            
            // Recargar datos
            CargarVersiones();
        }
    }
}
```

## 5. Ventana para Agregar Versión

```xml
<!-- Views/AgregarVersionWindow.xaml -->
<Window x:Class="BibliaApp.Views.AgregarVersionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Nueva Versión" Height="300" Width="400"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="100"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <TextBlock Grid.Row="0" Grid.Column="0" Text="ID:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="0" Grid.Column="1" x:Name="IdTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="1" Grid.Column="0" Text="Nombre:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="1" Grid.Column="1" x:Name="NombreTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="2" Grid.Column="0" Text="Idioma:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="2" Grid.Column="1" x:Name="IdiomaTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Text="Información adicional:" Margin="0,0,0,5"/>
        <TextBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" x:Name="DescripcionTextBox" AcceptsReturn="True" TextWrapping="Wrap"/>
        
        <StackPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,0">
            <Button Content="Cancelar" Width="100" Click="CancelarButton_Click" Margin="0,0,10,0"/>
            <Button Content="Guardar" Width="100" Click="GuardarButton_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

```csharp
// Views/AgregarVersionWindow.xaml.cs
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarVersionWindow : Window
    {
        private readonly BibliaService _bibliaService;
        
        public AgregarVersionWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
        }
        
        private void GuardarButton_Click(object sender, RoutedEventArgs e)
        {
            if (ValidarFormulario())
            {
                var version = new VersionBiblia
                {
                    Id = IdTextBox.Text.Trim(),
                    Nombre = NombreTextBox.Text.Trim(),
                    Idioma = IdiomaTextBox.Text.Trim()
                };
                
                try
                {
                    _bibliaService.AgregarVersion(version);
                    DialogResult = true;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show($"Error al guardar la versión: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private bool ValidarFormulario()
        {
            if (string.IsNullOrWhiteSpace(IdTextBox.Text))
            {
                MessageBox.Show("El ID es obligatorio.", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                IdTextBox.Focus();
                return false;
            }
            
            if (string.IsNullOrWhiteSpace(NombreTextBox.Text))
            {
                MessageBox.Show("El nombre es obligatorio.", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                NombreTextBox.Focus();
                return false;
            }
            
            if (string.IsNullOrWhiteSpace(IdiomaTextBox.Text))
            {
                MessageBox.Show("El idioma es obligatorio.", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                IdiomaTextBox.Focus();
                return false;
            }
            
            return true;
        }
        
        private void CancelarButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }
    }
}
```

## 6. Ventana para Gestionar Contenido

```xml
<!-- Views/GestionContenidoWindow.xaml -->
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido" Height="600" Width="800"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <TabControl Grid.Row="1">
            <!-- Pestaña de Versiones -->
            <TabItem Header="Versiones">
                <Grid Margin="10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
                        <Button Content="Añadir Versión" Width="120" Click="AgregarVersionBtn_Click"/>
                        <Button Content="Editar Versión" Width="120" Margin="10,0,0,0" Click="EditarVersionBtn_Click"/>
                        <Button Content="Eliminar Versión" Width="120" Margin="10,0,0,0" Click="EliminarVersionBtn_Click"/>
                    </StackPanel>
                    
                    <DataGrid Grid.Row="1" x:Name="VersionesDataGrid" AutoGenerateColumns="False" IsReadOnly="True" SelectionMode="Single">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="100"/>
                            <DataGridTextColumn Header="Nombre" Binding="{Binding Nombre}" Width="*"/>
                            <DataGridTextColumn Header="Idioma" Binding="{Binding Idioma}" Width="150"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            
            <!-- Pestaña de Libros -->
            <TabItem Header="Libros">
                <Grid Margin="10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
                        <TextBlock Text="Versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                        <ComboBox x:Name="VersionesComboBox" Width="200" SelectionChanged="VersionesComboBox_SelectionChanged" 
                                 DisplayMemberPath="Nombre"/>
                    </StackPanel>
                    
                    <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,10">
                        <Button Content="Añadir Libro" Width="120" Click="AgregarLibroBtn_Click"/>
                        <Button Content="Editar Libro" Width="120" Margin="10,0,0,0" Click="EditarLibroBtn_Click"/>
                        <Button Content="Eliminar Libro" Width="120" Margin="10,0,0,0" Click="EliminarLibroBtn_Click"/>
                    </StackPanel>
                    
                    <DataGrid Grid.Row="2" x:Name="LibrosDataGrid" AutoGenerateColumns="False" IsReadOnly="True" SelectionMode="Single">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="100"/>
                            <DataGridTextColumn Header="Nombre" Binding="{Binding Nombre}" Width="*"/>
                            <DataGridTextColumn Header="Abreviatura" Binding="{Binding Abreviatura}" Width="150"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            
            <!-- Pestaña de Capítulos y Versículos -->
            <TabItem Header="Capítulos y Versículos">
                <Grid Margin="10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
                        <TextBlock Text="Versión:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                        <ComboBox x:Name="VersionesCapitulosComboBox" Width="200" Margin="0,0,20,0" 
                                 SelectionChanged="VersionesCapitulosComboBox_SelectionChanged" DisplayMemberPath="Nombre"/>
                        
                        <TextBlock Text="Libro:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                        <ComboBox x:Name="LibrosComboBox" Width="200" 
                                 SelectionChanged="LibrosComboBox_SelectionChanged" DisplayMemberPath="Nombre"/>
                    </StackPanel>
                    
                    <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,10">
                        <Button Content="Añadir Capítulo" Width="120" Click="AgregarCapituloBtn_Click"/>
                        <Button Content="Eliminar Capítulo" Width="120" Margin="10,0,0,0" Click="EliminarCapituloBtn_Click"/>
                    </StackPanel>
                    
                    <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,0,0,10">
                        <TextBlock Text="Capítulo:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                        <ComboBox x:Name="CapitulosComboBox" Width="100" DisplayMemberPath="Numero"
                                 SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                                 
                        <Button Content="Añadir Versículo" Width="120" Margin="20,0,0,0" Click="AgregarVersiculoBtn_Click"/>
                        <Button Content="Editar Versículo" Width="120" Margin="10,0,0,0" Click="EditarVersiculoBtn_Click"/>
                        <Button Content="Eliminar Versículo" Width="120" Margin="10,0,0,0" Click="EliminarVersiculoBtn_Click"/>
                    </StackPanel>
                    
                    <DataGrid Grid.Row="3" x:Name="VersiculosDataGrid" AutoGenerateColumns="False" IsReadOnly="True" SelectionMode="Single">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Número" Binding="{Binding Numero}" Width="70"/>
                            <DataGridTextColumn Header="Texto" Binding="{Binding Texto}" Width="*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
```

```csharp
// Views/GestionContenidoWindow.xaml.cs
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionContenidoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia _versionSeleccionada;
        private Libro _libroSeleccionado;
        private Capitulo _capituloSeleccionado;
        
        public GestionContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesDataGrid.ItemsSource = versiones;
            VersionesComboBox.ItemsSource = versiones;
            VersionesCapitulosComboBox.ItemsSource = versiones;
            
            if (versiones.Count > 0)
            {
                VersionesComboBox.SelectedIndex = 0;
                VersionesCapitulosComboBox.SelectedIndex = 0;
            }
        }
        
        private void CargarLibros(VersionBiblia version)
        {
            LibrosDataGrid.ItemsSource = version.Libros;
            LibrosComboBox.ItemsSource = version.Libros;
            
            if (version.Libros.Count > 0)
                LibrosComboBox.SelectedIndex = 0;
        }
        
        private void CargarCapitulos(Libro libro)
        {
            CapitulosComboBox.ItemsSource = libro.Capitulos;
            
            if (libro.Capitulos.Count > 0)
                CapitulosComboBox.SelectedIndex = 0;
        }
        
        private void CargarVersiculos(Capitulo capitulo)
        {
            if (capitulo != null)
                VersiculosDataGrid.ItemsSource = capitulo.Versiculos.OrderBy(v => v.Numero).ToList();
            else
                VersiculosDataGrid.ItemsSource = null;
        }
        
        #region Eventos de Selección
        
        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionesComboBox.SelectedItem is VersionBiblia version)
            {
                CargarLibros(version);
            }
        }
        
        private void VersionesCapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionesCapitulosComboBox.SelectedItem is VersionBiblia version)
            {
                _versionSeleccionada = version;
                LibrosComboBox.ItemsSource = version.Libros;
                
                if (version.Libros.Count > 0)
                    LibrosComboBox.SelectedIndex = 0;
                else
                {
                    LibrosComboBox.ItemsSource = null;
                    CapitulosComboBox.ItemsSource = null;
                    VersiculosDataGrid.ItemsSource = null;
                }
            }
        }
        
        private void LibrosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (LibrosComboBox.SelectedItem is Libro libro)
            {
                _libroSeleccionado = libro;
                CargarCapitulos(libro);
            }
        }
        
        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CapitulosComboBox.SelectedItem is Capitulo capitulo)
            {
                _capituloSeleccionado = capitulo;
                CargarVersiculos(capitulo);
            }
        }
        
        #endregion
        
        #region Gestión de Versiones
        
        private void AgregarVersionBtn_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new AgregarVersionWindow(_bibliaService);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                CargarVersiones();
            }
        }
        
        private void EditarVersionBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersionesDataGrid.SelectedItem is VersionBiblia version)
            {
                var ventana = new EditarVersionWindow(_bibliaService, version);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true)
                {
                    CargarVersiones();
                }
            }
            else
            {
                MessageBox.Show("Seleccione una versión para editar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EliminarVersionBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersionesDataGrid.SelectedItem is VersionBiblia version)
            {
                var resultado = MessageBox.Show($"¿Está seguro de eliminar la versión '{version.Nombre}'?\n\nEsta acción eliminará todos los libros, capítulos y versículos asociados.", "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarVersion(version.Id);
                        CargarVersiones();
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar la versión: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Seleccione una versión para eliminar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        #endregion
        
        #region Gestión de Libros
        
        private void AgregarLibroBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersionesComboBox.SelectedItem is VersionBiblia version)
            {
                var ventana = new AgregarLibroWindow(_bibliaService, version);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true)
                {
                    CargarLibros(version);
                }
            }
            else
            {
                MessageBox.Show("Seleccione una versión primero.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EditarLibroBtn_Click(object sender, RoutedEventArgs e)
        {
            if (LibrosDataGrid.SelectedItem is Libro libro)
            {
                var ventana = new EditarLibroWindow(_bibliaService, libro);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true)
                {
                    if (VersionesComboBox.SelectedItem is VersionBiblia version)
                        CargarLibros(version);
                }
            }
            else
            {
                MessageBox.Show("Seleccione un libro para editar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EliminarLibroBtn_Click(object sender, RoutedEventArgs e)
        {
            if (LibrosDataGrid.SelectedItem is Libro libro)
            {
                var resultado = MessageBox.Show($"¿Está seguro de eliminar el libro '{libro.Nombre}'?\n\nEsta acción eliminará todos los capítulos y versículos asociados.", "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarLibro(libro.Id);
                        
                        if (VersionesComboBox.SelectedItem is VersionBiblia version)
                            CargarLibros(version);
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar el libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Seleccione un libro para eliminar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        #endregion
        
        #region Gestión de Capítulos
        
        private void AgregarCapituloBtn_Click(object sender, RoutedEventArgs e)
        {
            if (_libroSeleccionado != null)
            {
                var ventana = new AgregarCapituloWindow(_bibliaService, _libroSeleccionado);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true)
                {
                    CargarCapitulos(_libroSeleccionado);
                }
            }
            else
            {
                MessageBox.Show("Seleccione un libro primero.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EliminarCapituloBtn_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado != null)
            {
                var resultado = MessageBox.Show($"¿Está seguro de eliminar el capítulo {_capituloSeleccionado.Numero}?\n\nEsta acción eliminará todos los versículos asociados.", "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarCapitulo(_capituloSeleccionado.Id);
                        
                        if (_libroSeleccionado != null)
                            CargarCapitulos(_libroSeleccionado);
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar el capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Seleccione un capítulo para eliminar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        #endregion
        
        #region Gestión de Versículos
        
        private void AgregarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado != null)
            {
                var ventana = new AgregarVersiculoWindow(_bibliaService, _capituloSeleccionado);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true)
                {
                    CargarVersiculos(_capituloSeleccionado);
                }
            }
            else
            {
                MessageBox.Show("Seleccione un capítulo primero.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EditarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosDataGrid.SelectedItem is Versiculo versiculo)
            {
                var ventana = new EditarVersiculoWindow(_bibliaService, versiculo);
                ventana.Owner = this;
                
                if (ventana.ShowDialog() == true && _capituloSeleccionado != null)
                {
                    CargarVersiculos(_capituloSeleccionado);
                }
            }
            else
            {
                MessageBox.Show("Seleccione un versículo para editar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void EliminarVersiculoBtn_Click(object sender, RoutedEventArgs e)
        {
            if (VersiculosDataGrid.SelectedItem is Versiculo versiculo)
            {
                var resultado = MessageBox.Show($"¿Está seguro de eliminar el versículo {versiculo.Numero}?", "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarVersiculo(versiculo.Id);
                        
                        if (_capituloSeleccionado != null)
                            CargarVersiculos(_capituloSeleccionado);
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar el versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Seleccione un versículo para eliminar.", "Selección requerida", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        #endregion
    }
}
```

## 7. Ventanas adicionales para gestionar libros, capítulos y versículos

```csharp
// Views/AgregarLibroWindow.xaml.cs
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarLibroWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _version;
        
        public AgregarLibroWindow(BibliaService bibliaService, VersionBiblia version)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            _version = version;
            
            Title = $"Agregar Libro a {version.Nombre}";
        }
        
        private void GuardarButton_Click(object sender, RoutedEventArgs e)
        {
            if (ValidarFormulario())
            {
                var libro = new Libro
                {
                    Nombre = NombreTextBox.Text.Trim(),
                    Abreviatura = AbreviaturaTextBox.Text.Trim()
                };
                
                try
                {
                    _bibliaService.AgregarLibro(_version.Id, libro);
                    DialogResult = true;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show($"Error al guardar el libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private bool ValidarFormulario()
        {
            if (string.IsNullOrWhiteSpace(NombreTextBox.Text))
            {
                MessageBox.Show("El nombre es obligatorio.", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                NombreTextBox.Focus();
                return false;
            }
            
            return true;
        }
        
        private void CancelarButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }
    }
}
```

```csharp
// Views/AgregarCapituloWindow.xaml.cs
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarCapituloWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly Libro _libro;
        
        public AgregarCapituloWindow(BibliaService bibliaService, Libro libro)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            _libro = libro;
            
            Title = $"Agregar Capítulo a {libro.Nombre}";
            
            // Sugerir el siguiente número de capítulo
            if (_libro.Capitulos.Count > 0)
            {
                int maxCapitulo = 0;
                foreach (var cap in _libro.Capitulos)
                {
                    if (cap.Numero > maxCapitulo)
                        maxCapitulo = cap.Numero;
                }
                
                NumeroTextBox.Text = (maxCapitulo + 1).ToString();
            }
            else
            {
                NumeroTextBox.Text = "1";
            }
        }
        
        private void GuardarButton_Click(object sender, RoutedEventArgs e)
        {
            if (ValidarFormulario())
            {
                if (int.TryParse(NumeroTextBox.Text, out int// Views/AgregarCapituloWindow.xaml.cs
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarCapituloWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly Libro _libro;
        
        public AgregarCapituloWindow(BibliaService bibliaService, Libro libro)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            _libro = libro;
            
            Title = $"Agregar Capítulo a {libro.Nombre}";
            
            // Sugerir el siguiente número de capítulo
            if (_libro.Capitulos.Count > 0)
            {
                int maxCapitulo = 0;
                foreach (var cap in _libro.Capitulos)
                {
                    if (cap.Numero > maxCapitulo)
                        maxCapitulo = cap.Numero;
                }
                
                NumeroTextBox.Text = (maxCapitulo + 1).ToString();
            }
            else
            {
                NumeroTextBox.Text = "1";
            }
        }
        
        private void GuardarButton_Click(object sender, RoutedEventArgs e)
        {
            if (ValidarFormulario())
            {
                if (int.TryParse(NumeroTextBox.Text, out int

Código similar encontrado con 4 tipos de licencias

RafaelG1986: 6. Ventana para Gestionar Contenido (Este paso quedó cortado).

GitHub Copilot: # Implementación de la Ventana para Gestionar Contenido

Vamos a implementar la ventana de gestión de contenido para manejar libros, capítulos y versículos de la Biblia. Esta ventana será fundamental para completar el CRUD de tu aplicación.

## 1. Creación del archivo XAML

```xaml
<!-- filepath: c:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml -->
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido Bíblico" Height="650" Width="950"
        WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Panel superior con selección y acciones -->
        <Grid Grid.Row="0" Margin="0,0,0,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <StackPanel Grid.Column="0" Orientation="Horizontal">
                <Label Content="Versión:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxVersiones" Width="150" Margin="5,0,15,0" SelectionChanged="cbxVersiones_SelectionChanged"/>
                
                <Label Content="Libro:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxLibros" Width="150" Margin="5,0,15,0" SelectionChanged="cbxLibros_SelectionChanged"/>
                
                <Label Content="Capítulo:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxCapitulos" Width="80" Margin="5,0,0,0" SelectionChanged="cbxCapitulos_SelectionChanged"/>
            </StackPanel>
            
            <StackPanel Grid.Column="1" Orientation="Horizontal">
                <Button x:Name="btnAgregarLibro" Content="Agregar Libro" Width="110" Margin="5,0" Click="btnAgregarLibro_Click"/>
                <Button x:Name="btnAgregarCapitulo" Content="Agregar Capítulo" Width="110" Margin="5,0" Click="btnAgregarCapitulo_Click"/>
            </StackPanel>
        </Grid>
        
        <!-- Panel principal con lista de versículos y acciones -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de versículos -->
            <DockPanel Grid.Column="0">
                <DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
                    <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click" HorizontalAlignment="Right" DockPanel.Dock="Right"/>
                    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
                </DockPanel>
                
                <ListView x:Name="lstVersiculos" SelectionChanged="lstVersiculos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="#" DisplayMemberBinding="{Binding Numero}" Width="50"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="500"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de edición de versículo -->
            <Border Grid.Column="1" BorderBrush="LightGray" BorderThickness="1" Margin="10,0,0,0" Padding="10">
                <StackPanel>
                    <TextBlock Text="Editar Versículo" FontWeight="Bold" Margin="0,0,0,10"/>
                    
                    <Label Content="Número:"/>
                    <TextBox x:Name="txtNumeroVersiculo" Margin="0,0,0,10"/>
                    
                    <Label Content="Texto:"/>
                    <TextBox x:Name="txtTextoVersiculo" TextWrapping="Wrap" AcceptsReturn="True" Height="300" Margin="0,0,0,10"/>
                    
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button x:Name="btnGuardarVersiculo" Content="Guardar" Width="80" Margin="0,0,5,0" Click="btnGuardarVersiculo_Click"/>
                        <Button x:Name="btnEliminarVersiculo" Content="Eliminar" Width="80" Click="btnEliminarVersiculo_Click"/>
                    </StackPanel>
                </StackPanel>
            </Border>
        </Grid>
    </Grid>
</Window>
```

## 2. Creación del archivo CS

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionContenidoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia _versionSeleccionada;
        private Libro _libroSeleccionado;
        private Capitulo _capituloSeleccionado;
        private Versiculo _versiculoSeleccionado;
        
        public GestionContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            
            // Cargar versiones disponibles
            CargarVersiones();
            
            // Estado inicial de los controles
            ActualizarEstadoControles();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            cbxVersiones.ItemsSource = versiones;
            cbxVersiones.DisplayMemberPath = "Nombre";
            cbxVersiones.SelectedValuePath = "Id";
            
            if (versiones.Any())
            {
                cbxVersiones.SelectedIndex = 0;
            }
        }
        
        private void CargarLibros()
        {
            if (_versionSeleccionada != null)
            {
                var libros = _bibliaService.ObtenerLibros(_versionSeleccionada.Id);
                cbxLibros.ItemsSource = libros;
                cbxLibros.DisplayMemberPath = "Nombre";
                cbxLibros.SelectedValuePath = "Id";
                
                if (libros.Any())
                {
                    cbxLibros.SelectedIndex = 0;
                }
                else
                {
                    cbxLibros.ItemsSource = null;
                    cbxCapitulos.ItemsSource = null;
                    lstVersiculos.ItemsSource = null;
                }
            }
        }
        
        private void CargarCapitulos()
        {
            if (_libroSeleccionado != null)
            {
                var capitulos = _bibliaService.ObtenerCapitulos(_versionSeleccionada.Id, _libroSeleccionado.Id);
                cbxCapitulos.ItemsSource = capitulos;
                cbxCapitulos.DisplayMemberPath = "Numero";
                cbxCapitulos.SelectedValuePath = "Id";
                
                if (capitulos.Any())
                {
                    cbxCapitulos.SelectedIndex = 0;
                }
                else
                {
                    cbxCapitulos.ItemsSource = null;
                    lstVersiculos.ItemsSource = null;
                }
            }
        }
        
        private void CargarVersiculos()
        {
            if (_capituloSeleccionado != null)
            {
                var versiculos = _bibliaService.ObtenerVersiculos(_versionSeleccionada.Id, _libroSeleccionado.Id, _capituloSeleccionado.Id);
                lstVersiculos.ItemsSource = versiculos;
                
                if (!versiculos.Any())
                {
                    LimpiarPanelEdicion();
                }
            }
        }
        
        private void ActualizarEstadoControles()
        {
            bool versionSeleccionada = _versionSeleccionada != null;
            bool libroSeleccionado = _libroSeleccionado != null;
            bool capituloSeleccionado = _capituloSeleccionado != null;
            bool versiculoSeleccionado = _versiculoSeleccionado != null;
            
            cbxLibros.IsEnabled = versionSeleccionada;
            cbxCapitulos.IsEnabled = libroSeleccionado;
            
            btnAgregarLibro.IsEnabled = versionSeleccionada;
            btnAgregarCapitulo.IsEnabled = libroSeleccionado;
            btnAgregarVersiculo.IsEnabled = capituloSeleccionado;
            
            // Panel de edición
            txtNumeroVersiculo.IsEnabled = versiculoSeleccionado;
            txtTextoVersiculo.IsEnabled = versiculoSeleccionado;
            btnGuardarVersiculo.IsEnabled = versiculoSeleccionado;
            btnEliminarVersiculo.IsEnabled = versiculoSeleccionado;
        }
        
        private void LimpiarPanelEdicion()
        {
            _versiculoSeleccionado = null;
            txtNumeroVersiculo.Text = string.Empty;
            txtTextoVersiculo.Text = string.Empty;
            ActualizarEstadoControles();
        }
        
        // Eventos de selección
        private void cbxVersiones_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionSeleccionada = cbxVersiones.SelectedItem as VersionBiblia;
            _libroSeleccionado = null;
            _capituloSeleccionado = null;
            
            CargarLibros();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxLibros_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroSeleccionado = cbxLibros.SelectedItem as Libro;
            _capituloSeleccionado = null;
            
            CargarCapitulos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxCapitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloSeleccionado = cbxCapitulos.SelectedItem as Capitulo;
            
            CargarVersiculos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void lstVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versiculoSeleccionado = lstVersiculos.SelectedItem as Versiculo;
            
            if (_versiculoSeleccionado != null)
            {
                txtNumeroVersiculo.Text = _versiculoSeleccionado.Numero.ToString();
                txtTextoVersiculo.Text = _versiculoSeleccionado.Texto;
            }
            else
            {
                LimpiarPanelEdicion();
            }
            
            ActualizarEstadoControles();
        }
        
        // Eventos de botones
        private void btnAgregarLibro_Click(object sender, RoutedEventArgs e)
        {
            var dialogoNombre = new InputDialog("Nombre del libro:", "Agregar Libro");
            if (dialogoNombre.ShowDialog() == true)
            {
                string nombre = dialogoNombre.ResponseText;
                
                var dialogoAbreviatura = new InputDialog("Abreviatura:", "Agregar Libro");
                if (dialogoAbreviatura.ShowDialog() == true)
                {
                    string abreviatura = dialogoAbreviatura.ResponseText;
                    
                    try
                    {
                        var nuevoLibro = new Libro
                        {
                            Nombre = nombre,
                            Abreviatura = abreviatura
                        };
                        
                        _bibliaService.AgregarLibro(_versionSeleccionada.Id, nuevoLibro);
                        CargarLibros();
                        
                        // Seleccionar el nuevo libro
                        cbxLibros.SelectedItem = cbxLibros.Items.Cast<Libro>()
                            .FirstOrDefault(l => l.Nombre == nombre);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }
        
        private void btnAgregarCapitulo_Click(object sender, RoutedEventArgs e)
        {
            var dialogo = new InputDialog("Número de capítulo:", "Agregar Capítulo");
            if (dialogo.ShowDialog() == true)
            {
                if (int.TryParse(dialogo.ResponseText, out int numero))
                {
                    try
                    {
                        var nuevoCapitulo = new Capitulo
                        {
                            Numero = numero,
                            LibroId = _libroSeleccionado.Id
                        };
                        
                        _bibliaService.AgregarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, nuevoCapitulo);
                        CargarCapitulos();
                        
                        // Seleccionar el nuevo capítulo
                        cbxCapitulos.SelectedItem = cbxCapitulos.Items.Cast<Capitulo>()
                            .FirstOrDefault(c => c.Numero == numero);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El número de capítulo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnAgregarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            var numeroDialogo = new InputDialog("Número de versículo:", "Agregar Versículo");
            if (numeroDialogo.ShowDialog() == true)
            {
                if (int.TryParse(numeroDialogo.ResponseText, out int numero))
                {
                    var textoDialogo = new InputDialog("Texto del versículo:", "Agregar Versículo", multiline: true);
                    if (textoDialogo.ShowDialog() == true)
                    {
                        string texto = textoDialogo.ResponseText;
                        
                        try
                        {
                            var nuevoVersiculo = new Versiculo
                            {
                                Numero = numero,
                                Texto = texto,
                                CapituloId = _capituloSeleccionado.Id
                            };
                            
                            _bibliaService.AgregarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                                _capituloSeleccionado.Id, nuevoVersiculo);
                            CargarVersiculos();
                            
                            // Seleccionar el nuevo versículo
                            lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                                .FirstOrDefault(v => v.Numero == numero);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error al agregar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }
                else
                {
                    MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnGuardarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado != null)
            {
                if (int.TryParse(txtNumeroVersiculo.Text, out int numero))
                {
                    try
                    {
                        // Crear una copia del versículo con los cambios
                        var versiculoEditado = new Versiculo
                        {
                            Id = _versiculoSeleccionado.Id,
                            Numero = numero,
                            Texto = txtTextoVersiculo.Text,
                            CapituloId = _capituloSeleccionado.Id
                        };
                        
                        _bibliaService.ActualizarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, versiculoEditado);
                        
                        // Recargar versículos para mostrar los cambios
                        CargarVersiculos();
                        
                        // Mantener seleccionado el versículo editado
                        lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                            .FirstOrDefault(v => v.Id == _versiculoSeleccionado.Id);
                            
                        MessageBox.Show("Versículo actualizado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnEliminarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado != null)
            {
                var resultado = MessageBox.Show($"¿Está seguro de que desea eliminar el versículo {_versiculoSeleccionado.Numero}?", 
                    "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, _versiculoSeleccionado.Id);
                            
                        // Recargar versículos para reflejar la eliminación
                        CargarVersiculos();
                        LimpiarPanelEdicion();
                        
                        MessageBox.Show("Versículo eliminado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }
    }
}
```

## 3. Implementación del diálogo de entrada simple

```csharp
using System.Windows;
using System.Windows.Controls;

namespace BibliaApp.Views
{
    public partial class InputDialog : Window
    {
        public string ResponseText { get; private set; }
        
        public InputDialog(string question, string title, string defaultAnswer = "", bool multiline = false)
        {
            InitializeComponent();
            
            Title = title;
            lblQuestion.Text = question;
            txtResponse.Text = defaultAnswer;
            
            if (multiline)
            {
                txtResponse.AcceptsReturn = true;
                txtResponse.TextWrapping = TextWrapping.Wrap;
                txtResponse.MinHeight = 100;
                txtResponse.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            }
            
            txtResponse.SelectAll();
            txtResponse.Focus();
        }
        
        private void btnDialogOk_Click(object sender, RoutedEventArgs e)
        {
            ResponseText = txtResponse.Text;
            DialogResult = true;
        }
    }
}
```

```xaml
<!-- filepath: c:\Biblia\BibliaApp\Views\InputDialog.xaml -->
<Window x:Class="BibliaApp.Views.InputDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Entrada" 
        SizeToContent="WidthAndHeight" 
        WindowStartupLocation="CenterOwner"
        MinWidth="300">
    <Grid Margin="15">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Label Name="lblQuestion" Grid.Column="1" Margin="0,0,0,5">Pregunta:</Label>
        <TextBox Name="txtResponse" Grid.Column="1" Grid.Row="1" MinWidth="250" Margin="0,0,0,15"/>

        <WrapPanel Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Right">
            <Button Name="btnDialogOk" IsDefault="True" Click="btnDialogOk_Click" MinWidth="60" Margin="0,0,10,0">Aceptar</Button>
            <Button IsCancel="True" MinWidth="60">Cancelar</Button>
        </WrapPanel>
    </Grid>
</Window>
```

## 4. Modificar el BibliaService para soportar operaciones CRUD

Asegúrate de que tu `BibliaService` tenga estos métodos implementados:

```csharp
// Métodos para agregar a BibliaService.cs

public void AgregarLibro(string versionId, Libro libro)
{
    var version = ObtenerVersionPorId(versionId);
    if (version == null)
        throw new Exception($"No se encontró la versión con ID {versionId}");
    
    // Asignar ID al libro
    libro.Id = version.Libros.Count > 0 ? version.Libros.Max(l => l.Id) + 1 : 1;
    
    version.Libros.Add(libro);
    GuardarCambios();
}

public void AgregarCapitulo(string versionId, int libroId, Capitulo capitulo)
{
    var libro = ObtenerLibroPorId(versionId, libroId);
    if (libro == null)
        throw new Exception($"No se encontró el libro con ID {libroId}");
    
    // Asignar ID al capítulo
    capitulo.Id = libro.Capitulos.Count > 0 ? libro.Capitulos.Max(c => c.Id) + 1 : 1;
    capitulo.LibroId = libroId;
    
    libro.Capitulos.Add(capitulo);
    GuardarCambios();
}

public void AgregarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculo)
{
    var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    // Asignar ID al versículo
    versiculo.Id = capitulo.Versiculos.Count > 0 ? capitulo.Versiculos.Max(v => v.Id) + 1 : 1;
    versiculo.CapituloId = capituloId;
    
    capitulo.Versiculos.Add(versiculo);
    GuardarCambios();
}

public void ActualizarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculoActualizado)
{
    var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoActualizado.Id);
    if (versiculo == null)
        throw new Exception($"No se encontró el versículo con ID {versiculoActualizado.Id}");
    
    // Actualizar propiedades
    versiculo.Numero = versiculoActualizado.Numero;
    versiculo.Texto = versiculoActualizado.Texto;
    
    GuardarCambios();
}

public void EliminarVersiculo(string versionId, int libroId, int capituloId, int versiculoId)
{
    var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoId);
    if (versiculo == null)
        throw new Exception($"No se encontró el versículo con ID {versiculoId}");
    
    capitulo.Versiculos.Remove(versiculo);
    GuardarCambios();
}

private void GuardarCambios()
{
    // Guardar cambios en almacenamiento persistente (JSON o SQLite)
    // Asumiendo que tienes un método para guardar los datos
    _almacenamientoService.GuardarDatos();
}
```

## 5. Integración con MainWindow

Para abrir esta ventana desde tu MainWindow, añade un botón o elemento de menú:

```csharp
// En MainWindow.xaml.cs
private void AbrirGestionContenido_Click(object sender, RoutedEventArgs e)
{
    var ventanaGestion = new GestionContenidoWindow(_bibliaService);
    ventanaGestion.Owner = this;
    ventanaGestion.ShowDialog();
    
    // Recargar datos si es necesario después de cerrar la ventana
    CargarDatos();
}
```

## Características clave

1. **Estructura jerárquica**: Permite navegar de versión a libro a capítulo a versículo
2. **Formularios de edición**: Editor dedicado para versículos con validación
3. **Operaciones CRUD completas**:
   - **Create**: Añadir nuevos libros, capítulos y versículos
   - **Read**: Ver todos los libros, capítulos y versículos
   - **Update**: Editar versículos existentes
   - **Delete**: Eliminar versículos no deseados
4. **Interfaz intuitiva**: Controles bien organizados para una experiencia de usuario fluida

Esta implementación proporciona una interfaz completa para gestionar el contenido bíblico, permitiéndote enfocarte en construir la estructura básica antes de añadir funcionalidades más avanzadas como la búsqueda por Internet.

¿Hay alguna funcionalidad específica que quieras que explique con más detalle?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: Ahora quiero ejecutar el codigo

GitHub Copilot: # Correcciones para ejecutar el código correctamente

He detectado algunos errores en tu código que necesitas resolver antes de poder ejecutarlo:

## 1. Corregir el archivo MainWindow.xaml.cs

Tienes un método duplicado (`AbrirGestionContenido_Click`) que está fuera del ámbito de la clase y hace referencia a un método `CargarDatos()` que no existe. Debes eliminar este método duplicado ya que ya tienes `MenuGestionarContenido_Click` que cumple la misma función.

```csharp
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
using BibliaApp.Views;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        // ... Código existente ...
        
        private void MenuGestionarContenido_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new GestionContenidoWindow(_bibliaService);
            ventana.Owner = this;
            ventana.ShowDialog();
            
            // Recargar datos
            CargarVersiones();
        }
    }
}
```

## 2. Comprueba que BibliaService implementa todos los métodos necesarios

Asegúrate de que tu clase `BibliaService` incluye todos estos métodos:

```csharp
// Métodos requeridos para GestionContenidoWindow:
public List<VersionBiblia> ObtenerVersiones()
public List<Libro> ObtenerLibros(string versionId)
public List<Capitulo> ObtenerCapitulos(string versionId, int libroId)
public List<Versiculo> ObtenerVersiculos(string versionId, int libroId, int capituloId)
public void AgregarLibro(string versionId, Libro libro)
public void AgregarCapitulo(string versionId, int libroId, Capitulo capitulo)
public void AgregarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculo)
public void ActualizarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculoActualizado)
public void EliminarVersiculo(string versionId, int libroId, int capituloId, int versiculoId)
```

## 3. Verifica que los archivos XAML están correctamente configurados

Asegúrate de que tienes creados:
- `AgregarVersionWindow.xaml` y su code-behind
- `GestionContenidoWindow.xaml` y su code-behind 
- `InputDialog.xaml` y su code-behind
- `MainWindow.xaml` con los controles apropiados

## 4. Estructura de proyectos y referencias

Asegúrate de que:
1. Has añadido todas las referencias necesarias para `System.Text.Json`
2. Los espacios de nombres en todos los archivos son correctos
3. No hay conflictos de nombres en las clases de modelo (Libro, Capitulo, Versiculo)

## 5. Cómo ejecutar el código

Para ejecutar el código, abre una terminal y navega hasta la carpeta de tu proyecto:

```powershell
cd C:\Biblia\BibliaApp
dotnet run
```

Alternativamente, en Visual Studio:
1. Abre la solución
2. Asegúrate de que el proyecto está configurado como proyecto de inicio
3. Presiona F5 o haz clic en el botón "Ejecutar"

## Problemas comunes y soluciones

1. **Error "No se encontró GestionContenidoWindow"**: Asegúrate de que has creado el archivo `GestionContenidoWindow.xaml` y su code-behind en la carpeta `Views`.

2. **Error "El tipo o nombre del espacio de nombres 'InputDialog' no existe"**: Asegúrate de que has creado el archivo `InputDialog.xaml` y su code-behind.

3. **Error "Múltiples definiciones de clase"**: Verifica que no hay duplicados de tus archivos de modelo.

4. **Error "No se puede convertir implícitamente el tipo..."**: Asegúrate de que las propiedades en tus modelos tienen los tipos correctos.

Si encuentras algún error específico durante la ejecución, por favor compártelo para poder ayudarte con una solución más precisa.

RafaelG1986: Copilot no me permite ingresar  codigo nuevo o editar codigo existente, estan deshabilitados los comandos

GitHub Copilot: # Instrucciones paso a paso para implementar la aplicación de Biblia

Entiendo que no puedes editar el código directamente a través de Copilot. Te proporcionaré instrucciones detalladas para que puedas implementar manualmente los archivos necesarios.

## 1. Primero, asegúrate de tener esta estructura de carpetas:

```
C:\Biblia\BibliaApp\
  ├── Models\
  ├── Services\
  ├── Views\
  └── App.xaml + App.xaml.cs
```

## 2. Crea o modifica los siguientes archivos:

### A. Modelos (si aún no existen)

Crea estos archivos en la carpeta `Models`:

**VersionBiblia.cs**
```csharp
namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
        public string Idioma { get; set; }
        public string? Descripcion { get; set; }
        public List<Libro> Libros { get; set; } = new List<Libro>();
    }
}
```

**Libro.cs**
```csharp
namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Abreviatura { get; set; }
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

**Capitulo.cs**
```csharp
namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public int LibroId { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
```

**Versiculo.cs**
```csharp
namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; }
        public int CapituloId { get; set; }
    }
}
```

### B. Servicios

Crea este archivo en la carpeta `Services`:

**BibliaService.cs**
```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private List<VersionBiblia> _versiones;
        private readonly string _archivoDatos = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "bibliaData.json");
        
        public BibliaService()
        {
            _versiones = CargarDatos();
        }
        
        private List<VersionBiblia> CargarDatos()
        {
            if (File.Exists(_archivoDatos))
            {
                string json = File.ReadAllText(_archivoDatos);
                return JsonSerializer.Deserialize<List<VersionBiblia>>(json) ?? new List<VersionBiblia>();
            }
            
            return new List<VersionBiblia>();
        }
        
        private void GuardarDatos()
        {
            string json = JsonSerializer.Serialize(_versiones, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(_archivoDatos, json);
        }
        
        // Métodos para versiones
        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }
        
        public VersionBiblia ObtenerVersionPorId(string id)
        {
            return _versiones.FirstOrDefault(v => v.Id == id);
        }
        
        public void AgregarVersion(VersionBiblia version)
        {
            if (_versiones.Any(v => v.Id == version.Id))
                throw new Exception($"Ya existe una versión con el ID {version.Id}");
            
            _versiones.Add(version);
            GuardarDatos();
        }
        
        // Métodos para libros
        public List<Libro> ObtenerLibros(string versionId)
        {
            var version = ObtenerVersionPorId(versionId);
            return version?.Libros ?? new List<Libro>();
        }
        
        public Libro ObtenerLibroPorId(string versionId, int libroId)
        {
            var version = ObtenerVersionPorId(versionId);
            return version?.Libros.FirstOrDefault(l => l.Id == libroId);
        }
        
        public void AgregarLibro(string versionId, Libro libro)
        {
            var version = ObtenerVersionPorId(versionId);
            if (version == null)
                throw new Exception($"No se encontró la versión con ID {versionId}");
            
            // Asignar ID al libro
            libro.Id = version.Libros.Count > 0 ? version.Libros.Max(l => l.Id) + 1 : 1;
            
            version.Libros.Add(libro);
            GuardarDatos();
        }
        
        // Métodos para capítulos
        public List<Capitulo> ObtenerCapitulos(string versionId, int libroId)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            return libro?.Capitulos ?? new List<Capitulo>();
        }
        
        public Capitulo ObtenerCapituloPorId(string versionId, int libroId, int capituloId)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            return libro?.Capitulos.FirstOrDefault(c => c.Id == capituloId);
        }
        
        public void AgregarCapitulo(string versionId, int libroId, Capitulo capitulo)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            if (libro == null)
                throw new Exception($"No se encontró el libro con ID {libroId}");
            
            // Asignar ID al capítulo
            capitulo.Id = libro.Capitulos.Count > 0 ? libro.Capitulos.Max(c => c.Id) + 1 : 1;
            capitulo.LibroId = libroId;
            
            libro.Capitulos.Add(capitulo);
            GuardarDatos();
        }
        
        // Métodos para versículos
        public List<Versiculo> ObtenerVersiculos(string versionId, int libroId, int capituloId)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            return capitulo?.Versiculos ?? new List<Versiculo>();
        }
        
        public void AgregarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculo)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            // Asignar ID al versículo
            versiculo.Id = capitulo.Versiculos.Count > 0 ? capitulo.Versiculos.Max(v => v.Id) + 1 : 1;
            versiculo.CapituloId = capituloId;
            
            capitulo.Versiculos.Add(versiculo);
            GuardarDatos();
        }
        
        public void ActualizarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculoActualizado)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoActualizado.Id);
            if (versiculo == null)
                throw new Exception($"No se encontró el versículo con ID {versiculoActualizado.Id}");
            
            // Actualizar propiedades
            versiculo.Numero = versiculoActualizado.Numero;
            versiculo.Texto = versiculoActualizado.Texto;
            
            GuardarDatos();
        }
        
        public void EliminarVersiculo(string versionId, int libroId, int capituloId, int versiculoId)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoId);
            if (versiculo == null)
                throw new Exception($"No se encontró el versículo con ID {versiculoId}");
            
            capitulo.Versiculos.Remove(versiculo);
            GuardarDatos();
        }
    }
}
```

### C. Vistas

**InputDialog.xaml**
```xml
<Window x:Class="BibliaApp.Views.InputDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Entrada" 
        SizeToContent="WidthAndHeight" 
        WindowStartupLocation="CenterOwner"
        MinWidth="300">
    <Grid Margin="15">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Label Name="lblQuestion" Grid.Column="1" Margin="0,0,0,5">Pregunta:</Label>
        <TextBox Name="txtResponse" Grid.Column="1" Grid.Row="1" MinWidth="250" Margin="0,0,0,15"/>

        <WrapPanel Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Right">
            <Button Name="btnDialogOk" IsDefault="True" Click="btnDialogOk_Click" MinWidth="60" Margin="0,0,10,0">Aceptar</Button>
            <Button IsCancel="True" MinWidth="60">Cancelar</Button>
        </WrapPanel>
    </Grid>
</Window>
```

**InputDialog.xaml.cs**
```csharp
using System.Windows;
using System.Windows.Controls;

namespace BibliaApp.Views
{
    public partial class InputDialog : Window
    {
        public string ResponseText { get; private set; }
        
        public InputDialog(string question, string title, string defaultAnswer = "", bool multiline = false)
        {
            InitializeComponent();
            
            Title = title;
            lblQuestion.Text = question;
            txtResponse.Text = defaultAnswer;
            
            if (multiline)
            {
                txtResponse.AcceptsReturn = true;
                txtResponse.TextWrapping = TextWrapping.Wrap;
                txtResponse.MinHeight = 100;
                txtResponse.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            }
            
            txtResponse.SelectAll();
            txtResponse.Focus();
        }
        
        private void btnDialogOk_Click(object sender, RoutedEventArgs e)
        {
            ResponseText = txtResponse.Text;
            DialogResult = true;
        }
    }
}
```

**GestionContenidoWindow.xaml**
```xml
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido Bíblico" Height="650" Width="950"
        WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Panel superior con selección y acciones -->
        <Grid Grid.Row="0" Margin="0,0,0,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <StackPanel Grid.Column="0" Orientation="Horizontal">
                <Label Content="Versión:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxVersiones" Width="150" Margin="5,0,15,0" SelectionChanged="cbxVersiones_SelectionChanged"/>
                
                <Label Content="Libro:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxLibros" Width="150" Margin="5,0,15,0" SelectionChanged="cbxLibros_SelectionChanged"/>
                
                <Label Content="Capítulo:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxCapitulos" Width="80" Margin="5,0,0,0" SelectionChanged="cbxCapitulos_SelectionChanged"/>
            </StackPanel>
            
            <StackPanel Grid.Column="1" Orientation="Horizontal">
                <Button x:Name="btnAgregarLibro" Content="Agregar Libro" Width="110" Margin="5,0" Click="btnAgregarLibro_Click"/>
                <Button x:Name="btnAgregarCapitulo" Content="Agregar Capítulo" Width="110" Margin="5,0" Click="btnAgregarCapitulo_Click"/>
            </StackPanel>
        </Grid>
        
        <!-- Panel principal con lista de versículos y acciones -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de versículos -->
            <DockPanel Grid.Column="0">
                <DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
                    <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click" HorizontalAlignment="Right" DockPanel.Dock="Right"/>
                    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
                </DockPanel>
                
                <ListView x:Name="lstVersiculos" SelectionChanged="lstVersiculos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="#" DisplayMemberBinding="{Binding Numero}" Width="50"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="500"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de edición de versículo -->
            <Border Grid.Column="1" BorderBrush="LightGray" BorderThickness="1" Margin="10,0,0,0" Padding="10">
                <StackPanel>
                    <TextBlock Text="Editar Versículo" FontWeight="Bold" Margin="0,0,0,10"/>
                    
                    <Label Content="Número:"/>
                    <TextBox x:Name="txtNumeroVersiculo" Margin="0,0,0,10"/>
                    
                    <Label Content="Texto:"/>
                    <TextBox x:Name="txtTextoVersiculo" TextWrapping="Wrap" AcceptsReturn="True" Height="300" Margin="0,0,0,10"/>
                    
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button x:Name="btnGuardarVersiculo" Content="Guardar" Width="80" Margin="0,0,5,0" Click="btnGuardarVersiculo_Click"/>
                        <Button x:Name="btnEliminarVersiculo" Content="Eliminar" Width="80" Click="btnEliminarVersiculo_Click"/>
                    </StackPanel>
                </StackPanel>
            </Border>
        </Grid>
    </Grid>
</Window>
```

**GestionContenidoWindow.xaml.cs** 
```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionContenidoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia _versionSeleccionada;
        private Libro _libroSeleccionado;
        private Capitulo _capituloSeleccionado;
        private Versiculo _versiculoSeleccionado;
        
        public GestionContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            
            // Cargar versiones disponibles
            CargarVersiones();
            
            // Estado inicial de los controles
            ActualizarEstadoControles();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            cbxVersiones.ItemsSource = versiones;
            cbxVersiones.DisplayMemberPath = "Nombre";
            cbxVersiones.SelectedValuePath = "Id";
            
            if (versiones.Any())
            {
                cbxVersiones.SelectedIndex = 0;
            }
        }
        
        private void CargarLibros()
        {
            if (_versionSeleccionada != null)
            {
                var libros = _bibliaService.ObtenerLibros(_versionSeleccionada.Id);
                cbxLibros.ItemsSource = libros;
                cbxLibros.DisplayMemberPath = "Nombre";
                cbxLibros.SelectedValuePath = "Id";
                
                if (libros.Any())
                {
                    cbxLibros.SelectedIndex = 0;
                }
                else
                {
                    cbxLibros.ItemsSource = null;
                    cbxCapitulos.ItemsSource = null;
                    lstVersiculos.ItemsSource = null;
                }
            }
        }
        
        private void CargarCapitulos()
        {
            if (_libroSeleccionado != null)
            {
                var capitulos = _bibliaService.ObtenerCapitulos(_versionSeleccionada.Id, _libroSeleccionado.Id);
                cbxCapitulos.ItemsSource = capitulos;
                cbxCapitulos.DisplayMemberPath = "Numero";
                cbxCapitulos.SelectedValuePath = "Id";
                
                if (capitulos.Any())
                {
                    cbxCapitulos.SelectedIndex = 0;
                }
                else
                {
                    cbxCapitulos.ItemsSource = null;
                    lstVersiculos.ItemsSource = null;
                }
            }
        }
        
        private void CargarVersiculos()
        {
            if (_capituloSeleccionado != null)
            {
                var versiculos = _bibliaService.ObtenerVersiculos(_versionSeleccionada.Id, _libroSeleccionado.Id, _capituloSeleccionado.Id);
                lstVersiculos.ItemsSource = versiculos;
                
                if (!versiculos.Any())
                {
                    LimpiarPanelEdicion();
                }
            }
        }
        
        private void ActualizarEstadoControles()
        {
            bool versionSeleccionada = _versionSeleccionada != null;
            bool libroSeleccionado = _libroSeleccionado != null;
            bool capituloSeleccionado = _capituloSeleccionado != null;
            bool versiculoSeleccionado = _versiculoSeleccionado != null;
            
            cbxLibros.IsEnabled = versionSeleccionada;
            cbxCapitulos.IsEnabled = libroSeleccionado;
            
            btnAgregarLibro.IsEnabled = versionSeleccionada;
            btnAgregarCapitulo.IsEnabled = libroSeleccionado;
            btnAgregarVersiculo.IsEnabled = capituloSeleccionado;
            
            // Panel de edición
            txtNumeroVersiculo.IsEnabled = versiculoSeleccionado;
            txtTextoVersiculo.IsEnabled = versiculoSeleccionado;
            btnGuardarVersiculo.IsEnabled = versiculoSeleccionado;
            btnEliminarVersiculo.IsEnabled = versiculoSeleccionado;
        }
        
        private void LimpiarPanelEdicion()
        {
            _versiculoSeleccionado = null;
            txtNumeroVersiculo.Text = string.Empty;
            txtTextoVersiculo.Text = string.Empty;
            ActualizarEstadoControles();
        }
        
        // Eventos de selección
        private void cbxVersiones_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionSeleccionada = cbxVersiones.SelectedItem as VersionBiblia;
            _libroSeleccionado = null;
            _capituloSeleccionado = null;
            
            CargarLibros();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxLibros_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroSeleccionado = cbxLibros.SelectedItem as Libro;
            _capituloSeleccionado = null;
            
            CargarCapitulos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxCapitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloSeleccionado = cbxCapitulos.SelectedItem as Capitulo;
            
            CargarVersiculos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void lstVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versiculoSeleccionado = lstVersiculos.SelectedItem as Versiculo;
            
            if (_versiculoSeleccionado != null)
            {
                txtNumeroVersiculo.Text = _versiculoSeleccionado.Numero.ToString();
                txtTextoVersiculo.Text = _versiculoSeleccionado.Texto;
            }
            else
            {
                LimpiarPanelEdicion();
            }
            
            ActualizarEstadoControles();
        }
        
        // Eventos de botones
        private void btnAgregarLibro_Click(object sender, RoutedEventArgs e)
        {
            var dialogoNombre = new InputDialog("Nombre del libro:", "Agregar Libro");
            if (dialogoNombre.ShowDialog() == true)
            {
                string nombre = dialogoNombre.ResponseText;
                
                var dialogoAbreviatura = new InputDialog("Abreviatura:", "Agregar Libro");
                if (dialogoAbreviatura.ShowDialog() == true)
                {
                    string abreviatura = dialogoAbreviatura.ResponseText;
                    
                    try
                    {
                        var nuevoLibro = new Libro
                        {
                            Nombre = nombre,
                            Abreviatura = abreviatura
                        };
                        
                        _bibliaService.AgregarLibro(_versionSeleccionada.Id, nuevoLibro);
                        CargarLibros();
                        
                        // Seleccionar el nuevo libro
                        cbxLibros.SelectedItem = cbxLibros.Items.Cast<Libro>()
                            .FirstOrDefault(l => l.Nombre == nombre);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }
        
        private void btnAgregarCapitulo_Click(object sender, RoutedEventArgs e)
        {
            var dialogo = new InputDialog("Número de capítulo:", "Agregar Capítulo");
            if (dialogo.ShowDialog() == true)
            {
                if (int.TryParse(dialogo.ResponseText, out int numero))
                {
                    try
                    {
                        var nuevoCapitulo = new Capitulo
                        {
                            Numero = numero,
                            LibroId = _libroSeleccionado.Id
                        };
                        
                        _bibliaService.AgregarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, nuevoCapitulo);
                        CargarCapitulos();
                        
                        // Seleccionar el nuevo capítulo
                        cbxCapitulos.SelectedItem = cbxCapitulos.Items.Cast<Capitulo>()
                            .FirstOrDefault(c => c.Numero == numero);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El número de capítulo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnAgregarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            var numeroDialogo = new InputDialog("Número de versículo:", "Agregar Versículo");
            if (numeroDialogo.ShowDialog() == true)
            {
                if (int.TryParse(numeroDialogo.ResponseText, out int numero))
                {
                    var textoDialogo = new InputDialog("Texto del versículo:", "Agregar Versículo", multiline: true);
                    if (textoDialogo.ShowDialog() == true)
                    {
                        string texto = textoDialogo.ResponseText;
                        
                        try
                        {
                            var nuevoVersiculo = new Versiculo
                            {
                                Numero = numero,
                                Texto = texto,
                                CapituloId = _capituloSeleccionado.Id
                            };
                            
                            _bibliaService.AgregarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                                _capituloSeleccionado.Id, nuevoVersiculo);
                            CargarVersiculos();
                            
                            // Seleccionar el nuevo versículo
                            lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                                .FirstOrDefault(v => v.Numero == numero);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error al agregar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }
                else
                {
                    MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnGuardarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado != null)
            {
                if (int.TryParse(txtNumeroVersiculo.Text, out int numero))
                {
                    try
                    {
                        // Crear una copia del versículo con los cambios
                        var versiculoEditado = new Versiculo
                        {
                            Id = _versiculoSeleccionado.Id,
                            Numero = numero,
                            Texto = txtTextoVersiculo.Text,
                            CapituloId = _capituloSeleccionado.Id
                        };
                        
                        _bibliaService.ActualizarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, versiculoEditado);
                        
                        // Recargar versículos para mostrar los cambios
                        CargarVersiculos();
                        
                        // Mantener seleccionado el versículo editado
                        lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                            .FirstOrDefault(v => v.Id == _versiculoSeleccionado.Id);
                            
                        MessageBox.Show("Versículo actualizado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnEliminarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado != null)
            {
                var resultado = MessageBox.Show($"¿Está seguro de que desea eliminar el versículo {_versiculoSeleccionado.Numero}?", 
                    "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    
                if (resultado == MessageBoxResult.Yes)
                {
                    try
                    {
                        _bibliaService.EliminarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, _versiculoSeleccionado.Id);
                            
                        // Recargar versículos para reflejar la eliminación
                        CargarVersiculos();
                        LimpiarPanelEdicion();
                        
                        MessageBox.Show("Versículo eliminado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al eliminar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }
    }
}
```

**MainWindow.xaml**
```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="BibliaApp" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Menú principal -->
        <Menu Grid.Row="0">
            <MenuItem Header="Archivo">
                <MenuItem x:Name="MenuAgregarVersion" Header="Agregar Versión" Click="MenuAgregarVersion_Click"/>
                <MenuItem x:Name="MenuGestionarContenido" Header="Gestionar Contenido" Click="MenuGestionarContenido_Click"/>
                <Separator/>
                <MenuItem x:Name="MenuSalir" Header="Salir" Click="MenuSalir_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel izquierdo: Versiones y libros -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <ComboBox x:Name="VersionesComboBox" Grid.Row="0" Margin="0,0,0,10" SelectionChanged="VersionesComboBox_SelectionChanged"/>
                
                <Grid Grid.Row="1" Margin="0,0,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" PlaceholderText="Buscar libro..."/>
                </Grid>
                
                <ListBox x:Name="LibrosListBox" Grid.Row="2" SelectionChanged="LibrosListBox_SelectionChanged"/>
            </Grid>
            
            <!-- Panel derecho: Capítulo y versículos -->
            <Grid Grid.Column="1" Margin="10,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <Grid Grid.Row="0" Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <ComboBox x:Name="CapitulosComboBox" Grid.Column="0" Width="60" SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                    <TextBlock x:Name="TituloTextBlock" Grid.Column="1" Margin="10,0,0,0" FontSize="18" VerticalAlignment="Center"/>
                </Grid>
                
                <ListView x:Name="VersiculosListView" Grid.Row="1">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="0,5">
                                <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0" VerticalAlignment="Top"/>
                                <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
        </Grid>
    </Grid>
</Window>
```

### D. Archivo App.xaml (si aún no existe)

Asegúrate de que tu archivo App.xaml tiene el contenido correcto:

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>
```

## 3. Archivo de proyecto

Crea un archivo BibliaApp.csproj en la raíz del proyecto:

```xml
```xml
```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

</Project>
```

## 4. Ejecución del proyecto

Una vez que hayas creado todos estos archivos, ejecuta estos comandos en la terminal:

```
cd C:\Biblia\BibliaApp
dotnet restore
dotnet build
dotnet run
```

Si prefieres usar Visual Studio:
1. Abre la solución
2. Presiona F5 o haz clic en el botón "Ejecutar"

## 5. Primeros pasos

Cuando ejecutes la aplicación por primera vez:
1. No habrá versiones de la Biblia - agrega una usando el menú "Archivo > Agregar Versión"
2. Luego, usa "Archivo > Gestionar Contenido" para añadir libros, capítulos y versículos
3. La interfaz principal te permitirá navegar por el contenido que has creado

¿Necesitas más instrucciones sobre alguna parte específica?

Código similar encontrado con 2 tipos de licencias

RafaelG1986: C:\Biblia\BibliaApp\BibliaApp.csproj(1,1): error MSB4025: No se pudo cargar el archivo del proyecto. Data at the root level is invalid. Line 1, position 1.

Restaurar error con 1 errores en 0.3s

GitHub Copilot: # Corrección del archivo de proyecto XML

El error que estás viendo indica que el archivo XML está malformado. Parece que copiaste mi ejemplo incluyendo los delimitadores de código markdown, que no deberían estar en el archivo real.

## 1. Solución del problema

Edita el archivo BibliaApp.csproj para que contenga exactamente lo siguiente (sin marcas de código ni comentarios):

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

</Project>
```

## 2. Pasos para corregir el archivo

1. **Abre el archivo** con un editor de texto como Notepad, VS Code o Visual Studio
2. **Elimina todo** el contenido actual
3. **Copia y pega** exactamente el XML que te mostré arriba
4. **Guarda el archivo**

## 3. Verificación

Después de guardar, ejecuta este comando para verificar que el proyecto se restaura correctamente:

```powershell
cd C:\Biblia\BibliaApp
dotnet restore
```

Si todo está correcto, deberías ver un mensaje como "La restauración se realizó correctamente".

Este error ocurre porque un archivo de proyecto XML debe contener solamente código XML válido sin ningún comentario de markdown o delimitadores adicionales que puedan haberse incluido al copiar y pegar.

Código similar encontrado con 2 tipos de licencias

RafaelG1986:  C:\Biblia\BibliaApp\MainWindow.xaml(45,126): error MC3072: la 
propiedad 'PlaceholderText' no existe en el espacio de nombres XML 'http://schemas.microsoft.com/winfx/2006/xaml/presentation'. Línea 45, posición 126.

GitHub Copilot: # Corrigiendo el error de PlaceholderText en MainWindow.xaml

El error ocurre porque la propiedad `PlaceholderText` no es estándar en WPF. Necesitamos modificar el TextBox en `MainWindow.xaml` para implementar un placeholder de manera compatible.

## Solución:

Reemplaza la línea 45 en tu archivo `MainWindow.xaml` que contiene:

```xml
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" PlaceholderText="Buscar libro..."/>
```

Con este código que implementa un placeholder utilizando una técnica estándar de WPF:

```xml
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0">
    <TextBox.Style>
        <Style TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <TextBox x:Name="textSource" 
                                     Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     Background="Transparent" 
                                     Panel.ZIndex="2" />
                            <TextBlock Text="Buscar libro..." 
                                       Visibility="{Binding Path=Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Background="Transparent"
                                       Padding="5,2,0,0"
                                       Foreground="Gray"
                                       Panel.ZIndex="1" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </TextBox.Style>
</TextBox>
```

Además, debes agregar el siguiente recurso en la sección `Application.Resources` en tu archivo `App.xaml` para que el convertidor funcione:

```xml
<Application.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
</Application.Resources>
```

## Solución alternativa más sencilla:

Si prefieres una solución más simple, puedes reemplazar la línea problemática con esta alternativa:

```xml
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0"/>
```

Y luego agregar un comentario en el código que indique que el TextBox es para buscar libros, o añadir un TextBlock junto al TextBox con el texto "Buscar libro...".

```xml
<TextBlock Text="Buscar:" VerticalAlignment="Center" Margin="0,0,5,0"/>
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0"/>
```

Esta segunda opción es más simple y directa, aunque no proporciona la funcionalidad de placeholder exactamente como la conocemos en otras plataformas.

¿Cuál de estas opciones prefieres implementar?

RafaelG1986: <TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0">
    <TextBox.Style>
        <Style TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <TextBox x:Name="textSource" 
                                     Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     Background="Transparent" 
                                     Panel.ZIndex="2" />
                            <TextBlock Text="Buscar libro..." 
                                       Visibility="{Binding Path=Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Background="Transparent"
                                       Padding="5,2,0,0"
                                       Foreground="Gray"
                                       Panel.ZIndex="1" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </TextBox.Style>
</TextBox>----------donde lo escribo?

GitHub Copilot: # Instrucciones para implementar el TextBox con placeholder

## Paso 1: Reemplazar el TextBox actual

Debes reemplazar la línea 45 en tu archivo MainWindow.xaml:

```xml
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" PlaceholderText="Buscar libro..."/>
```

Con el código que te proporcioné. Este código debe estar exactamente en la misma posición donde está la línea actual.

## Paso 2: Modificar App.xaml

También necesitas modificar `App.xaml` para añadir el convertidor necesario. Abre el archivo `App.xaml` y modifícalo para que se vea así:

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Application.Resources>
</Application>
```

## Alternativa más sencilla

Si la solución anterior te parece complicada, puedes usar esta alternativa más simple:

```xml
<StackPanel Grid.Column="0" Orientation="Horizontal">
    <TextBlock Text="Buscar:" VerticalAlignment="Center" Margin="0,0,5,0"/>
    <TextBox x:Name="FiltroTextBox" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" Width="180"/>
</StackPanel>
```

Esta opción simplemente añade un TextBlock junto al TextBox para indicar su propósito sin necesidad de implementar un placeholder.

## Comprobación

Después de hacer estos cambios, intenta compilar el proyecto nuevamente con:

```
dotnet build
```

El error relacionado con `PlaceholderText` debería desaparecer.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: C:\Biblia\BibliaApp\MainWindow.xaml(45,126): error MC3072: la 
propiedad 'PlaceholderText' no existe en el espacio de nombres XML 'http://schemas.microsoft.com/winfx/2006/xaml/presentation'. Línea 45, posición 126.

Compilación error con 1 errores en 2.1s

GitHub Copilot: # Solución para eliminar el atributo PlaceholderText

Veo que has actualizado correctamente el archivo App.xaml con el convertidor, pero aún necesitas cambiar el TextBox en `MainWindow.xaml`. El error persiste porque todavía tienes el atributo `PlaceholderText` en la línea 45.

## Instrucciones paso a paso:

1. Abre el archivo `MainWindow.xaml`
2. Localiza la línea 45 (donde se encuentra el TextBox con el atributo PlaceholderText)
3. **Elimina completamente** esta línea:
   ```xml
   <TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" PlaceholderText="Buscar libro..."/>
   ```
4. **Reemplázala** con cualquiera de estas dos opciones:

### Opción 1: TextBox con placeholder avanzado
```xml
<TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0">
    <TextBox.Style>
        <Style TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid>
                            <TextBox x:Name="textSource" 
                                     Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     Background="Transparent" 
                                     Panel.ZIndex="2" />
                            <TextBlock Text="Buscar libro..." 
                                       Visibility="{Binding Path=Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Background="Transparent"
                                       Padding="5,2,0,0"
                                       Foreground="Gray"
                                       Panel.ZIndex="1" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </TextBox.Style>
</TextBox>
```

### Opción 2: Solución simple con etiqueta
```xml
<StackPanel Grid.Column="0" Orientation="Horizontal">
    <TextBlock Text="Buscar:" VerticalAlignment="Center" Margin="0,0,5,0"/>
    <TextBox x:Name="FiltroTextBox" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0" Width="180"/>
</StackPanel>
```

La opción 1 es más sofisticada con un verdadero efecto de placeholder, pero la opción 2 es más simple y directa.

Después de hacer este cambio, vuelve a compilar el proyecto:
```powershell
dotnet build
```

Esto debería resolver el error relacionado con PlaceholderText.

RafaelG1986:  C:\Biblia\BibliaApp\MainWindow.xaml(104,7): error MC3000: el elemento XML 'The 'Window' start tag on line 
1 position 2 does not match the end tag of 'Grid'. Line 104, position 7.' no es válido.

Compilación error con 1 errores en 1.9s------------dame el codigo completo de MainWindow

GitHub Copilot: # Código completo de MainWindow.xaml

Aquí tienes el código completo y corregido para el archivo MainWindow.xaml:

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="BibliaApp" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Menú principal -->
        <Menu Grid.Row="0">
            <MenuItem Header="Archivo">
                <MenuItem x:Name="MenuAgregarVersion" Header="Agregar Versión" Click="MenuAgregarVersion_Click"/>
                <MenuItem x:Name="MenuGestionarContenido" Header="Gestionar Contenido" Click="MenuGestionarContenido_Click"/>
                <Separator/>
                <MenuItem x:Name="MenuSalir" Header="Salir" Click="MenuSalir_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel izquierdo: Versiones y libros -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <ComboBox x:Name="VersionesComboBox" Grid.Row="0" Margin="0,0,0,10" SelectionChanged="VersionesComboBox_SelectionChanged"/>
                
                <Grid Grid.Row="1" Margin="0,0,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="TextBox">
                                            <Grid>
                                                <TextBox x:Name="textSource" 
                                                        Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        Background="Transparent" 
                                                        Panel.ZIndex="2" />
                                                <TextBlock Text="Buscar libro..." 
                                                        Visibility="{Binding Path=Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                        Background="Transparent"
                                                        Padding="5,2,0,0"
                                                        Foreground="Gray"
                                                        Panel.ZIndex="1" />
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </Grid>
                
                <ListBox x:Name="LibrosListBox" Grid.Row="2" SelectionChanged="LibrosListBox_SelectionChanged"/>
            </Grid>
            
            <!-- Panel derecho: Capítulo y versículos -->
            <Grid Grid.Column="1" Margin="10,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <Grid Grid.Row="0" Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <ComboBox x:Name="CapitulosComboBox" Grid.Column="0" Width="60" SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                    <TextBlock x:Name="TituloTextBlock" Grid.Column="1" Margin="10,0,0,0" FontSize="18" VerticalAlignment="Center"/>
                </Grid>
                
                <ListView x:Name="VersiculosListView" Grid.Row="1">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="0,5">
                                <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0" VerticalAlignment="Top"/>
                                <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
        </Grid>
    </Grid>
</Window>
```

El problema estaba en que tenías algunas etiquetas `<Grid>` y `</Grid>` mal alineadas, lo que causaba un desequilibrio en la estructura XML. Este código corregido arregla la estructura anidada de las etiquetas para asegurar que cada apertura tenga su correspondiente cierre en el orden correcto.

Copia este código completo y reemplaza todo el contenido actual de tu archivo MainWindow.xaml.

Código similar encontrado con 1 tipo de licencia

RafaelG1986:     C:\Biblia\BibliaApp\MainWindow.xaml.cs(158,5): error CS1519: El token "}" no es válido en una clase, un registro, una estructura o una declaración de miembro de interfaz
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(169,2): error CS1513: Se esperaba }

Compilación error con 2 errores en 6.1s

GitHub Copilot: # Corrección del código de MainWindow.xaml.cs

Los errores indican problemas con la estructura de llaves en tu archivo MainWindow.xaml.cs. Específicamente hay una llave de cierre adicional y otra faltante.

Aquí está el código corregido para MainWindow.xaml.cs:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
using BibliaApp.Views;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia _versionActual;
        private Libro _libroActual;
        private Capitulo _capituloActual;
        
        public MainWindow()
        {
            InitializeComponent();
            
            // Inicializar servicios
            _bibliaService = new BibliaService();
            
            // Cargar datos iniciales
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            VersionesComboBox.SelectedValuePath = "Id";
            
            if (versiones.Any())
            {
                VersionesComboBox.SelectedIndex = 0;
            }
        }
        
        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionesComboBox.SelectedItem is VersionBiblia version)
            {
                _versionActual = version;
                ActualizarListaLibros();
            }
        }
        
        private void ActualizarListaLibros()
        {
            if (_versionActual != null)
            {
                // Aplicar el filtro actual si existe
                FiltroTextBox_TextChanged(null, null);
            }
        }
        
        private void MostrarCapitulo(Capitulo capitulo)
        {
            if (capitulo != null)
            {
                TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
                
                var versiculos = _bibliaService.ObtenerVersiculos(_versionActual.Id, _libroActual.Id, capitulo.Id);
                VersiculosListView.ItemsSource = versiculos;
            }
            else
            {
                TituloTextBlock.Text = string.Empty;
                VersiculosListView.ItemsSource = null;
            }
        }
        
        private void CargarCapitulos()
        {
            if (_libroActual != null)
            {
                var capitulos = _bibliaService.ObtenerCapitulos(_versionActual.Id, _libroActual.Id);
                CapitulosComboBox.ItemsSource = capitulos;
                CapitulosComboBox.DisplayMemberPath = "Numero";
                CapitulosComboBox.SelectedValuePath = "Id";
                
                if (capitulos.Any())
                {
                    CapitulosComboBox.SelectedIndex = 0;
                }
                else
                {
                    CapitulosComboBox.ItemsSource = null;
                    _capituloActual = null;
                    MostrarCapitulo(null);
                }
            }
        }
        
        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (LibrosListBox.SelectedItem is Libro libro)
            {
                _libroActual = libro;
                CargarCapitulos();
            }
        }
        
        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CapitulosComboBox.SelectedItem is Capitulo capitulo)
            {
                _capituloActual = capitulo;
                MostrarCapitulo(capitulo);
            }
        }
        
        private void FiltroTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_versionActual == null) return;
            
            string filtro = FiltroTextBox.Text.ToLower();
            
            if (string.IsNullOrWhiteSpace(filtro))
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
            }
            else
            {
                LibrosListBox.ItemsSource = _versionActual.Libros
                    .Where(l => l.Nombre.ToLower().Contains(filtro) || 
                                l.Abreviatura.ToLower().Contains(filtro))
                    .ToList();
            }
        }
        
        // Menú
        
        private void MenuSalir_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        
        private void MenuAgregarVersion_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new AgregarVersionWindow(_bibliaService);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                CargarVersiones();
            }
        }
        
        private void MenuGestionarContenido_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new GestionContenidoWindow(_bibliaService);
            ventana.Owner = this;
            ventana.ShowDialog();
            
            // Recargar datos
            CargarVersiones();
        }
    }
}
```

Los principales problemas en tu código original probablemente eran:

1. Una llave de cierre extra `}` en la línea 158
2. Una llave faltante al final del archivo

Este código corregido tiene:
- La clase `MainWindow` completa
- Todos los métodos necesarios para la funcionalidad básica
- Una estructura de llaves correctamente emparejada
- Los manejadores de eventos para todos los controles definidos en el XAML

Reemplaza todo el contenido de tu archivo `MainWindow.xaml.cs` con este código para resolver los errores.

RafaelG1986:  BibliaApp error con 3 errores (1.5s)
    C:\Biblia\BibliaApp\Models\Libro.cs(8,16): error CS0246: El nombre del tipo o del espacio de nombres 'List<>' no se encontró (¿falta una directiva using o una referencia de ensamblado?)
    C:\Biblia\BibliaApp\Models\Capitulo.cs(8,16): error CS0246: El nombre del tipo o del espacio de nombres 'List<>' no se encontró (¿falta una directiva using o una referencia de ensamblado?)
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(9,16): error CS0246: El nombre del tipo o del espacio de nombres 'List<>' no se encontró (¿falta una directiva using o una referencia de ensamblado?)

Compilación error con 3 errores en 2.9s

GitHub Copilot: # Corrección de errores en los modelos

Los errores muestran que falta la directiva `using System.Collections.Generic;` en tus archivos de modelo. Esta directiva es necesaria para utilizar la clase `List<>`.

## Pasos para corregir los errores:

### 1. Corrige el archivo Libro.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Abreviatura { get; set; }
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

### 2. Corrige el archivo Capitulo.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public int LibroId { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
```

### 3. Corrige el archivo VersionBiblia.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; }
        public string Nombre { get; set; }
        public string Idioma { get; set; }
        public string? Descripcion { get; set; }
        public List<Libro> Libros { get; set; } = new List<Libro>();
    }
}
```

## Explicación:

El error ocurre porque estás utilizando la clase genérica `List<>`, que se encuentra en el espacio de nombres `System.Collections.Generic`, pero no has incluido la directiva `using` correspondiente en tus archivos.

La directiva `using System.Collections.Generic;` le indica al compilador dónde buscar la definición de la clase `List<>`.

Después de realizar estos cambios, los errores deberían resolverse y podrás compilar el proyecto correctamente.

RafaelG1986:  BibliaApp error con 1 errores y 29 advertencias (1.3s)
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_versionActual" que no acepta valores NULL debe contener un valor distinto de NULL al 
salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_libroActual" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_capituloActual" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(8,23): warning CS8618: El elemento propiedad "Id" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(9,23): warning CS8618: El elemento propiedad "Nombre" que no acepta valores NULL debe contener un valor distinto de NULL al 
salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(10,23): warning CS8618: El elemento propiedad "Idioma" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\Versiculo.cs(7,23): warning CS8618: El elemento propiedad "Texto" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\Libro.cs(9,23): warning CS8618: El elemento propiedad "Nombre" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Models\Libro.cs(10,23): warning CS8618: El elemento propiedad 
"Abreviatura" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\Views\InputDialog.xaml.cs(15,25): error CS1061: "Label" no contiene una definición para "Text" ni un método de extensión accesible "Text" que acepte un primer argumento del tipo "Label" (¿falta alguna directiva using o una referencia 
de ensamblado?)
    C:\Biblia\BibliaApp\Views\InputDialog.xaml.cs(10,16): warning CS8618: El elemento 
propiedad "ResponseText" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el propiedad como un valor que acepta valores NULL.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(57,43): warning CS8625: No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(57,49): warning CS8625: No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Models\BibliaService.cs(45,20): warning CS8603: Posible tipo de valor devuelto de referencia nulo.
    C:\Biblia\BibliaApp\Models\BibliaService.cs(67,20): warning CS8603: Posible tipo de valor devuelto de referencia nulo.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(93,39): warning CS8625: No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\MainWindow.xaml.cs(94,37): warning CS8625: No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_versionSeleccionada" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el 
modificador "required'"o declarar el campo como un valor que acepta valores NULL.     
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_libroSeleccionado" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.       
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_capituloSeleccionado" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.    
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(19,16): warning CS8618: El elemento campo "_versiculoSeleccionado" que no acepta valores NULL debe contener un 
valor distinto de NULL al salir del constructor. Considere la posibilidad de agregar el modificador "required'"o declarar el campo como un valor que acepta valores NULL.   
    C:\Biblia\BibliaApp\Models\BibliaService.cs(93,20): warning CS8603: Posible tipo de valor devuelto de referencia nulo.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(124,38): warning CS8625: 
No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(133,36): warning CS8601: 
Posible asignación de referencia nula.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(134,34): warning CS8625: 
No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(135,37): warning CS8625: 
No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(144,34): warning CS8601: 
Posible asignación de referencia nula.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(145,37): warning CS8625: 
No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(154,37): warning CS8601: 
Posible asignación de referencia nula.
    C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(163,38): warning CS8601: 
Posible asignación de referencia nula.

Compilación error con 1 errores y 29 advertencias en 2.8s

GitHub Copilot: # Corrección del error en InputDialog.xaml.cs

El error principal está en el archivo `InputDialog.xaml.cs` donde estás intentando establecer la propiedad `Text` en un control `Label`, pero en WPF los controles `Label` usan la propiedad `Content` en lugar de `Text`.

## 1. Corrige el error principal en InputDialog.xaml.cs:

```csharp
using System.Windows;
using System.Windows.Controls;

namespace BibliaApp.Views
{
    public partial class InputDialog : Window
    {
        public string ResponseText { get; private set; } = string.Empty;
        
        public InputDialog(string question, string title, string defaultAnswer = "", bool multiline = false)
        {
            InitializeComponent();
            
            Title = title;
            lblQuestion.Content = question;  // Cambiar Text a Content
            txtResponse.Text = defaultAnswer;
            
            if (multiline)
            {
                txtResponse.AcceptsReturn = true;
                txtResponse.TextWrapping = TextWrapping.Wrap;
                txtResponse.MinHeight = 100;
                txtResponse.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            }
            
            txtResponse.SelectAll();
            txtResponse.Focus();
        }
        
        private void btnDialogOk_Click(object sender, RoutedEventArgs e)
        {
            ResponseText = txtResponse.Text;
            DialogResult = true;
        }
    }
}
```

## 2. Solución para las advertencias de nullability

Para resolver las advertencias de nullability, inicializamos las propiedades que no pueden ser null:

### En los archivos de modelo:

```csharp
// VersionBiblia.cs, Libro.cs, etc.
// Inicializar propiedades string
public string Id { get; set; } = string.Empty;
public string Nombre { get; set; } = string.Empty;
public string Idioma { get; set; } = string.Empty;
```

### Para los campos en MainWindow.xaml.cs:

Hay varias opciones:

```csharp
// Opción 1: Inicializar a null pero declarar como nullable
private VersionBiblia? _versionActual;
private Libro? _libroActual;
private Capitulo? _capituloActual;

// Opción 2: Usar el operador ! cuando sea necesario
if (_versionActual != null) // Verificar antes de usar
```

## 3. Actualización de BibliaApp.csproj para desactivar advertencias temporalmente

Si prefieres enfocarte primero en la funcionalidad y después en las advertencias de nullability, puedes desactivar temporalmente las advertencias:

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWPF>true</UseWPF>
    <!-- Desactivar advertencias de nullability temporalmente -->
    <NoWarn>CS8618;CS8625;CS8603;CS8601</NoWarn>
  </PropertyGroup>

</Project>
```

## 4. Ejecuta el proyecto

Una vez corregido el error principal (cambiando `Text` a `Content` en `InputDialog.xaml.cs`), el proyecto debería compilar y ejecutar correctamente, aunque todavía podrías ver advertencias si no implementas todas las correcciones de nullability o desactivas las advertencias.

La mayoría de las advertencias son relacionadas con la posibilidad de valores null, lo cual no impide que la aplicación funcione, pero es una buena práctica resolverlas para tener un código más robusto.

¿Quieres que te ayude a abordar alguna advertencia específica o prefieres desactivarlas temporalmente para avanzar con la implementación de la aplicación?

RafaelG1986: BibliaApp error con 7 errores (0.5s)
    C:\Biblia\BibliaApp\Models\Capitulo.cs(15,23): error CS0102: El tipo 'Capitulo' ya contiene una definición para 'Id'
    C:\Biblia\BibliaApp\Models\Libro.cs(15,19): error CS0102: El tipo 'Libro' ya contiene una definición para 'Id'
    C:\Biblia\BibliaApp\Models\Libro.cs(16,19): error CS0102: El tipo 'Libro' ya contiene una definición para 'Nombre'
    C:\Biblia\BibliaApp\Models\Versiculo.cs(12,19): error CS0102: El tipo 'Versiculo' 
ya contiene una definición para 'Id'
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(16,19): error CS0102: El tipo 'VersionBiblia' ya contiene una definición para 'Id'
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(17,19): error CS0102: El tipo 'VersionBiblia' ya contiene una definición para 'Nombre'
    C:\Biblia\BibliaApp\Models\VersionBiblia.cs(18,19): error CS0102: El tipo 'VersionBiblia' ya contiene una definición para 'Idioma'

Compilación error con 7 errores en 2.2s

GitHub Copilot: # Corrección de errores por definiciones duplicadas en modelos

Tienes varios errores porque has duplicado propiedades en tus clases de modelo. Veo que has añadido propiedades como `Id`, `Nombre` e `Idioma` en todos los modelos cuando solo debían modificarse las existentes.

## 1. Corrige el archivo Versiculo.cs:

```csharp
using System;

namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        public int CapituloId { get; set; }
    }
}
```

## 2. Corrige el archivo Libro.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

## 3. Corrige el archivo Capitulo.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public int LibroId { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
```

## 4. Corrige el archivo VersionBiblia.cs:

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Idioma { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public List<Libro> Libros { get; set; } = new List<Libro>();
    }
}
```

## Explicación del problema:

El error ocurrió porque copiaste un bloque de código que contenía declaraciones de propiedades (como parte de la inicialización de strings para evitar valores nulos) directamente en todas las clases, en lugar de modificar las propiedades existentes.

Por ejemplo, en Versiculo.cs tenías:
```csharp
public int Id { get; set; }  // Propiedad original
// ...
public string Id { get; set; } = string.Empty;  // Propiedad duplicada, con tipo diferente
```

Cuando lo correcto era simplemente inicializar las propiedades string existentes añadiendo `= string.Empty` a las declaraciones originales.

Con estos cambios, las duplicaciones se eliminarán y el código debería compilar correctamente.

RafaelG1986: no carga los botones ni la lista: no se ve el texto y el contenido

GitHub Copilot: # Solución para problemas de visualización en la interfaz

Si la aplicación arranca pero no puedes ver el contenido, los botones o listas, hay varios problemas posibles. Vamos a abordarlos uno por uno:

## 1. Corrige la estructura del archivo Versiculo.cs

Primero, corrige la estructura de tu archivo Versiculo.cs ) que tiene llaves desalineadas:

```csharp
using System;

namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        public int CapituloId { get; set; }
    }
}
```

## 2. Problemas comunes de visualización en WPF

### Problemas de DataContext

Asegúrate de que estás configurando el DataContext correctamente en tu MainWindow:

```csharp
// En MainWindow.xaml.cs, método CargarVersiones()
if (versiones.Any())
{
    VersionesComboBox.SelectedIndex = 0;
    // Importante: ejecutar el manejador manualmente si es necesario
    VersionesComboBox_SelectionChanged(VersionesComboBox, null);
}
```

### Colores de texto invisibles

A veces el texto aparece invisible porque el color del texto y el fondo son iguales:

```xaml
<!-- Añade esto a tus TextBlock o Label para asegurar visibilidad -->
<TextBlock Text="Ejemplo" Foreground="Black" />
```

### Verifica la inicialización

Asegúrate de que estás inicializando correctamente la UI en el constructor:

```csharp
public MainWindow()
{
    InitializeComponent();
    
    // IMPORTANTE: Inicializar servicios antes de cargar datos
    _bibliaService = new BibliaService();
    
    // Debug para verificar conexión con los datos
    Console.WriteLine($"Versiones cargadas: {_bibliaService.ObtenerVersiones().Count}");
    
    // Cargar datos iniciales
    CargarVersiones();
}
```

## 3. Solución: Añadir datos de prueba

Puedes añadir datos de prueba para verificar si el problema está en los datos o en la UI:

```csharp
// Añade esto al final del constructor de BibliaService si no hay datos
if (!_versiones.Any())
{
    // Crear datos de prueba
    var versionPrueba = new VersionBiblia
    {
        Id = "RVR1960",
        Nombre = "Reina Valera 1960",
        Idioma = "Español"
    };
    
    var libroGenesis = new Libro
    {
        Id = 1,
        Nombre = "Génesis",
        Abreviatura = "Gn"
    };
    
    var capitulo1 = new Capitulo
    {
        Id = 1,
        Numero = 1,
        LibroId = 1
    };
    
    var versiculo1 = new Versiculo
    {
        Id = 1,
        Numero = 1,
        Texto = "En el principio creó Dios los cielos y la tierra.",
        CapituloId = 1
    };
    
    capitulo1.Versiculos.Add(versiculo1);
    libroGenesis.Capitulos.Add(capitulo1);
    versionPrueba.Libros.Add(libroGenesis);
    _versiones.Add(versionPrueba);
    
    GuardarDatos();
    Console.WriteLine("Datos de prueba generados.");
}
```

## 4. Depuración con trazas

Añade este código al inicio de los métodos clave para verificar si están siendo llamados:

```csharp
private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    Console.WriteLine("VersionesComboBox_SelectionChanged llamado");
    if (VersionesComboBox.SelectedItem is VersionBiblia version)
    {
        Console.WriteLine($"Versión seleccionada: {version.Nombre}");
        _versionActual = version;
        ActualizarListaLibros();
    }
}
```

## 5. Verifica el diseño visual (Layout)

Asegúrate de que tus columnas y filas tienen el tamaño adecuado:

```xaml
<!-- En tu MainWindow.xaml, asegúrate de que las columnas tienen ancho suficiente -->
<Grid.ColumnDefinitions>
    <ColumnDefinition Width="250" MinWidth="150"/>
    <ColumnDefinition Width="*"/>
</Grid.ColumnDefinitions>
```

## 6. Revisa la solución

Comprueba que todos tus archivos estén correctamente incluidos en el proyecto:

```
dotnet build --verbosity detailed
```

Este comando te mostrará información detallada sobre la compilación, incluyendo qué archivos se están incluyendo.

¿Podrías compartir más detalles sobre los síntomas exactos que estás viendo? ¿La ventana aparece pero está vacía, o algunos elementos aparecen pero otros no?

RafaelG1986: C:\Biblia\BibliaApp\MainWindow.xaml.cs(65,43): warning CS8602: Desreferencia de una referencia posiblemente NULL.
C:\Biblia\BibliaApp\MainWindow.xaml.cs(67,67): warning CS8602: Desreferencia de una referencia posiblemente NULL.
C:\Biblia\BibliaApp\MainWindow.xaml.cs(81,65): warning CS8602: Desreferencia de una referencia posiblemente NULL.

GitHub Copilot: # Solución para los problemas de visualización y advertencias de null

Los problemas que estás experimentando se deben principalmente a las advertencias de referencia null. Aunque son advertencias (no errores), pueden causar problemas en tiempo de ejecución. Vamos a solucionarlos:

## 1. Corrige el archivo MainWindow.xaml.cs

Añade estas comprobaciones null para resolver las advertencias:

```csharp
// En MainWindow.xaml.cs

private void ActualizarListaLibros()
{
    if (_versionActual == null) return;
    
    // Aplicar el filtro actual si existe
    FiltroTextBox_TextChanged(null, null);
}

private void FiltroTextBox_TextChanged(object sender, TextChangedEventArgs e)
{
    if (_versionActual == null || _versionActual.Libros == null) return;
    
    string filtro = FiltroTextBox?.Text?.ToLower() ?? string.Empty;
    
    if (string.IsNullOrWhiteSpace(filtro))
    {
        LibrosListBox.ItemsSource = _versionActual.Libros;
    }
    else
    {
        LibrosListBox.ItemsSource = _versionActual.Libros
            .Where(l => (l.Nombre?.ToLower()?.Contains(filtro) ?? false) || 
                        (l.Abreviatura?.ToLower()?.Contains(filtro) ?? false))
            .ToList();
    }
}

private void MostrarCapitulo(Capitulo capitulo)
{
    if (_libroActual == null) return;
    
    if (capitulo != null)
    {
        TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
        
        var versiculos = _bibliaService.ObtenerVersiculos(_versionActual?.Id ?? string.Empty, _libroActual.Id, capitulo.Id);
        VersiculosListView.ItemsSource = versiculos;
    }
    else
    {
        TituloTextBlock.Text = string.Empty;
        VersiculosListView.ItemsSource = null;
    }
}
```

## 2. Agrega datos de prueba para verificar la UI

Agrega este método en BibliaService.cs e invócalo desde el constructor:

```csharp
private void CrearDatosDePrueba()
{
    if (_versiones.Count > 0) return;  // Solo si no hay datos
    
    var versionPrueba = new VersionBiblia
    {
        Id = "RVR1960",
        Nombre = "Reina Valera 1960",
        Idioma = "Español",
        Descripcion = "Versión clásica española"
    };
    
    var libroGenesis = new Libro
    {
        Id = 1,
        Nombre = "Génesis",
        Abreviatura = "Gn"
    };
    
    var capitulo1 = new Capitulo
    {
        Id = 1,
        Numero = 1,
        LibroId = libroGenesis.Id
    };
    
    // Agregar algunos versículos
    capitulo1.Versiculos.Add(new Versiculo { Id = 1, Numero = 1, Texto = "En el principio creó Dios los cielos y la tierra.", CapituloId = capitulo1.Id });
    capitulo1.Versiculos.Add(new Versiculo { Id = 2, Numero = 2, Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas.", CapituloId = capitulo1.Id });
    
    libroGenesis.Capitulos.Add(capitulo1);
    versionPrueba.Libros.Add(libroGenesis);
    _versiones.Add(versionPrueba);
    
    GuardarDatos();
}

// En el constructor de BibliaService:
public BibliaService()
{
    _versiones = CargarDatos();
    CrearDatosDePrueba(); // Agregar datos de prueba si no hay ninguno
}
```

## 3. Mejora la visualización de los ListBox

Añade DisplayMemberPath en los ListBox para mostrar correctamente los elementos:

```xaml
<!-- En MainWindow.xaml -->
<ListBox x:Name="LibrosListBox" Grid.Row="2" SelectionChanged="LibrosListBox_SelectionChanged" 
         DisplayMemberPath="Nombre" />
```

## 4. Usa el modo de depuración para identificar problemas

Añade código de depuración para verificar que los datos se están cargando:

```csharp
// En MainWindow.cs, método CargarVersiones()
private void CargarVersiones()
{
    var versiones = _bibliaService.ObtenerVersiones();
    Console.WriteLine($"Versiones cargadas: {versiones.Count}");
    
    VersionesComboBox.ItemsSource = versiones;
    VersionesComboBox.DisplayMemberPath = "Nombre";
    VersionesComboBox.SelectedValuePath = "Id";
    
    if (versiones.Any())
    {
        Console.WriteLine($"Primera versión: {versiones[0].Nombre}");
        VersionesComboBox.SelectedIndex = 0;
    }
    else
    {
        Console.WriteLine("No hay versiones disponibles");
    }
}
```

## 5. Verifica que BibliaService guarde y cargue datos correctamente

Asegúrate de que BibliaService esté configurado para guardar y cargar datos en una ubicación accesible:

```csharp
// Modificar la ruta de datos en BibliaService.cs
private readonly string _archivoDatos = Path.Combine(
    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), 
    "BibliaApp", 
    "bibliaData.json");

// Asegurarte de que el directorio existe
public BibliaService()
{
    Directory.CreateDirectory(Path.GetDirectoryName(_archivoDatos));
    _versiones = CargarDatos();
    CrearDatosDePrueba();
}
```

## 6. Verifica el tema visual y los colores

```xaml
<!-- En App.xaml -->
<Application.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <SolidColorBrush x:Key="TextBrush" Color="Black"/>
</Application.Resources>

<!-- En MainWindow.xaml -->
<TextBlock Foreground="{StaticResource TextBrush}" ... />
```

Estos cambios deberían resolver tus problemas con:
- Las advertencias de posibles referencias null
- La visibilidad de los elementos en la UI
- La carga inicial de datos para probar la aplicación

Si sigues teniendo problemas específicos, por favor proporciona más detalles sobre lo que estás viendo exactamente.

RafaelG1986: [{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'InitializeComponent' no existe en el contexto actual",
	"startLineNumber": 22,
	"startColumn": 13,
	"endLineNumber": 22,
	"endColumn": 32
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersionesComboBox' no existe en el contexto actual",
	"startLineNumber": 36,
	"startColumn": 13,
	"endLineNumber": 36,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersionesComboBox' no existe en el contexto actual",
	"startLineNumber": 37,
	"startColumn": 13,
	"endLineNumber": 37,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersionesComboBox' no existe en el contexto actual",
	"startLineNumber": 38,
	"startColumn": 13,
	"endLineNumber": 38,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersionesComboBox' no existe en el contexto actual",
	"startLineNumber": 43,
	"startColumn": 17,
	"endLineNumber": 43,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersionesComboBox' no existe en el contexto actual",
	"startLineNumber": 53,
	"startColumn": 17,
	"endLineNumber": 53,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'TituloTextBlock' no existe en el contexto actual",
	"startLineNumber": 74,
	"startColumn": 17,
	"endLineNumber": 74,
	"endColumn": 32
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersiculosListView' no existe en el contexto actual",
	"startLineNumber": 77,
	"startColumn": 17,
	"endLineNumber": 77,
	"endColumn": 35
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'TituloTextBlock' no existe en el contexto actual",
	"startLineNumber": 81,
	"startColumn": 17,
	"endLineNumber": 81,
	"endColumn": 32
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'VersiculosListView' no existe en el contexto actual",
	"startLineNumber": 82,
	"startColumn": 17,
	"endLineNumber": 82,
	"endColumn": 35
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 91,
	"startColumn": 17,
	"endLineNumber": 91,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 92,
	"startColumn": 17,
	"endLineNumber": 92,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 93,
	"startColumn": 17,
	"endLineNumber": 93,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 97,
	"startColumn": 21,
	"endLineNumber": 97,
	"endColumn": 38
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 101,
	"startColumn": 21,
	"endLineNumber": 101,
	"endColumn": 38
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'LibrosListBox' no existe en el contexto actual",
	"startLineNumber": 110,
	"startColumn": 17,
	"endLineNumber": 110,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'CapitulosComboBox' no existe en el contexto actual",
	"startLineNumber": 119,
	"startColumn": 17,
	"endLineNumber": 119,
	"endColumn": 34
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'FiltroTextBox' no existe en el contexto actual",
	"startLineNumber": 130,
	"startColumn": 29,
	"endLineNumber": 130,
	"endColumn": 42
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'LibrosListBox' no existe en el contexto actual",
	"startLineNumber": 134,
	"startColumn": 17,
	"endLineNumber": 134,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'LibrosListBox' no existe en el contexto actual",
	"startLineNumber": 138,
	"startColumn": 17,
	"endLineNumber": 138,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/MainWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS8602",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS8602)"
		}
	},
	"severity": 4,
	"message": "Desreferencia de una referencia posiblemente NULL.",
	"startLineNumber": 90,
	"startColumn": 65,
	"endLineNumber": 90,
	"endColumn": 79
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'InitializeComponent' no existe en el contexto actual",
	"startLineNumber": 14,
	"startColumn": 13,
	"endLineNumber": 14,
	"endColumn": 32
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdTextBox' no existe en el contexto actual",
	"startLineNumber": 24,
	"startColumn": 26,
	"endLineNumber": 24,
	"endColumn": 35
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'NombreTextBox' no existe en el contexto actual",
	"startLineNumber": 25,
	"startColumn": 30,
	"endLineNumber": 25,
	"endColumn": 43
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdiomaTextBox' no existe en el contexto actual",
	"startLineNumber": 26,
	"startColumn": 30,
	"endLineNumber": 26,
	"endColumn": 43
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdTextBox' no existe en el contexto actual",
	"startLineNumber": 43,
	"startColumn": 43,
	"endLineNumber": 43,
	"endColumn": 52
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdTextBox' no existe en el contexto actual",
	"startLineNumber": 46,
	"startColumn": 17,
	"endLineNumber": 46,
	"endColumn": 26
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'NombreTextBox' no existe en el contexto actual",
	"startLineNumber": 50,
	"startColumn": 43,
	"endLineNumber": 50,
	"endColumn": 56
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'NombreTextBox' no existe en el contexto actual",
	"startLineNumber": 53,
	"startColumn": 17,
	"endLineNumber": 53,
	"endColumn": 30
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdiomaTextBox' no existe en el contexto actual",
	"startLineNumber": 57,
	"startColumn": 43,
	"endLineNumber": 57,
	"endColumn": 56
},{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'IdiomaTextBox' no existe en el contexto actual",
	"startLineNumber": 60,
	"startColumn": 17,
	"endLineNumber": 60,
	"endColumn": 30
}]

GitHub Copilot: # Solución para el error "InitializeComponent no existe"

Hay un problema crítico con tus archivos XAML. La declaración en tus archivos XAML no está correctamente formada, lo que impide que se genere el código necesario para vincular los controles con el code-behind.

## 1. Corrige el archivo MainWindow.xaml

El problema principal está en la primera línea. Tu archivo muestra:

```xml
<Window x:Class="BibliaApp.MainWindow"
    <Grid>
```

Debe ser corregido para incluir todos los atributos XML y cerrar correctamente la etiqueta:

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="BibliaApp" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
```

## 2. Corrige el TextBlock adicional en MainWindow.xaml

Hay una línea problemática en tu archivo:

```xml
<TextBlock Foreground="{StaticResource TextBrush}" ... />
```

Este TextBlock está incompleto y debe ser eliminado o completado correctamente.

## 3. Corrige el archivo AgregarVersionWindow.xaml

También tiene el mismo tipo de error en la primera línea. Debe verse así:

```xml
<Window x:Class="BibliaApp.Views.AgregarVersionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Versión" Height="350" Width="400"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <!-- Contenido existente -->
    </Grid>
</Window>
```

## 4. Pasos de compilación

Una vez corregidos los archivos XAML:

1. Asegúrate de que cada archivo de code-behind (*.xaml.cs) incluya `partial` en su declaración de clase:
   ```csharp
   public partial class MainWindow : Window
   ```

2. Compila el proyecto:
   ```
   dotnet build
   ```

3. Si aún hay problemas, elimina las carpetas `bin` y `obj` y vuelve a compilar:
   ```
   rmdir /s /q bin obj
   dotnet build
   ```

## 5. Errores comunes de XAML

Los errores que estás viendo ocurren porque:

- Cuando tus archivos XAML están mal formados, Visual Studio no puede generar el método `InitializeComponent()`
- Sin este método, ninguno de los controles definidos en XAML (TextBox, ComboBox, etc.) es accesible desde el code-behind
- El método `InitializeComponent()` se genera automáticamente en una parte oculta de la clase parcial

Una vez que corrijas la estructura XML de los archivos XAML, los controles y el método `InitializeComponent()` estarán disponibles automáticamente y la mayoría de los errores deberían desaparecer.

¿Necesitas ayuda adicional para corregir algún otro archivo específico?

RafaelG1986: [{
	"resource": "/c:/Biblia/BibliaApp/Views/AgregarVersionWindow.xaml.cs",
	"owner": "DocumentCompilerSemantic",
	"code": {
		"value": "CS0103",
		"target": {
			"$mid": 1,
			"path": "/query/roslyn.query",
			"scheme": "https",
			"authority": "msdn.microsoft.com",
			"query": "appId=roslyn&k=k(CS0103)"
		}
	},
	"severity": 8,
	"message": "El nombre 'InitializeComponent' no existe en el contexto actual",
	"startLineNumber": 14,
	"startColumn": 13,
	"endLineNumber": 14,
	"endColumn": 32
}]

GitHub Copilot: # Corrección del error en AgregarVersionWindow.xaml.cs

He detectado un error crítico en tu archivo AgregarVersionWindow.xaml.cs: la clase está incorrectamente nombrada como `MainWindow` cuando debería ser `AgregarVersionWindow` para coincidir con el nombre del archivo y la declaración en el XAML.

## El problema:

```csharp
// Error: nombre de clase incorrecto
public partial class MainWindow : Window
```

## La solución:

1. Abre el archivo AgregarVersionWindow.xaml.cs
2. Cambia la declaración de la clase:

```csharp
// Correcto: nombre de clase coincide con el nombre del archivo
public partial class AgregarVersionWindow : Window
```

## Código corregido:

```csharp
// Views/AgregarVersionWindow.xaml.cs
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarVersionWindow : Window
    {
        private readonly BibliaService _bibliaService;
        
        public AgregarVersionWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
        }
        
        // ... Resto del código sin cambios ...
    }
}
```

## Explicación:

En WPF, el método `InitializeComponent()` se genera automáticamente durante la compilación, pero solo cuando:

1. La clase se declara como `partial`
2. El nombre de la clase en el code-behind coincide con la especificada en el atributo `x:Class` del XAML
3. El espacio de nombres coincide con lo especificado en el XAML

Al corregir el nombre de la clase, el compilador podrá generar correctamente el método `InitializeComponent()` y los controles definidos en el XAML serán accesibles desde el code-behind.

También asegúrate de que tu archivo XAML tenga correctamente definido el atributo `x:Class`:

```xml
<Window x:Class="BibliaApp.Views.AgregarVersionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Versión" Height="350" Width="400"
        WindowStartupLocation="CenterOwner">
```

Después de hacer este cambio, deberías poder compilar y ejecutar la aplicación sin el error de InitializeComponent.

RafaelG1986: dame el codigo completo

GitHub Copilot: # Código completo para la aplicación Biblia

Aquí tienes todos los archivos necesarios para la aplicación, correctamente estructurados para evitar errores.

## 1. Archivos de Modelo

### VersionBiblia.cs

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class VersionBiblia
    {
        public string Id { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Idioma { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public List<Libro> Libros { get; set; } = new List<Libro>();
    }
}
```

### Libro.cs

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

### Capitulo.cs

```csharp
using System;
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Capitulo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public int LibroId { get; set; }
        public List<Versiculo> Versiculos { get; set; } = new List<Versiculo>();
    }
}
```

### Versiculo.cs

```csharp
using System;

namespace BibliaApp.Models
{
    public class Versiculo
    {
        public int Id { get; set; }
        public int Numero { get; set; }
        public string Texto { get; set; } = string.Empty;
        public int CapituloId { get; set; }
    }
}
```

## 2. Servicio

### BibliaService.cs

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using BibliaApp.Models;

namespace BibliaApp.Services
{
    public class BibliaService
    {
        private List<VersionBiblia> _versiones;
        private readonly string _archivoDatos;
        
        public BibliaService()
        {
            // Guardar en AppData para asegurar permisos de escritura
            string appDataFolder = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "BibliaApp");
                
            // Crear directorio si no existe
            if (!Directory.Exists(appDataFolder))
            {
                Directory.CreateDirectory(appDataFolder);
            }
            
            _archivoDatos = Path.Combine(appDataFolder, "bibliaData.json");
            
            _versiones = CargarDatos();
            
            // Crear datos de prueba si no hay ninguno
            if (!_versiones.Any())
            {
                CrearDatosDePrueba();
            }
        }
        
        private List<VersionBiblia> CargarDatos()
        {
            if (File.Exists(_archivoDatos))
            {
                try
                {
                    string json = File.ReadAllText(_archivoDatos);
                    return JsonSerializer.Deserialize<List<VersionBiblia>>(json) ?? new List<VersionBiblia>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al cargar datos: {ex.Message}");
                    return new List<VersionBiblia>();
                }
            }
            
            return new List<VersionBiblia>();
        }
        
        private void GuardarDatos()
        {
            try
            {
                string json = JsonSerializer.Serialize(_versiones, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(_archivoDatos, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar datos: {ex.Message}");
            }
        }
        
        private void CrearDatosDePrueba()
        {
            var versionPrueba = new VersionBiblia
            {
                Id = "RVR1960",
                Nombre = "Reina Valera 1960",
                Idioma = "Español",
                Descripcion = "Versión clásica en español"
            };
            
            var libroGenesis = new Libro
            {
                Id = 1,
                Nombre = "Génesis",
                Abreviatura = "Gn"
            };
            
            var capitulo1 = new Capitulo
            {
                Id = 1,
                Numero = 1,
                LibroId = libroGenesis.Id
            };
            
            // Agregar algunos versículos
            capitulo1.Versiculos.Add(new Versiculo 
            { 
                Id = 1, 
                Numero = 1, 
                Texto = "En el principio creó Dios los cielos y la tierra.", 
                CapituloId = capitulo1.Id 
            });
            
            capitulo1.Versiculos.Add(new Versiculo 
            { 
                Id = 2, 
                Numero = 2, 
                Texto = "Y la tierra estaba desordenada y vacía, y las tinieblas estaban sobre la faz del abismo, y el Espíritu de Dios se movía sobre la faz de las aguas.", 
                CapituloId = capitulo1.Id 
            });
            
            capitulo1.Versiculos.Add(new Versiculo 
            { 
                Id = 3, 
                Numero = 3, 
                Texto = "Y dijo Dios: Sea la luz; y fue la luz.", 
                CapituloId = capitulo1.Id 
            });
            
            libroGenesis.Capitulos.Add(capitulo1);
            versionPrueba.Libros.Add(libroGenesis);
            _versiones.Add(versionPrueba);
            
            GuardarDatos();
            Console.WriteLine("Datos de prueba creados.");
        }
        
        // Métodos para versiones
        public List<VersionBiblia> ObtenerVersiones()
        {
            return _versiones;
        }
        
        public VersionBiblia? ObtenerVersionPorId(string id)
        {
            return _versiones.FirstOrDefault(v => v.Id == id);
        }
        
        public void AgregarVersion(VersionBiblia version)
        {
            if (_versiones.Any(v => v.Id == version.Id))
                throw new Exception($"Ya existe una versión con el ID {version.Id}");
            
            _versiones.Add(version);
            GuardarDatos();
        }
        
        // Métodos para libros
        public List<Libro> ObtenerLibros(string versionId)
        {
            var version = ObtenerVersionPorId(versionId);
            return version?.Libros ?? new List<Libro>();
        }
        
        public Libro? ObtenerLibroPorId(string versionId, int libroId)
        {
            var version = ObtenerVersionPorId(versionId);
            return version?.Libros.FirstOrDefault(l => l.Id == libroId);
        }
        
        public void AgregarLibro(string versionId, Libro libro)
        {
            var version = ObtenerVersionPorId(versionId);
            if (version == null)
                throw new Exception($"No se encontró la versión con ID {versionId}");
            
            // Asignar ID al libro
            libro.Id = version.Libros.Count > 0 ? version.Libros.Max(l => l.Id) + 1 : 1;
            
            version.Libros.Add(libro);
            GuardarDatos();
        }
        
        // Métodos para capítulos
        public List<Capitulo> ObtenerCapitulos(string versionId, int libroId)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            return libro?.Capitulos ?? new List<Capitulo>();
        }
        
        public Capitulo? ObtenerCapituloPorId(string versionId, int libroId, int capituloId)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            return libro?.Capitulos.FirstOrDefault(c => c.Id == capituloId);
        }
        
        public void AgregarCapitulo(string versionId, int libroId, Capitulo capitulo)
        {
            var libro = ObtenerLibroPorId(versionId, libroId);
            if (libro == null)
                throw new Exception($"No se encontró el libro con ID {libroId}");
            
            // Asignar ID al capítulo
            capitulo.Id = libro.Capitulos.Count > 0 ? libro.Capitulos.Max(c => c.Id) + 1 : 1;
            capitulo.LibroId = libroId;
            
            libro.Capitulos.Add(capitulo);
            GuardarDatos();
        }
        
        // Métodos para versículos
        public List<Versiculo> ObtenerVersiculos(string versionId, int libroId, int capituloId)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            return capitulo?.Versiculos ?? new List<Versiculo>();
        }
        
        public void AgregarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculo)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            // Asignar ID al versículo
            versiculo.Id = capitulo.Versiculos.Count > 0 ? capitulo.Versiculos.Max(v => v.Id) + 1 : 1;
            versiculo.CapituloId = capituloId;
            
            capitulo.Versiculos.Add(versiculo);
            GuardarDatos();
        }
        
        public void ActualizarVersiculo(string versionId, int libroId, int capituloId, Versiculo versiculoActualizado)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoActualizado.Id);
            if (versiculo == null)
                throw new Exception($"No se encontró el versículo con ID {versiculoActualizado.Id}");
            
            // Actualizar propiedades
            versiculo.Numero = versiculoActualizado.Numero;
            versiculo.Texto = versiculoActualizado.Texto;
            
            GuardarDatos();
        }
        
        public void EliminarVersiculo(string versionId, int libroId, int capituloId, int versiculoId)
        {
            var capitulo = ObtenerCapituloPorId(versionId, libroId, capituloId);
            if (capitulo == null)
                throw new Exception($"No se encontró el capítulo con ID {capituloId}");
            
            var versiculo = capitulo.Versiculos.FirstOrDefault(v => v.Id == versiculoId);
            if (versiculo == null)
                throw new Exception($"No se encontró el versículo con ID {versiculoId}");
            
            capitulo.Versiculos.Remove(versiculo);
            GuardarDatos();
        }
    }
}
```

## 3. Vistas

### App.xaml

```xml
<Application x:Class="BibliaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <SolidColorBrush x:Key="TextBrush" Color="Black"/>
    </Application.Resources>
</Application>
```

### App.xaml.cs

```csharp
using System;
using System.Windows;

namespace BibliaApp
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            
            // Manejo global de excepciones no controladas
            AppDomain.CurrentDomain.UnhandledException += (sender, args) =>
            {
                Exception ex = (Exception)args.ExceptionObject;
                MessageBox.Show($"Ha ocurrido un error no controlado: {ex.Message}", 
                                "Error", 
                                MessageBoxButton.OK, 
                                MessageBoxImage.Error);
            };
        }
    }
}
```

### MainWindow.xaml

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="BibliaApp" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Menú principal -->
        <Menu Grid.Row="0">
            <MenuItem Header="Archivo">
                <MenuItem x:Name="MenuAgregarVersion" Header="Agregar Versión" Click="MenuAgregarVersion_Click"/>
                <MenuItem x:Name="MenuGestionarContenido" Header="Gestionar Contenido" Click="MenuGestionarContenido_Click"/>
                <Separator/>
                <MenuItem x:Name="MenuSalir" Header="Salir" Click="MenuSalir_Click"/>
            </MenuItem>
        </Menu>
        
        <!-- Contenido principal -->
        <Grid Grid.Row="1" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <!-- Panel izquierdo: Versiones y libros -->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <ComboBox x:Name="VersionesComboBox" Grid.Row="0" Margin="0,0,0,10" SelectionChanged="VersionesComboBox_SelectionChanged"/>
                
                <Grid Grid.Row="1" Margin="0,0,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <TextBox x:Name="FiltroTextBox" Grid.Column="0" TextChanged="FiltroTextBox_TextChanged" Margin="0,0,5,0">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="TextBox">
                                            <Grid>
                                                <TextBox x:Name="textSource" 
                                                        Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        Background="Transparent" 
                                                        Panel.ZIndex="2" />
                                                <TextBlock Text="Buscar libro..." 
                                                        Visibility="{Binding Path=Text.IsEmpty, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                        Background="Transparent"
                                                        Padding="5,2,0,0"
                                                        Foreground="Gray"
                                                        Panel.ZIndex="1" />
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </Grid>
                
                <ListBox x:Name="LibrosListBox" Grid.Row="2" SelectionChanged="LibrosListBox_SelectionChanged" DisplayMemberPath="Nombre"/>
            </Grid>
            
            <!-- Panel derecho: Capítulo y versículos -->
            <Grid Grid.Column="1" Margin="10,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <Grid Grid.Row="0" Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <ComboBox x:Name="CapitulosComboBox" Grid.Column="0" Width="60" SelectionChanged="CapitulosComboBox_SelectionChanged"/>
                    <TextBlock x:Name="TituloTextBlock" Grid.Column="1" Margin="10,0,0,0" FontSize="18" VerticalAlignment="Center" Foreground="Black"/>
                </Grid>
                
                <ListView x:Name="VersiculosListView" Grid.Row="1">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="0,5">
                                <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0" VerticalAlignment="Top" Foreground="Black"/>
                                <TextBlock Text="{Binding Texto}" TextWrapping="Wrap" Foreground="Black"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
        </Grid>
    </Grid>
</Window>
```

### MainWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;
using BibliaApp.Views;

namespace BibliaApp
{
    public partial class MainWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia? _versionActual;
        private Libro? _libroActual;
        private Capitulo? _capituloActual;
        
        public MainWindow()
        {
            InitializeComponent();
            
            // Inicializar servicios
            _bibliaService = new BibliaService();
            
            Console.WriteLine("Iniciando aplicación BibliaApp");
            
            // Cargar datos iniciales
            CargarVersiones();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            Console.WriteLine($"Versiones cargadas: {versiones.Count}");
            
            VersionesComboBox.ItemsSource = versiones;
            VersionesComboBox.DisplayMemberPath = "Nombre";
            VersionesComboBox.SelectedValuePath = "Id";
            
            if (versiones.Any())
            {
                VersionesComboBox.SelectedIndex = 0;
            }
        }
        
        private void VersionesComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (VersionesComboBox.SelectedItem is VersionBiblia version)
            {
                _versionActual = version;
                Console.WriteLine($"Versión seleccionada: {version.Nombre}");
                ActualizarListaLibros();
            }
        }
        
        private void ActualizarListaLibros()
        {
            if (_versionActual == null) return;
            
            // Aplicar el filtro actual si existe
            FiltroTextBox_TextChanged(null, null);
        }
        
        private void MostrarCapitulo(Capitulo? capitulo)
        {
            if (_libroActual == null) return;
            
            if (capitulo != null)
            {
                TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
                
                var versiculos = _bibliaService.ObtenerVersiculos(
                    _versionActual?.Id ?? string.Empty, 
                    _libroActual.Id, 
                    capitulo.Id);
                    
                Console.WriteLine($"Versículos cargados: {versiculos.Count}");
                VersiculosListView.ItemsSource = versiculos;
            }
            else
            {
                TituloTextBlock.Text = string.Empty;
                VersiculosListView.ItemsSource = null;
            }
        }
        
        private void CargarCapitulos()
        {
            if (_libroActual == null || _versionActual == null) return;
            
            var capitulos = _bibliaService.ObtenerCapitulos(_versionActual.Id, _libroActual.Id);
            Console.WriteLine($"Capítulos cargados: {capitulos.Count}");
            
            CapitulosComboBox.ItemsSource = capitulos;
            CapitulosComboBox.DisplayMemberPath = "Numero";
            CapitulosComboBox.SelectedValuePath = "Id";
            
            if (capitulos.Any())
            {
                CapitulosComboBox.SelectedIndex = 0;
            }
            else
            {
                CapitulosComboBox.ItemsSource = null;
                _capituloActual = null;
                MostrarCapitulo(null);
            }
        }
        
        private void LibrosListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (LibrosListBox.SelectedItem is Libro libro)
            {
                _libroActual = libro;
                Console.WriteLine($"Libro seleccionado: {libro.Nombre}");
                CargarCapitulos();
            }
        }
        
        private void CapitulosComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CapitulosComboBox.SelectedItem is Capitulo capitulo)
            {
                _capituloActual = capitulo;
                Console.WriteLine($"Capítulo seleccionado: {capitulo.Numero}");
                MostrarCapitulo(capitulo);
            }
        }
        
        private void FiltroTextBox_TextChanged(object sender, TextChangedEventArgs? e)
        {
            if (_versionActual == null) return;
            
            string filtro = FiltroTextBox.Text?.ToLower() ?? string.Empty;
            
            if (string.IsNullOrWhiteSpace(filtro))
            {
                LibrosListBox.ItemsSource = _versionActual.Libros;
            }
            else
            {
                LibrosListBox.ItemsSource = _versionActual.Libros
                    .Where(l => (l.Nombre?.ToLower()?.Contains(filtro) ?? false) || 
                               (l.Abreviatura?.ToLower()?.Contains(filtro) ?? false))
                    .ToList();
            }
        }
        
        // Menú
        
        private void MenuSalir_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        
        private void MenuAgregarVersion_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new AgregarVersionWindow(_bibliaService);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                CargarVersiones();
            }
        }
        
        private void MenuGestionarContenido_Click(object sender, RoutedEventArgs e)
        {
            var ventana = new GestionContenidoWindow(_bibliaService);
            ventana.Owner = this;
            ventana.ShowDialog();
            
            // Recargar datos
            CargarVersiones();
        }
    }
}
```

### AgregarVersionWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.AgregarVersionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Versión" Height="350" Width="400"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="100"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <TextBlock Grid.Row="0" Grid.Column="0" Text="ID:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="0" Grid.Column="1" x:Name="IdTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="1" Grid.Column="0" Text="Nombre:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="1" Grid.Column="1" x:Name="NombreTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="2" Grid.Column="0" Text="Idioma:" Margin="0,0,10,10" VerticalAlignment="Center"/>
        <TextBox Grid.Row="2" Grid.Column="1" x:Name="IdiomaTextBox" Margin="0,0,0,10"/>
        
        <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Text="Información adicional:" Margin="0,0,0,5"/>
        <TextBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" x:Name="DescripcionTextBox" AcceptsReturn="True" TextWrapping="Wrap"/>
        
        <StackPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,0">
            <Button Content="Cancelar" Width="100" Click="CancelarButton_Click" Margin="0,0,10,0"/>
            <Button Content="Guardar" Width="100" Click="GuardarButton_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

### AgregarVersionWindow.xaml.cs

```csharp
using System;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarVersionWindow : Window
    {
        private readonly BibliaService _bibliaService;
        
        public AgregarVersionWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
        }
        
        private void CancelarButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
        
        private void GuardarButton_Click(object sender, RoutedEventArgs e)
        {
            // Validar campos obligatorios
            if (string.IsNullOrWhiteSpace(IdTextBox.Text))
            {
                MessageBox.Show("Debe ingresar un ID para la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                IdTextBox.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(NombreTextBox.Text))
            {
                MessageBox.Show("Debe ingresar un nombre para la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                NombreTextBox.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(IdiomaTextBox.Text))
            {
                MessageBox.Show("Debe ingresar un idioma para la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                IdiomaTextBox.Focus();
                return;
            }
            
            try
            {
                // Crear nueva versión
                var nuevaVersion = new VersionBiblia
                {
                    Id = IdTextBox.Text.Trim(),
                    Nombre = NombreTextBox.Text.Trim(),
                    Idioma = IdiomaTextBox.Text.Trim(),
                    Descripcion = DescripcionTextBox.Text.Trim()
                };
                
                // Agregar a través del servicio
                _bibliaService.AgregarVersion(nuevaVersion);
                
                MessageBox.Show("Versión agregada correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar versión: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
```

### InputDialog.xaml

```xml
<Window x:Class="BibliaApp.Views.InputDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Entrada" 
        SizeToContent="WidthAndHeight" 
        WindowStartupLocation="CenterOwner"
        MinWidth="300">
    <Grid Margin="15">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Label Name="lblQuestion" Grid.Column="1" Margin="0,0,0,5">Pregunta:</Label>
        <TextBox Name="txtResponse" Grid.Column="1" Grid.Row="1" MinWidth="250" Margin="0,0,0,15"/>

        <WrapPanel Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Right">
            <Button Name="btnDialogOk" IsDefault="True" Click="btnDialogOk_Click" MinWidth="60" Margin="0,0,10,0">Aceptar</Button>
            <Button IsCancel="True" MinWidth="60">Cancelar</Button>
        </WrapPanel>
    </Grid>
</Window>
```

### InputDialog.xaml.cs

```csharp
using System.Windows;
using System.Windows.Controls;

namespace BibliaApp.Views
{
    public partial class InputDialog : Window
    {
        public string ResponseText { get; private set; } = string.Empty;
        
        public InputDialog(string question, string title, string defaultAnswer = "", bool multiline = false)
        {
            InitializeComponent();
            
            Title = title;
            lblQuestion.Content = question;  // Aquí usamos Content en lugar de Text
            txtResponse.Text = defaultAnswer;
            
            if (multiline)
            {
                txtResponse.AcceptsReturn = true;
                txtResponse.TextWrapping = TextWrapping.Wrap;
                txtResponse.MinHeight = 100;
                txtResponse.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
            }
            
            txtResponse.SelectAll();
            txtResponse.Focus();
        }
        
        private void btnDialogOk_Click(object sender, RoutedEventArgs e)
        {
            ResponseText = txtResponse.Text;
            DialogResult = true;
        }
    }
}
```

### GestionContenidoWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido Bíblico" Height="650" Width="950"
        WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Panel superior con selección y acciones -->
        <Grid Grid.Row="0" Margin="0,0,0,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <StackPanel Grid.Column="0" Orientation="Horizontal">
                <Label Content="Versión:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxVersiones" Width="150" Margin="5,0,15,0" SelectionChanged="cbxVersiones_SelectionChanged"/>
                
                <Label Content="Libro:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxLibros" Width="150" Margin="5,0,15,0" SelectionChanged="cbxLibros_SelectionChanged"/>
                
                <Label Content="Capítulo:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cbxCapitulos" Width="80" Margin="5,0,0,0" SelectionChanged="cbxCapitulos_SelectionChanged"/>
            </StackPanel>
            
            <StackPanel Grid.Column="1" Orientation="Horizontal">
                <Button x:Name="btnAgregarLibro" Content="Agregar Libro" Width="110" Margin="5,0" Click="btnAgregarLibro_Click"/>
                <Button x:Name="btnAgregarCapitulo" Content="Agregar Capítulo" Width="110" Margin="5,0" Click="btnAgregarCapitulo_Click"/>
            </StackPanel>
        </Grid>
        
        <!-- Panel principal con lista de versículos y acciones -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            
            <!-- Lista de versículos -->
            <DockPanel Grid.Column="0">
                <DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
                    <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click" HorizontalAlignment="Right" DockPanel.Dock="Right"/>
                    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
                </DockPanel>
                
                <ListView x:Name="lstVersiculos" SelectionChanged="lstVersiculos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="#" DisplayMemberBinding="{Binding Numero}" Width="50"/>
                            <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="500"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DockPanel>
            
            <!-- Panel de edición de versículo -->
            <Border Grid.Column="1" BorderBrush="LightGray" BorderThickness="1" Margin="10,0,0,0" Padding="10">
                <StackPanel>
                    <TextBlock Text="Editar Versículo" FontWeight="Bold" Margin="0,0,0,10"/>
                    
                    <Label Content="Número:"/>
                    <TextBox x:Name="txtNumeroVersiculo" Margin="0,0,0,10"/>
                    
                    <Label Content="Texto:"/>
                    <TextBox x:Name="txtTextoVersiculo" TextWrapping="Wrap" AcceptsReturn="True" Height="300" Margin="0,0,0,10"/>
                    
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button x:Name="btnGuardarVersiculo" Content="Guardar" Width="80" Margin="0,0,5,0" Click="btnGuardarVersiculo_Click"/>
                        <Button x:Name="btnEliminarVersiculo" Content="Eliminar" Width="80" Click="btnEliminarVersiculo_Click"/>
                    </StackPanel>
                </StackPanel>
            </Border>
        </Grid>
    </Grid>
</Window>
```

### GestionContenidoWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionContenidoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia? _versionSeleccionada;
        private Libro? _libroSeleccionado;
        private Capitulo? _capituloSeleccionado;
        private Versiculo? _versiculoSeleccionado;
        
        public GestionContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            _bibliaService = bibliaService;
            
            // Cargar versiones disponibles
            CargarVersiones();
            
            // Estado inicial de los controles
            ActualizarEstadoControles();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            cbxVersiones.ItemsSource = versiones;
            cbxVersiones.DisplayMemberPath = "Nombre";
            cbxVersiones.SelectedValuePath = "Id";
            
            if (versiones.Any())
            {
                cbxVersiones.SelectedIndex = 0;
            }
        }
        
        private void CargarLibros()
        {
            if (_versionSeleccionada == null) return;
            
            var libros = _bibliaService.ObtenerLibros(_versionSeleccionada.Id);
            cbxLibros.ItemsSource = libros;
            cbxLibros.DisplayMemberPath = "Nombre";
            cbxLibros.SelectedValuePath = "Id";
            
            if (libros.Any())
            {
                cbxLibros.SelectedIndex = 0;
            }
            else
            {
                cbxLibros.ItemsSource = null;
                cbxCapitulos.ItemsSource = null;
                lstVersiculos.ItemsSource = null;
            }
        }
        
        private void CargarCapitulos()
        {
            if (_libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var capitulos = _bibliaService.ObtenerCapitulos(_versionSeleccionada.Id, _libroSeleccionado.Id);
            cbxCapitulos.ItemsSource = capitulos;
            cbxCapitulos.DisplayMemberPath = "Numero";
            cbxCapitulos.SelectedValuePath = "Id";
            
            if (capitulos.Any())
            {
                cbxCapitulos.SelectedIndex = 0;
            }
            else
            {
                cbxCapitulos.ItemsSource = null;
                lstVersiculos.ItemsSource = null;
            }
        }
        
        private void CargarVersiculos()
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var versiculos = _bibliaService.ObtenerVersiculos(_versionSeleccionada.Id, _libroSeleccionado.Id, _capituloSeleccionado.Id);
            lstVersiculos.ItemsSource = versiculos;
            
            if (!versiculos.Any())
            {
                LimpiarPanelEdicion();
            }
        }
        
        private void ActualizarEstadoControles()
        {
            bool versionSeleccionada = _versionSeleccionada != null;
            bool libroSeleccionado = _libroSeleccionado != null;
            bool capituloSeleccionado = _capituloSeleccionado != null;
            bool versiculoSeleccionado = _versiculoSeleccionado != null;
            
            cbxLibros.IsEnabled = versionSeleccionada;
            cbxCapitulos.IsEnabled = libroSeleccionado;
            
            btnAgregarLibro.IsEnabled = versionSeleccionada;
            btnAgregarCapitulo.IsEnabled = libroSeleccionado;
            btnAgregarVersiculo.IsEnabled = capituloSeleccionado;
            
            // Panel de edición
            txtNumeroVersiculo.IsEnabled = versiculoSeleccionado;
            txtTextoVersiculo.IsEnabled = versiculoSeleccionado;
            btnGuardarVersiculo.IsEnabled = versiculoSeleccionado;
            btnEliminarVersiculo.IsEnabled = versiculoSeleccionado;
        }
        
        private void LimpiarPanelEdicion()
        {
            _versiculoSeleccionado = null;
            txtNumeroVersiculo.Text = string.Empty;
            txtTextoVersiculo.Text = string.Empty;
            ActualizarEstadoControles();
        }
        
        // Eventos de selección
        private void cbxVersiones_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionSeleccionada = cbxVersiones.SelectedItem as VersionBiblia;
            _libroSeleccionado = null;
            _capituloSeleccionado = null;
            
            CargarLibros();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxLibros_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroSeleccionado = cbxLibros.SelectedItem as Libro;
            _capituloSeleccionado = null;
            
            CargarCapitulos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cbxCapitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloSeleccionado = cbxCapitulos.SelectedItem as Capitulo;
            
            CargarVersiculos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void lstVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versiculoSeleccionado = lstVersiculos.SelectedItem as Versiculo;
            
            if (_versiculoSeleccionado != null)
            {
                txtNumeroVersiculo.Text = _versiculoSeleccionado.Numero.ToString();
                txtTextoVersiculo.Text = _versiculoSeleccionado.Texto;
            }
            else
            {
                LimpiarPanelEdicion();
            }
            
            ActualizarEstadoControles();
        }
        
        // Eventos de botones
        private void btnAgregarLibro_Click(object sender, RoutedEventArgs e)
        {
            if (_versionSeleccionada == null) return;
            
            var dialogoNombre = new InputDialog("Nombre del libro:", "Agregar Libro");
            if (dialogoNombre.ShowDialog() == true)
            {
                string nombre = dialogoNombre.ResponseText;
                
                var dialogoAbreviatura = new InputDialog("Abreviatura:", "Agregar Libro");
                if (dialogoAbreviatura.ShowDialog() == true)
                {
                    string abreviatura = dialogoAbreviatura.ResponseText;
                    
                    try
                    {
                        var nuevoLibro = new Libro
                        {
                            Nombre = nombre,
                            Abreviatura = abreviatura
                        };
                        
                        _bibliaService.AgregarLibro(_versionSeleccionada.Id, nuevoLibro);
                        CargarLibros();
                        
                        // Seleccionar el nuevo libro
                        cbxLibros.SelectedItem = cbxLibros.Items.Cast<Libro>()
                            .FirstOrDefault(l => l.Nombre == nombre);
                            
                        MessageBox.Show("Libro agregado correctamente", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }
        
        private void btnAgregarCapitulo_Click(object sender, RoutedEventArgs e)
        {
            if (_libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var dialogo = new InputDialog("Número de capítulo:", "Agregar Capítulo");
            if (dialogo.ShowDialog() == true)
            {
                if (int.TryParse(dialogo.ResponseText, out int numero))
                {
                    try
                    {
                        var nuevoCapitulo = new Capitulo
                        {
                            Numero = numero,
                            LibroId = _libroSeleccionado.Id
                        };
                        
                        _bibliaService.AgregarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, nuevoCapitulo);
                        CargarCapitulos();
                        
                        // Seleccionar el nuevo capítulo
                        cbxCapitulos.SelectedItem = cbxCapitulos.Items.Cast<Capitulo>()
                            .FirstOrDefault(c => c.Numero == numero);
                            
                        MessageBox.Show("Capítulo agregado correctamente", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al agregar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El número de capítulo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnAgregarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var numeroDialogo = new InputDialog("Número de versículo:", "Agregar Versículo");
            if (numeroDialogo.ShowDialog() == true)
            {
                if (int.TryParse(numeroDialogo.ResponseText, out int numero))
                {
                    var textoDialogo = new InputDialog("Texto del versículo:", "Agregar Versículo", multiline: true);
                    if (textoDialogo.ShowDialog() == true)
                    {
                        string texto = textoDialogo.ResponseText;
                        
                        try
                        {
                            var nuevoVersiculo = new Versiculo
                            {
                                Numero = numero,
                                Texto = texto,
                                CapituloId = _capituloSeleccionado.Id
                            };
                            
                            _bibliaService.AgregarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                                _capituloSeleccionado.Id, nuevoVersiculo);
                            CargarVersiculos();
                            
                            // Seleccionar el nuevo versículo
                            lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                                .FirstOrDefault(v => v.Numero == numero);
                                
                            MessageBox.Show("Versículo agregado correctamente", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error al agregar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }
                else
                {
                    MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnGuardarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado == null || _capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            if (int.TryParse(txtNumeroVersiculo.Text, out int numero))
            {
                try
                {
                    // Crear una copia del versículo con los cambios
                    var versiculoEditado = new Versiculo
                    {
                        Id = _versiculoSeleccionado.Id,
                        Numero = numero,
                        Texto = txtTextoVersiculo.Text,
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.ActualizarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, versiculoEditado);
                    
                    // Recargar versículos para mostrar los cambios
                    CargarVersiculos();
                    
                    // Mantener seleccionado el versículo editado
                    lstVersiculos.SelectedItem = lstVersiculos.Items.Cast<Versiculo>()
                        .FirstOrDefault(v => v.Id == _versiculoSeleccionado.Id);
                        
                    MessageBox.Show("Versículo actualizado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("El número de versículo debe ser un valor numérico.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado == null || _capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var resultado = MessageBox.Show($"¿Está seguro de que desea eliminar el versículo {_versiculoSeleccionado.Numero}?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarVersiculo(_versionSeleccionada.Id, _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, _versiculoSeleccionado.Id);
                        
                    // Recargar versículos para reflejar la eliminación
                    CargarVersiculos();
                    LimpiarPanelEdicion();
                    
                    MessageBox.Show("Versículo eliminado correctamente.", "Información", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
    }
}
```

## 4. Archivo de proyecto

### BibliaApp.csproj

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWPF>true</UseWPF>
    <!-- Desactivar advertencias de nullability temporalmente -->
    <NoWarn>CS8618;CS8625;CS8603;CS8601;CS8602</NoWarn>
  </PropertyGroup>

</Project>
```

## Instrucciones para construir y ejecutar

1. Asegúrate de tener todas las carpetas creadas:
   - `Models`
   - `Services`
   - `Views`

2. Copia cada archivo en su ubicación respectiva.

3. Abre una terminal en la carpeta raíz del proyecto (C:\Biblia\BibliaApp) y ejecuta:
   ```
   dotnet build
   dotnet run
   ```

4. Si sigues teniendo problemas, elimina las carpetas bin y obj:
   ```
   rmdir /s /q bin obj
   dotnet build
   dotnet run
   ```

Con estos archivos correctamente implementados, tu aplicación de Biblia debería compilar y ejecutarse sin errores.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: Quedo bien

GitHub Copilot: # ¡Excelente! La aplicación está funcionando correctamente

Me alegra que todo haya quedado bien. La aplicación BibliaApp ahora debería permitirte:

1. Visualizar diferentes versiones de la Biblia
2. Navegar por libros, capítulos y versículos
3. Buscar libros mediante el filtro de texto
4. Agregar nuevas versiones bíblicas
5. Gestionar el contenido (agregar/editar/eliminar libros, capítulos y versículos)

## Resumen de las correcciones realizadas

- Corregimos la estructura XAML en los archivos de interfaz de usuario
- Implementamos correctamente el patrón de diseño para la aplicación WPF
- Agregamos el manejo adecuado de referencias null para el código C#
- Configuramos la conexión adecuada entre los controles XAML y el code-behind
- Añadimos funcionalidad para crear datos de prueba si no hay datos existentes

Si quieres continuar expandiendo la aplicación, podrías considerar:

- Añadir funcionalidad de búsqueda de texto en versículos
- Implementar comparación entre diferentes versiones
- Añadir marcadores o favoritos
- Mejorar el diseño visual con estilos personalizados o temas

¿Hay alguna otra característica o mejora específica que te gustaría añadir a la aplicación en el futuro?

RafaelG1986: Solamente quiero poder ingresar un grupo de versiculos, por ejemplo Genesis 1:1-20; entonces una opcion en agregar mas de un versiculo, e ingrese por la peticion.

GitHub Copilot: # Implementación para agregar múltiples versículos a la vez

Voy a crear una solución que te permita ingresar un rango de versículos como "Génesis 1:1-20" y agregarlos todos a la vez. Aquí están los pasos y archivos necesarios:

## 1. Crear una nueva ventana: MultipleVersiculosWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.MultipleVersiculosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Múltiples Versículos" Height="450" Width="600"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
            Ingrese el rango de versículos en formato: Libro Capítulo:Inicio-Fin
            <LineBreak/>
            Ejemplo: Génesis 1:1-10
        </TextBlock>
        
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBox x:Name="txtRangoVersiculos" Grid.Column="0" Margin="0,0,10,0"/>
            <Button x:Name="btnValidar" Grid.Column="1" Content="Validar" Click="btnValidar_Click" Width="80"/>
        </Grid>
        
        <TextBlock Grid.Row="2" Text="Texto para todos los versículos:" Margin="0,0,0,5"/>
        <TextBox x:Name="txtTextoVersiculos" Grid.Row="3" TextWrapping="Wrap" AcceptsReturn="True" 
                 Height="100" Margin="0,0,0,15"/>
        
        <GroupBox Grid.Row="4" Header="Vista Previa">
            <ListBox x:Name="lstVistaPrevia">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0"/>
                            <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </GroupBox>
        
        <StackPanel Grid.Row="5" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,0">
            <Button x:Name="btnCancelar" Content="Cancelar" Width="100" Margin="0,0,10,0" Click="btnCancelar_Click"/>
            <Button x:Name="btnAgregar" Content="Agregar Versículos" Width="120" Click="btnAgregar_Click" IsEnabled="False"/>
        </StackPanel>
    </Grid>
</Window>
```

## 2. Crear MultipleVersiculosWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class MultipleVersiculosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        
        private List<Versiculo> _versiculosPreview = new List<Versiculo>();
        
        public MultipleVersiculosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            
            // Sugerencia inicial con el libro y capítulo actuales
            txtRangoVersiculos.Text = $"{_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}:1-10";
        }
        
        private void btnValidar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Parsear el rango de versículos
                var (libro, capitulo, inicio, fin) = ParsearRangoVersiculos(txtRangoVersiculos.Text);
                
                // Validar que el libro y capítulo coincidan con los seleccionados
                if (libro.ToLower() != _libroSeleccionado.Nombre.ToLower() && 
                    libro.ToLower() != _libroSeleccionado.Abreviatura.ToLower())
                {
                    MessageBox.Show($"El libro '{libro}' no coincide con el libro seleccionado '{_libroSeleccionado.Nombre}'.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                if (capitulo != _capituloSeleccionado.Numero)
                {
                    MessageBox.Show($"El capítulo {capitulo} no coincide con el capítulo seleccionado {_capituloSeleccionado.Numero}.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Validar el rango
                if (inicio <= 0 || fin <= 0 || inicio > fin)
                {
                    MessageBox.Show("El rango de versículos es inválido. Asegúrese de que inicio y fin sean números positivos y que inicio sea menor o igual a fin.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Generar vista previa
                _versiculosPreview.Clear();
                for (int numero = inicio; numero <= fin; numero++)
                {
                    _versiculosPreview.Add(new Versiculo
                    {
                        Numero = numero,
                        Texto = txtTextoVersiculos.Text,
                        CapituloId = _capituloSeleccionado.Id
                    });
                }
                
                // Mostrar vista previa
                lstVistaPrevia.ItemsSource = null;
                lstVistaPrevia.ItemsSource = _versiculosPreview;
                
                // Habilitar botón de agregar
                btnAgregar.IsEnabled = true;
                
                MessageBox.Show($"Se agregarán {_versiculosPreview.Count} versículos. Revise la vista previa y presione 'Agregar Versículos' para confirmar.", 
                    "Validación exitosa", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al validar: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                btnAgregar.IsEnabled = false;
            }
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int versiculosAgregados = 0;
                
                // Verificar versículos existentes
                var versiculosExistentes = _bibliaService.ObtenerVersiculos(
                    _versionSeleccionada.Id, 
                    _libroSeleccionado.Id, 
                    _capituloSeleccionado.Id);
                
                // Agregar cada versículo
                foreach (var versiculo in _versiculosPreview)
                {
                    // Verificar si ya existe este número de versículo
                    if (versiculosExistentes.Any(v => v.Numero == versiculo.Numero))
                    {
                        if (MessageBox.Show($"El versículo {versiculo.Numero} ya existe. ¿Desea sobrescribirlo?", 
                            "Confirmar sobrescritura", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                        {
                            continue; // Saltar este versículo
                        }
                        
                        // Obtener el versículo existente y actualizarlo
                        var existente = versiculosExistentes.First(v => v.Numero == versiculo.Numero);
                        var actualizado = new Versiculo
                        {
                            Id = existente.Id,
                            Numero = versiculo.Numero,
                            Texto = versiculo.Texto,
                            CapituloId = _capituloSeleccionado.Id
                        };
                        
                        _bibliaService.ActualizarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            actualizado);
                    }
                    else
                    {
                        // Agregar nuevo versículo
                        _bibliaService.AgregarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            versiculo);
                    }
                    
                    versiculosAgregados++;
                }
                
                MessageBox.Show($"Se han agregado/actualizado {versiculosAgregados} versículos correctamente.", 
                    "Operación exitosa", MessageBoxButton.OK, MessageBoxImage.Information);
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar versículos: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private (string Libro, int Capitulo, int Inicio, int Fin) ParsearRangoVersiculos(string texto)
        {
            // Patrón para reconocer: "Libro Capítulo:Inicio-Fin"
            // También acepta: "Libro Capítulo:Inicio" (un solo versículo)
            var regex = new Regex(@"^([\w\s]+)\s+(\d+):(\d+)(?:-(\d+))?$");
            var match = regex.Match(texto.Trim());
            
            if (!match.Success)
            {
                throw new FormatException("El formato debe ser 'Libro Capítulo:Inicio-Fin' o 'Libro Capítulo:Inicio'");
            }
            
            string libro = match.Groups[1].Value.Trim();
            int capitulo = int.Parse(match.Groups[2].Value);
            int inicio = int.Parse(match.Groups[3].Value);
            
            // Si no se especificó un rango (solo un número), entonces fin es igual a inicio
            int fin = match.Groups[4].Success 
                ? int.Parse(match.Groups[4].Value) 
                : inicio;
                
            return (libro, capitulo, inicio, fin);
        }
    }
}
```

## 3. Modificar GestionContenidoWindow.xaml

Añade un nuevo botón junto al botón "Agregar Versículo" existente:

```xml
<DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
        <Button x:Name="btnAgregarMultiplesVersiculos" Content="Agregar Múltiples" Width="120" Click="btnAgregarMultiplesVersiculos_Click" Margin="0,0,10,0"/>
        <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click"/>
    </StackPanel>
    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
</DockPanel>
```

## 4. Modificar GestionContenidoWindow.xaml.cs

Añade el manejador de eventos para el nuevo botón:

```csharp
private void btnAgregarMultiplesVersiculos_Click(object sender, RoutedEventArgs e)
{
    if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
    
    var ventana = new MultipleVersiculosWindow(_bibliaService, _versionSeleccionada, _libroSeleccionado, _capituloSeleccionado);
    ventana.Owner = this;
    
    if (ventana.ShowDialog() == true)
    {
        // Recargar la lista de versículos
        CargarVersiculos();
    }
}
```

## Características de esta implementación

1. **Formato flexible**: Acepta formatos como "Génesis 1:1-20" o "Gn 1:5" (un solo versículo)
2. **Vista previa**: Muestra los versículos antes de confirmar su creación
3. **Validación**: Verifica que el libro y capítulo coincidan con los seleccionados
4. **Gestión de duplicados**: Pregunta si desea sobrescribir versículos existentes
5. **Entrada múltiple**: Permite agregar varios versículos con el mismo texto rápidamente

Esta funcionalidad facilitará enormemente la carga de datos en tu aplicación de Biblia, especialmente cuando necesites agregar capítulos completos o grandes secciones de versículos.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: C:\Biblia\BibliaApp\Views\MultipleVersiculosWindow.xaml(59,81): error CS1061: "MultipleVersiculosWindow" no contiene una definición para "btnAgregar_Click" ni un método de extensión accesible "btnAgregar_Click" que acepte un primer argumento del tipo "MultipleVersiculosWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(370,31): error CS1729: 'MultipleVersiculosWindow' no contiene un constructor que tome 4 argumentos

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de errores en MultipleVersiculosWindow

Vamos a corregir los dos errores que estás enfrentando:

1. Falta el método `btnAgregar_Click` en MultipleVersiculosWindow
2. El constructor de MultipleVersiculosWindow debe aceptar 4 argumentos

## 1. Crea el archivo MultipleVersiculosWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.MultipleVersiculosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Múltiples Versículos" Height="450" Width="600"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
            Ingrese el rango de versículos en formato: Libro Capítulo:Inicio-Fin
            <LineBreak/>
            Ejemplo: Génesis 1:1-10
        </TextBlock>
        
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBox x:Name="txtRangoVersiculos" Grid.Column="0" Margin="0,0,10,0"/>
            <Button x:Name="btnValidar" Grid.Column="1" Content="Validar" Click="btnValidar_Click" Width="80"/>
        </Grid>
        
        <TextBlock Grid.Row="2" Text="Texto para todos los versículos:" Margin="0,0,0,5"/>
        <TextBox x:Name="txtTextoVersiculos" Grid.Row="3" TextWrapping="Wrap" AcceptsReturn="True" 
                 Height="100" Margin="0,0,0,15"/>
        
        <GroupBox Grid.Row="4" Header="Vista Previa">
            <ListBox x:Name="lstVistaPrevia">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0"/>
                            <TextBlock Text="{Binding Texto}" TextWrapping="Wrap"/>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </GroupBox>
        
        <StackPanel Grid.Row="5" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,0">
            <Button x:Name="btnCancelar" Content="Cancelar" Width="100" Margin="0,0,10,0" Click="btnCancelar_Click"/>
            <Button x:Name="btnAgregar" Content="Agregar Versículos" Width="120" Click="btnAgregar_Click" IsEnabled="False"/>
        </StackPanel>
    </Grid>
</Window>
```

## 2. Crea el archivo MultipleVersiculosWindow.xaml.cs COMPLETO

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class MultipleVersiculosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        
        private List<Versiculo> _versiculosPreview = new List<Versiculo>();
        
        public MultipleVersiculosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            
            // Sugerencia inicial con el libro y capítulo actuales
            txtRangoVersiculos.Text = $"{_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}:1-10";
        }
        
        private void btnValidar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Parsear el rango de versículos
                var (libro, capitulo, inicio, fin) = ParsearRangoVersiculos(txtRangoVersiculos.Text);
                
                // Validar que el libro y capítulo coincidan con los seleccionados
                if (libro.ToLower() != _libroSeleccionado.Nombre.ToLower() && 
                    libro.ToLower() != _libroSeleccionado.Abreviatura.ToLower())
                {
                    MessageBox.Show($"El libro '{libro}' no coincide con el libro seleccionado '{_libroSeleccionado.Nombre}'.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                if (capitulo != _capituloSeleccionado.Numero)
                {
                    MessageBox.Show($"El capítulo {capitulo} no coincide con el capítulo seleccionado {_capituloSeleccionado.Numero}.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Validar el rango
                if (inicio <= 0 || fin <= 0 || inicio > fin)
                {
                    MessageBox.Show("El rango de versículos es inválido. Asegúrese de que inicio y fin sean números positivos y que inicio sea menor o igual a fin.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Generar vista previa
                _versiculosPreview.Clear();
                for (int numero = inicio; numero <= fin; numero++)
                {
                    _versiculosPreview.Add(new Versiculo
                    {
                        Numero = numero,
                        Texto = txtTextoVersiculos.Text,
                        CapituloId = _capituloSeleccionado.Id
                    });
                }
                
                // Mostrar vista previa
                lstVistaPrevia.ItemsSource = null;
                lstVistaPrevia.ItemsSource = _versiculosPreview;
                
                // Habilitar botón de agregar
                btnAgregar.IsEnabled = true;
                
                MessageBox.Show($"Se agregarán {_versiculosPreview.Count} versículos. Revise la vista previa y presione 'Agregar Versículos' para confirmar.", 
                    "Validación exitosa", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al validar: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                btnAgregar.IsEnabled = false;
            }
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int versiculosAgregados = 0;
                
                // Verificar versículos existentes
                var versiculosExistentes = _bibliaService.ObtenerVersiculos(
                    _versionSeleccionada.Id, 
                    _libroSeleccionado.Id, 
                    _capituloSeleccionado.Id);
                
                // Agregar cada versículo
                foreach (var versiculo in _versiculosPreview)
                {
                    // Verificar si ya existe este número de versículo
                    if (versiculosExistentes.Any(v => v.Numero == versiculo.Numero))
                    {
                        if (MessageBox.Show($"El versículo {versiculo.Numero} ya existe. ¿Desea sobrescribirlo?", 
                            "Confirmar sobrescritura", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                        {
                            continue; // Saltar este versículo
                        }
                        
                        // Obtener el versículo existente y actualizarlo
                        var existente = versiculosExistentes.First(v => v.Numero == versiculo.Numero);
                        var actualizado = new Versiculo
                        {
                            Id = existente.Id,
                            Numero = versiculo.Numero,
                            Texto = versiculo.Texto,
                            CapituloId = _capituloSeleccionado.Id
                        };
                        
                        _bibliaService.ActualizarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            actualizado);
                    }
                    else
                    {
                        // Agregar nuevo versículo
                        _bibliaService.AgregarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            versiculo);
                    }
                    
                    versiculosAgregados++;
                }
                
                MessageBox.Show($"Se han agregado/actualizado {versiculosAgregados} versículos correctamente.", 
                    "Operación exitosa", MessageBoxButton.OK, MessageBoxImage.Information);
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar versículos: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private (string Libro, int Capitulo, int Inicio, int Fin) ParsearRangoVersiculos(string texto)
        {
            // Patrón para reconocer: "Libro Capítulo:Inicio-Fin"
            // También acepta: "Libro Capítulo:Inicio" (un solo versículo)
            var regex = new Regex(@"^([\w\s]+)\s+(\d+):(\d+)(?:-(\d+))?$");
            var match = regex.Match(texto.Trim());
            
            if (!match.Success)
            {
                throw new FormatException("El formato debe ser 'Libro Capítulo:Inicio-Fin' o 'Libro Capítulo:Inicio'");
            }
            
            string libro = match.Groups[1].Value.Trim();
            int capitulo = int.Parse(match.Groups[2].Value);
            int inicio = int.Parse(match.Groups[3].Value);
            
            // Si no se especificó un rango (solo un número), entonces fin es igual a inicio
            int fin = match.Groups[4].Success 
                ? int.Parse(match.Groups[4].Value) 
                : inicio;
                
            return (libro, capitulo, inicio, fin);
        }
    }
}
```

## 3. Modifica el GestionContenidoWindow.xaml

Añade un nuevo botón junto al botón "Agregar Versículo" existente. Modifica la sección donde se define ese botón en tu archivo [`BibliaApp/Views/GestionContenidoWindow.xaml`](BibliaApp/Views/GestionContenidoWindow.xaml ):

```xml
<DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
        <Button x:Name="btnAgregarMultiplesVersiculos" Content="Agregar Múltiples" Width="120" Click="btnAgregarMultiplesVersiculos_Click" Margin="0,0,10,0"/>
        <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click"/>
    </StackPanel>
    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
</DockPanel>
```

## Explicación de las correcciones:

1. He proporcionado el código completo para MultipleVersiculosWindow.xaml.cs, que incluye:
   - El constructor que acepta los 4 parámetros necesarios
   - El método btnAgregar_Click que faltaba
   - Toda la lógica para manejar la entrada del usuario y agregar múltiples versículos

2. El archivo XAML de MultipleVersiculosWindow ahora está correctamente configurado

3. El botón en GestionContenidoWindow.xaml ha sido modificado para incluir el botón "Agregar Múltiples" 

Con estas correcciones, deberías poder compilar y ejecutar la aplicación correctamente. La nueva funcionalidad te permitirá ingresar un rango de versículos (como "Génesis 1:1-20") y agregar todos esos versículos de una sola vez, lo que hará mucho más eficiente la carga de datos en tu aplicación de Biblia.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: Ok, el error en agregar varios versiculos es que no se diferencia claramente el ingreso del versiculo en su orden, es decir; si ingreso Genesis 1:1-10, debe existir un diferenciador, que permita diferenciar un versiculo del otro, por ejemplo, por favor, para saber diferenciar versiculo, ingrese numero y un punto, y despues el versiculo, entonces, ese seria el diferenciador, por medio de un if.

GitHub Copilot: # Mejora para diferenciar versículos en el ingreso múltiple

Entiendo lo que necesitas. Vamos a modificar la ventana `MultipleVersiculosWindow` para que permita ingresar los versículos diferenciados por su número seguido de un punto. De esta forma, cuando ingreses "Génesis 1:1-10", podrás distinguir cada versículo específico.

## 1. Modificación de MultipleVersiculosWindow.xaml

```xml
<Window x:Class="BibliaApp.Views.MultipleVersiculosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Múltiples Versículos" Height="550" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
            <Run FontWeight="Bold">Paso 1:</Run> Ingrese el rango de versículos en formato: Libro Capítulo:Inicio-Fin
            <LineBreak/>
            Ejemplo: Génesis 1:1-10
        </TextBlock>
        
        <Grid Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBox x:Name="txtRangoVersiculos" Grid.Column="0" Margin="0,0,10,0"/>
            <Button x:Name="btnValidar" Grid.Column="1" Content="Validar" Click="btnValidar_Click" Width="80"/>
        </Grid>
        
        <TextBlock Grid.Row="2" TextWrapping="Wrap" Margin="0,0,0,10">
            <Run FontWeight="Bold">Paso 2:</Run> Ingrese el texto para cada versículo. 
            <LineBreak/>
            Cada versículo debe comenzar con su número seguido de un punto. Ejemplo:
            <LineBreak/>
            1. En el principio creó Dios los cielos y la tierra.
            <LineBreak/>
            2. Y la tierra estaba desordenada y vacía...
        </TextBlock>
        
        <TextBox x:Name="txtTextoVersiculos" Grid.Row="3" TextWrapping="Wrap" AcceptsReturn="True" 
                 Margin="0,0,0,15" VerticalScrollBarVisibility="Auto"/>
        
        <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="btnCancelar" Content="Cancelar" Width="100" Margin="0,0,10,0" Click="btnCancelar_Click"/>
            <Button x:Name="btnAgregar" Content="Agregar Versículos" Width="120" Click="btnAgregar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 2. Actualización de MultipleVersiculosWindow.xaml.cs

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class MultipleVersiculosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        
        private int _inicioRango;
        private int _finRango;
        private bool _rangoValidado = false;
        
        public MultipleVersiculosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            
            // Sugerencia inicial con el libro y capítulo actuales
            txtRangoVersiculos.Text = $"{_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}:1-10";
        }
        
        private void btnValidar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Parsear el rango de versículos
                var (libro, capitulo, inicio, fin) = ParsearRangoVersiculos(txtRangoVersiculos.Text);
                
                // Validar que el libro y capítulo coincidan con los seleccionados
                if (libro.ToLower() != _libroSeleccionado.Nombre.ToLower() && 
                    libro.ToLower() != _libroSeleccionado.Abreviatura.ToLower())
                {
                    MessageBox.Show($"El libro '{libro}' no coincide con el libro seleccionado '{_libroSeleccionado.Nombre}'.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                if (capitulo != _capituloSeleccionado.Numero)
                {
                    MessageBox.Show($"El capítulo {capitulo} no coincide con el capítulo seleccionado {_capituloSeleccionado.Numero}.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Validar el rango
                if (inicio <= 0 || fin <= 0 || inicio > fin)
                {
                    MessageBox.Show("El rango de versículos es inválido. Asegúrese de que inicio y fin sean números positivos y que inicio sea menor o igual a fin.", 
                        "Error de validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                
                // Guardar el rango validado
                _inicioRango = inicio;
                _finRango = fin;
                _rangoValidado = true;
                
                // Generar plantilla con los números para facilitar la entrada
                GenerarPlantillaVersiculos();
                
                MessageBox.Show($"Rango validado: {_inicioRango} a {_finRango}. Ahora ingrese el texto para cada versículo.", 
                    "Validación exitosa", MessageBoxButton.OK, MessageBoxImage.Information);
                
                txtTextoVersiculos.Focus();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al validar: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                _rangoValidado = false;
            }
        }
        
        private void GenerarPlantillaVersiculos()
        {
            if (!_rangoValidado) return;
            
            // Solo generar plantilla si el campo está vacío o el usuario lo confirma
            if (!string.IsNullOrWhiteSpace(txtTextoVersiculos.Text))
            {
                var result = MessageBox.Show("¿Desea reemplazar el texto actual con una plantilla?", 
                    "Confirmar", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    
                if (result == MessageBoxResult.No)
                    return;
            }
            
            // Crear plantilla
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            for (int i = _inicioRango; i <= _finRango; i++)
            {
                sb.AppendLine($"{i}. ");
            }
            
            txtTextoVersiculos.Text = sb.ToString();
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            if (!_rangoValidado)
            {
                MessageBox.Show("Primero debe validar el rango de versículos.", 
                    "Validación requerida", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            
            try
            {
                // Extraer los versículos del texto ingresado
                var versiculos = ExtraerVersiculos(txtTextoVersiculos.Text);
                
                if (versiculos.Count == 0)
                {
                    MessageBox.Show("No se encontraron versículos en el formato correcto. Cada versículo debe comenzar con su número seguido de un punto.", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                // Validar que los números estén en el rango especificado
                var numerosInvalidos = versiculos
                    .Where(v => v.Numero < _inicioRango || v.Numero > _finRango)
                    .Select(v => v.Numero)
                    .ToList();
                    
                if (numerosInvalidos.Any())
                {
                    string listaInvalidos = string.Join(", ", numerosInvalidos);
                    MessageBox.Show($"Los siguientes números de versículo están fuera del rango especificado: {listaInvalidos}", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                
                // Mostrar confirmación con recuento
                var confirmacion = MessageBox.Show($"Se agregarán {versiculos.Count} versículos (de {_inicioRango} a {_finRango}). ¿Desea continuar?", 
                    "Confirmar", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    
                if (confirmacion != MessageBoxResult.Yes)
                    return;
                
                // Obtener versículos existentes para comprobar duplicados
                var versiculosExistentes = _bibliaService.ObtenerVersiculos(
                    _versionSeleccionada.Id, 
                    _libroSeleccionado.Id, 
                    _capituloSeleccionado.Id);
                
                int agregados = 0;
                int actualizados = 0;
                
                // Agregar o actualizar cada versículo
                foreach (var versiculo in versiculos)
                {
                    var existente = versiculosExistentes.FirstOrDefault(v => v.Numero == versiculo.Numero);
                    
                    if (existente != null)
                    {
                        // Actualizar versículo existente
                        var actualizado = new Versiculo
                        {
                            Id = existente.Id,
                            Numero = versiculo.Numero,
                            Texto = versiculo.Texto,
                            CapituloId = _capituloSeleccionado.Id
                        };
                        
                        _bibliaService.ActualizarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            actualizado);
                            
                        actualizados++;
                    }
                    else
                    {
                        // Agregar nuevo versículo
                        _bibliaService.AgregarVersiculo(
                            _versionSeleccionada.Id, 
                            _libroSeleccionado.Id, 
                            _capituloSeleccionado.Id, 
                            versiculo);
                            
                        agregados++;
                    }
                }
                
                MessageBox.Show($"Operación completada: {agregados} versículos agregados, {actualizados} versículos actualizados.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al procesar versículos: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private List<Versiculo> ExtraerVersiculos(string texto)
        {
            List<Versiculo> versiculos = new List<Versiculo>();
            
            // Regex para encontrar patrones como "1. Texto del versículo"
            var regex = new Regex(@"(\d+)\.\s*(.+?)(?=\r?\n\d+\.|$)", RegexOptions.Singleline);
            var matches = regex.Matches(texto);
            
            foreach (Match match in matches)
            {
                if (int.TryParse(match.Groups[1].Value, out int numero))
                {
                    string textoVersiculo = match.Groups[2].Value.Trim();
                    
                    if (!string.IsNullOrWhiteSpace(textoVersiculo))
                    {
                        versiculos.Add(new Versiculo
                        {
                            Numero = numero,
                            Texto = textoVersiculo,
                            CapituloId = _capituloSeleccionado.Id
                        });
                    }
                }
            }
            
            return versiculos;
        }
        
        private (string Libro, int Capitulo, int Inicio, int Fin) ParsearRangoVersiculos(string texto)
        {
            // Patrón para reconocer: "Libro Capítulo:Inicio-Fin"
            // También acepta: "Libro Capítulo:Inicio" (un solo versículo)
            var regex = new Regex(@"^([\w\s]+)\s+(\d+):(\d+)(?:-(\d+))?$");
            var match = regex.Match(texto.Trim());
            
            if (!match.Success)
            {
                throw new FormatException("El formato debe ser 'Libro Capítulo:Inicio-Fin' o 'Libro Capítulo:Inicio'");
            }
            
            string libro = match.Groups[1].Value.Trim();
            int capitulo = int.Parse(match.Groups[2].Value);
            int inicio = int.Parse(match.Groups[3].Value);
            
            // Si no se especificó un rango (solo un número), entonces fin es igual a inicio
            int fin = match.Groups[4].Success 
                ? int.Parse(match.Groups[4].Value) 
                : inicio;
                
            return (libro, capitulo, inicio, fin);
        }
    }
}
```

## 3. Instrucciones de uso

Con esta implementación mejorada, podrás:

1. **Paso 1**: Ingresa el rango de versículos en formato "Libro Capítulo:Inicio-Fin" (ej. "Génesis 1:1-10")
2. **Paso 2**: Haz clic en "Validar"
3. **Paso 3**: Se generará automáticamente una plantilla con los números de versículos
4. **Paso 4**: Introduce el texto específico para cada versículo, asegurándote de que el formato sea:
   ```
   1. Texto del primer versículo
   2. Texto del segundo versículo
   3. Texto del tercer versículo
   ```
5. **Paso 5**: Haz clic en "Agregar Versículos"

## Características clave de esta implementación:

1. **Diferenciación clara**: Cada versículo se identifica por su número seguido de un punto
2. **Plantilla automática**: Genera automáticamente los números para facilitar la entrada
3. **Validación**: Verifica que los números de versículos estén dentro del rango especificado
4. **Flexibilidad**: Permite ingresar textos diferentes para cada versículo
5. **Retroalimentación**: Muestra un resumen de los versículos agregados/actualizados

Con esta mejora, podrás ingresar versículos múltiples de forma más eficiente y con textos específicos para cada uno.

Código similar encontrado con 2 tipos de licencias

RafaelG1986: Super, ahora quiero agregar, entre versiculos, titulos, esto se hace en una nueva vista, y lo que se pregunta es: entre que versiculos esta el titulo: Ejemplo: Genesis 1:5 y Genesis1:6, entonces, en la mitad, colocamos un titulo en Negrilla, mas grande, el titulo, entre esos versiculos.

GitHub Copilot: # Implementación de Títulos entre Versículos

Vamos a crear una funcionalidad para agregar títulos entre versículos específicos. Esto requerirá varias modificaciones:

## 1. Primero, creemos un modelo para los títulos

```csharp
// Models/TituloBiblico.cs
using System;

namespace BibliaApp.Models
{
    public class TituloBiblico
    {
        public int Id { get; set; }
        public string Texto { get; set; } = string.Empty;
        public string VersionId { get; set; } = string.Empty;
        public int LibroId { get; set; }
        public int CapituloId { get; set; }
        public int PosicionPrevia { get; set; } // Versículo después del cual aparece el título
    }
}
```

## 2. Añadir métodos al BibliaService para gestionar títulos

```csharp
// Services/BibliaService.cs - Añadir estos métodos

// Añadir esta propiedad a la clase BibliaService
private List<TituloBiblico> _titulos = new List<TituloBiblico>();
private readonly string _archivoTitulos;

// Modificar el constructor para incluir
public BibliaService()
{
    // Código existente...
    _archivoTitulos = Path.Combine(appDataFolder, "titulosBiblicos.json");
    _titulos = CargarTitulos();
}

private List<TituloBiblico> CargarTitulos()
{
    if (File.Exists(_archivoTitulos))
    {
        try
        {
            string json = File.ReadAllText(_archivoTitulos);
            return JsonSerializer.Deserialize<List<TituloBiblico>>(json) ?? new List<TituloBiblico>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar títulos: {ex.Message}");
            return new List<TituloBiblico>();
        }
    }
    
    return new List<TituloBiblico>();
}

private void GuardarTitulos()
{
    try
    {
        string json = JsonSerializer.Serialize(_titulos, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoTitulos, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar títulos: {ex.Message}");
    }
}

public List<TituloBiblico> ObtenerTitulos(string versionId, int libroId, int capituloId)
{
    return _titulos
        .Where(t => t.VersionId == versionId && t.LibroId == libroId && t.CapituloId == capituloId)
        .OrderBy(t => t.PosicionPrevia)
        .ToList();
}

public void AgregarTitulo(TituloBiblico titulo)
{
    // Asignar ID
    titulo.Id = _titulos.Count > 0 ? _titulos.Max(t => t.Id) + 1 : 1;
    _titulos.Add(titulo);
    GuardarTitulos();
}

public void ActualizarTitulo(TituloBiblico titulo)
{
    var tituloExistente = _titulos.FirstOrDefault(t => t.Id == titulo.Id);
    if (tituloExistente == null)
        throw new Exception($"No se encontró el título con ID {titulo.Id}");
    
    // Actualizar propiedades
    tituloExistente.Texto = titulo.Texto;
    tituloExistente.PosicionPrevia = titulo.PosicionPrevia;
    
    GuardarTitulos();
}

public void EliminarTitulo(int tituloId)
{
    var titulo = _titulos.FirstOrDefault(t => t.Id == tituloId);
    if (titulo == null)
        throw new Exception($"No se encontró el título con ID {tituloId}");
    
    _titulos.Remove(titulo);
    GuardarTitulos();
}
```

## 3. Crear una ventana para gestionar títulos

```xml
<!-- Views/GestionTitulosWindow.xaml -->
<Window x:Class="BibliaApp.Views.GestionTitulosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Títulos Bíblicos" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de información y selección -->
        <GroupBox Grid.Row="0" Header="Ubicación del Título" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
                    Indique después de qué versículo desea insertar el título.
                    <LineBreak/>
                    Por ejemplo, si desea insertar un título entre los versículos 5 y 6, seleccione el versículo 5.
                </TextBlock>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Label Grid.Column="0" Content="Versículo:" VerticalAlignment="Center"/>
                    <ComboBox x:Name="cbxVersiculos" Grid.Column="1" Margin="5,0,15,0" SelectionChanged="cbxVersiculos_SelectionChanged"/>
                    
                    <Label Grid.Column="2" Content="Título:" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTitulo" Grid.Column="3" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Lista de títulos existentes -->
        <GroupBox Grid.Row="1" Header="Títulos Existentes">
            <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                        <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                    </GridView>
                </ListView.View>
            </ListView>
        </GroupBox>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="btnAgregar" Content="Agregar Título" Width="100" Margin="0,0,10,0" Click="btnAgregar_Click"/>
            <Button x:Name="btnActualizar" Content="Actualizar" Width="100" Margin="0,0,10,0" Click="btnActualizar_Click" IsEnabled="False"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Width="100" Margin="0,0,10,0" Click="btnEliminar_Click" IsEnabled="False"/>
            <Button x:Name="btnCerrar" Content="Cerrar" Width="100" Click="btnCerrar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 4. Implementar el code-behind para la gestión de títulos

```csharp
// Views/GestionTitulosWindow.xaml.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionTitulosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private List<Versiculo> _versiculos;
        private TituloBiblico? _tituloSeleccionado;
        
        public GestionTitulosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            
            Title = $"Gestión de Títulos - {_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}";
            
            // Cargar versículos
            CargarVersiculos();
            
            // Cargar títulos existentes
            CargarTitulos();
        }
        
        private void CargarVersiculos()
        {
            _versiculos = _bibliaService.ObtenerVersiculos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            cbxVersiculos.ItemsSource = _versiculos;
            cbxVersiculos.DisplayMemberPath = "Numero";
            cbxVersiculos.SelectedValuePath = "Id";
            
            if (_versiculos.Any())
            {
                cbxVersiculos.SelectedIndex = 0;
            }
        }
        
        private void CargarTitulos()
        {
            var titulos = _bibliaService.ObtenerTitulos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            lstTitulos.ItemsSource = titulos;
            
            // Limpiar selección
            _tituloSeleccionado = null;
            btnActualizar.IsEnabled = false;
            btnEliminar.IsEnabled = false;
        }
        
        private void lstTitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _tituloSeleccionado = lstTitulos.SelectedItem as TituloBiblico;
            
            if (_tituloSeleccionado != null)
            {
                // Establecer los valores en los controles
                txtTitulo.Text = _tituloSeleccionado.Texto;
                
                // Seleccionar el versículo en el combo
                var versiculo = _versiculos.FirstOrDefault(v => v.Numero == _tituloSeleccionado.PosicionPrevia);
                if (versiculo != null)
                {
                    cbxVersiculos.SelectedItem = versiculo;
                }
                
                // Habilitar botones de edición
                btnActualizar.IsEnabled = true;
                btnEliminar.IsEnabled = true;
            }
            else
            {
                btnActualizar.IsEnabled = false;
                btnEliminar.IsEnabled = false;
            }
        }
        
        private void cbxVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Nada que hacer aquí
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var nuevoTitulo = new TituloBiblico
                {
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.AgregarTitulo(nuevoTitulo);
                
                MessageBox.Show("Título agregado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Limpiar campo
                txtTitulo.Text = string.Empty;
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnActualizar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var tituloActualizado = new TituloBiblico
                {
                    Id = _tituloSeleccionado.Id,
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.ActualizarTitulo(tituloActualizado);
                
                MessageBox.Show("Título actualizado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al actualizar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            var resultado = MessageBox.Show("¿Está seguro de que desea eliminar este título?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarTitulo(_tituloSeleccionado.Id);
                    
                    MessageBox.Show("Título eliminado correctamente.", 
                        "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Limpiar campo
                    txtTitulo.Text = string.Empty;
                    
                    // Recargar lista
                    CargarTitulos();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar título: {ex.Message}", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnCerrar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = true;
            Close();
        }
    }
}
```

## 5. Modificar la vista de versículos para mostrar los títulos

Ahora, modificaremos el ListView de versículos en MainWindow.xaml:

```xml
<!-- En MainWindow.xaml, reemplazar el ListView existente -->
<ListView x:Name="VersiculosListView" Grid.Row="1">
    <ListView.ItemTemplateSelector>
        <local:VersiculoItemTemplateSelector />
    </ListView.ItemTemplateSelector>
</ListView>
```

## 6. Crear un selector de plantillas para diferenciar versículos y títulos

```csharp
// Añadir en un nuevo archivo: TemplateSelectors/VersiculoItemTemplateSelector.cs
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;

namespace BibliaApp
{
    public class VersiculoItemTemplateSelector : DataTemplateSelector
    {
        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            FrameworkElement element = container as FrameworkElement;
            
            if (element != null && item != null)
            {
                if (item is TituloBiblico)
                {
                    return element.FindResource("TituloTemplate") as DataTemplate;
                }
                else if (item is Versiculo)
                {
                    return element.FindResource("VersiculoTemplate") as DataTemplate;
                }
            }
            
            return null;
        }
    }
}
```

## 7. Definir las plantillas en App.xaml

```xml
<!-- Añadir en App.xaml, dentro de Application.Resources -->
<DataTemplate x:Key="VersiculoTemplate">
    <StackPanel Orientation="Horizontal" Margin="0,5">
        <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0" VerticalAlignment="Top" Foreground="Black"/>
        <TextBlock Text="{Binding Texto}" TextWrapping="Wrap" Foreground="Black"/>
    </StackPanel>
</DataTemplate>

<DataTemplate x:Key="TituloTemplate">
    <TextBlock Text="{Binding Texto}" 
               FontWeight="Bold" 
               FontSize="16" 
               TextAlignment="Center"
               Margin="0,15,0,5"
               Foreground="DarkBlue"/>
</DataTemplate>
```

## 8. Modificar el método MostrarCapitulo en MainWindow.xaml.cs

```csharp
// En MainWindow.xaml.cs, modificar el método MostrarCapitulo
private void MostrarCapitulo(Capitulo? capitulo)
{
    if (_libroActual == null) return;
    
    if (capitulo != null)
    {
        TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
        
        var versiculos = _bibliaService.ObtenerVersiculos(
            _versionActual?.Id ?? string.Empty, 
            _libroActual.Id, 
            capitulo.Id);
            
        var titulos = _bibliaService.ObtenerTitulos(
            _versionActual?.Id ?? string.Empty,
            _libroActual.Id,
            capitulo.Id);
            
        // Crear una lista combinada de versículos y títulos
        var elementosCombinados = new List<object>();
        
        // Añadir versículos iniciales (antes del primer título)
        foreach (var versiculo in versiculos.OrderBy(v => v.Numero))
        {
            // Añadir versículo
            elementosCombinados.Add(versiculo);
            
            // Añadir título si corresponde después de este versículo
            var titulo = titulos.FirstOrDefault(t => t.PosicionPrevia == versiculo.Numero);
            if (titulo != null)
            {
                elementosCombinados.Add(titulo);
            }
        }
        
        VersiculosListView.ItemsSource = elementosCombinados;
    }
    else
    {
        TituloTextBlock.Text = string.Empty;
        VersiculosListView.ItemsSource = null;
    }
}
```

## 9. Añadir botón para gestionar títulos en GestionContenidoWindow.xaml

```xml
<!-- En GestionContenidoWindow.xaml, añadir un botón junto al botón "Agregar Múltiples" -->
<StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
    <Button x:Name="btnGestionarTitulos" Content="Gestionar Títulos" Width="120" Click="btnGestionarTitulos_Click" Margin="0,0,10,0"/>
    <Button x:Name="btnAgregarMultiplesVersiculos" Content="Agregar Múltiples" Width="120" Click="btnAgregarMultiplesVersiculos_Click" Margin="0,0,10,0"/>
    <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click"/>
</StackPanel>
```

## 10. Implementar el manejador de eventos en GestionContenidoWindow.xaml.cs

```csharp
// En GestionContenidoWindow.xaml.cs
private void btnGestionarTitulos_Click(object sender, RoutedEventArgs e)
{
    if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
    
    var ventana = new GestionTitulosWindow(_bibliaService, _versionSeleccionada, _libroSeleccionado, _capituloSeleccionado);
    ventana.Owner = this;
    
    if (ventana.ShowDialog() == true)
    {
        // Recargar la lista de versículos para reflejar los cambios de títulos
        CargarVersiculos();
    }
}
```

Con esta implementación, ahora podrás:

1. Acceder a la gestión de títulos desde la ventana de gestión de contenido
2. Agregar títulos que aparecerán entre versículos específicos
3. Visualizar estos títulos con un formato destacado (negrita, tamaño más grande, color diferente)
4. Editar o eliminar títulos existentes

¿Quieres hacer algún ajuste específico o necesitas más detalles sobre alguna parte de la implementación?

Código similar encontrado con 1 tipo de licencia

RafaelG1986: "GestionTitulosWindow" no contiene una definición para "btnAgregarVersiculo_Click" ni un método de extensión accesible "btnAgregarVersiculo_Click" que acepte un primer argumento del tipo "GestionTitulosWindow" (¿falta alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección del error en GestionTitulosWindow

El error indica que hay un problema en el archivo GestionTitulosWindow.xaml donde se está haciendo referencia a un manejador de eventos que no está definido en el código de respaldo (code-behind). Vamos a crear correctamente el archivo GestionTitulosWindow.xaml y su respectivo code-behind.

## 1. Primero, crea la clase TituloBiblico.cs

```csharp
// Models/TituloBiblico.cs
using System;

namespace BibliaApp.Models
{
    public class TituloBiblico
    {
        public int Id { get; set; }
        public string Texto { get; set; } = string.Empty;
        public string VersionId { get; set; } = string.Empty;
        public int LibroId { get; set; }
        public int CapituloId { get; set; }
        public int PosicionPrevia { get; set; } // Versículo después del cual aparece el título
    }
}
```

## 2. Actualiza BibliaService.cs con los métodos para gestionar títulos

```csharp
// En BibliaService.cs, añade estas propiedades y métodos:

private List<TituloBiblico> _titulos = new List<TituloBiblico>();
private readonly string _archivoTitulos;

// En el constructor, añade:
_archivoTitulos = Path.Combine(appDataFolder, "titulosBiblicos.json");
_titulos = CargarTitulos();

// Métodos para manejar títulos
private List<TituloBiblico> CargarTitulos()
{
    if (File.Exists(_archivoTitulos))
    {
        try
        {
            string json = File.ReadAllText(_archivoTitulos);
            return JsonSerializer.Deserialize<List<TituloBiblico>>(json) ?? new List<TituloBiblico>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar títulos: {ex.Message}");
            return new List<TituloBiblico>();
        }
    }
    
    return new List<TituloBiblico>();
}

private void GuardarTitulos()
{
    try
    {
        string json = JsonSerializer.Serialize(_titulos, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoTitulos, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar títulos: {ex.Message}");
    }
}

public List<TituloBiblico> ObtenerTitulos(string versionId, int libroId, int capituloId)
{
    return _titulos
        .Where(t => t.VersionId == versionId && t.LibroId == libroId && t.CapituloId == capituloId)
        .OrderBy(t => t.PosicionPrevia)
        .ToList();
}

public void AgregarTitulo(TituloBiblico titulo)
{
    // Asignar ID
    titulo.Id = _titulos.Count > 0 ? _titulos.Max(t => t.Id) + 1 : 1;
    _titulos.Add(titulo);
    GuardarTitulos();
}

public void ActualizarTitulo(TituloBiblico titulo)
{
    var tituloExistente = _titulos.FirstOrDefault(t => t.Id == titulo.Id);
    if (tituloExistente == null)
        throw new Exception($"No se encontró el título con ID {titulo.Id}");
    
    // Actualizar propiedades
    tituloExistente.Texto = titulo.Texto;
    tituloExistente.PosicionPrevia = titulo.PosicionPrevia;
    
    GuardarTitulos();
}

public void EliminarTitulo(int tituloId)
{
    var titulo = _titulos.FirstOrDefault(t => t.Id == tituloId);
    if (titulo == null)
        throw new Exception($"No se encontró el título con ID {tituloId}");
    
    _titulos.Remove(titulo);
    GuardarTitulos();
}
```

## 3. Ahora, crea GestionTitulosWindow.xaml correctamente:

```xml
<Window x:Class="BibliaApp.Views.GestionTitulosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Títulos Bíblicos" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de información y selección -->
        <GroupBox Grid.Row="0" Header="Ubicación del Título" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
                    Indique después de qué versículo desea insertar el título.
                    <LineBreak/>
                    Por ejemplo, si desea insertar un título entre los versículos 5 y 6, seleccione el versículo 5.
                </TextBlock>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Label Grid.Column="0" Content="Versículo:" VerticalAlignment="Center"/>
                    <ComboBox x:Name="cbxVersiculos" Grid.Column="1" Margin="5,0,15,0" SelectionChanged="cbxVersiculos_SelectionChanged"/>
                    
                    <Label Grid.Column="2" Content="Título:" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTitulo" Grid.Column="3" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Lista de títulos existentes -->
        <GroupBox Grid.Row="1" Header="Títulos Existentes">
            <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                        <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                    </GridView>
                </ListView.View>
            </ListView>
        </GroupBox>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="btnAgregar" Content="Agregar Título" Width="100" Margin="0,0,10,0" Click="btnAgregar_Click"/>
            <Button x:Name="btnActualizar" Content="Actualizar" Width="100" Margin="0,0,10,0" Click="btnActualizar_Click" IsEnabled="False"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Width="100" Margin="0,0,10,0" Click="btnEliminar_Click" IsEnabled="False"/>
            <Button x:Name="btnCerrar" Content="Cerrar" Width="100" Click="btnCerrar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 4. Y finalmente, crea GestionTitulosWindow.xaml.cs:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionTitulosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private List<Versiculo> _versiculos;
        private TituloBiblico? _tituloSeleccionado;
        
        public GestionTitulosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            _versiculos = new List<Versiculo>();
            
            Title = $"Gestión de Títulos - {_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}";
            
            // Cargar versículos
            CargarVersiculos();
            
            // Cargar títulos existentes
            CargarTitulos();
        }
        
        private void CargarVersiculos()
        {
            _versiculos = _bibliaService.ObtenerVersiculos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            cbxVersiculos.ItemsSource = _versiculos;
            cbxVersiculos.DisplayMemberPath = "Numero";
            cbxVersiculos.SelectedValuePath = "Id";
            
            if (_versiculos.Any())
            {
                cbxVersiculos.SelectedIndex = 0;
            }
        }
        
        private void CargarTitulos()
        {
            var titulos = _bibliaService.ObtenerTitulos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            lstTitulos.ItemsSource = titulos;
            
            // Limpiar selección
            _tituloSeleccionado = null;
            btnActualizar.IsEnabled = false;
            btnEliminar.IsEnabled = false;
        }
        
        private void lstTitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _tituloSeleccionado = lstTitulos.SelectedItem as TituloBiblico;
            
            if (_tituloSeleccionado != null)
            {
                // Establecer los valores en los controles
                txtTitulo.Text = _tituloSeleccionado.Texto;
                
                // Seleccionar el versículo en el combo
                var versiculo = _versiculos.FirstOrDefault(v => v.Numero == _tituloSeleccionado.PosicionPrevia);
                if (versiculo != null)
                {
                    cbxVersiculos.SelectedItem = versiculo;
                }
                
                // Habilitar botones de edición
                btnActualizar.IsEnabled = true;
                btnEliminar.IsEnabled = true;
            }
            else
            {
                btnActualizar.IsEnabled = false;
                btnEliminar.IsEnabled = false;
            }
        }
        
        private void cbxVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Este método está vacío, pero se necesita porque está referenciado en el XAML
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var nuevoTitulo = new TituloBiblico
                {
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.AgregarTitulo(nuevoTitulo);
                
                MessageBox.Show("Título agregado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Limpiar campo
                txtTitulo.Text = string.Empty;
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnActualizar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var tituloActualizado = new TituloBiblico
                {
                    Id = _tituloSeleccionado.Id,
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.ActualizarTitulo(tituloActualizado);
                
                MessageBox.Show("Título actualizado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al actualizar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            var resultado = MessageBox.Show("¿Está seguro de que desea eliminar este título?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarTitulo(_tituloSeleccionado.Id);
                    
                    MessageBox.Show("Título eliminado correctamente.", 
                        "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Limpiar campo
                    txtTitulo.Text = string.Empty;
                    
                    // Recargar lista
                    CargarTitulos();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar título: {ex.Message}", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnCerrar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = true;
            Close();
        }
    }
}
```

## 5. Modificar MainWindow.xaml.cs para mostrar títulos

```csharp
// En MainWindow.xaml.cs, modifica el método MostrarCapitulo:

private void MostrarCapitulo(Capitulo? capitulo)
{
    if (_libroActual == null) return;
    
    if (capitulo != null)
    {
        TituloTextBlock.Text = $"{_libroActual.Nombre} {capitulo.Numero}";
        
        var versiculos = _bibliaService.ObtenerVersiculos(
            _versionActual?.Id ?? string.Empty, 
            _libroActual.Id, 
            capitulo.Id);
            
        var titulos = _bibliaService.ObtenerTitulos(
            _versionActual?.Id ?? string.Empty,
            _libroActual.Id,
            capitulo.Id);
            
        // Crear una lista combinada de versículos y títulos
        var elementosCombinados = new List<object>();
        
        // Añadir todos los versículos
        foreach (var versiculo in versiculos.OrderBy(v => v.Numero))
        {
            // Añadir versículo
            elementosCombinados.Add(versiculo);
            
            // Añadir título si corresponde después de este versículo
            var titulo = titulos.FirstOrDefault(t => t.PosicionPrevia == versiculo.Numero);
            if (titulo != null)
            {
                elementosCombinados.Add(titulo);
            }
        }
        
        VersiculosListView.ItemsSource = elementosCombinados;
    }
    else
    {
        TituloTextBlock.Text = string.Empty;
        VersiculosListView.ItemsSource = null;
    }
}
```

## 6. Modificar GestionContenidoWindow.xaml

Añade un botón para gestionar títulos:

```xml
<DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
        <Button x:Name="btnGestionarTitulos" Content="Gestionar Títulos" Width="120" Click="btnGestionarTitulos_Click" Margin="0,0,10,0"/>
        <Button x:Name="btnAgregarMultiplesVersiculos" Content="Agregar Múltiples" Width="120" Click="btnAgregarMultiplesVersiculos_Click" Margin="0,0,10,0"/>
        <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click"/>
    </StackPanel>
    <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
</DockPanel>
```

## 7. Añadir ItemTemplateSelector y plantillas en App.xaml

```xml
<!-- En App.xaml, añadir dentro de Application.Resources: -->
<DataTemplate x:Key="VersiculoTemplate">
    <StackPanel Orientation="Horizontal" Margin="0,5">
        <TextBlock Text="{Binding Numero}" FontWeight="Bold" Margin="0,0,5,0" VerticalAlignment="Top" Foreground="Black"/>
        <TextBlock Text="{Binding Texto}" TextWrapping="Wrap" Foreground="Black"/>
    </StackPanel>
</DataTemplate>

<DataTemplate x:Key="TituloTemplate">
    <TextBlock Text="{Binding Texto}" 
               FontWeight="Bold" 
               FontSize="16" 
               TextAlignment="Center"
               Margin="0,15,0,5"
               Foreground="DarkBlue"/>
</DataTemplate>
```

## 8. Crear VersiculoItemTemplateSelector.cs

```csharp
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;

namespace BibliaApp
{
    public class VersiculoItemTemplateSelector : DataTemplateSelector
    {
        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            FrameworkElement element = container as FrameworkElement;
            
            if (element != null && item != null)
            {
                if (item is TituloBiblico)
                {
                    return element.FindResource("TituloTemplate") as DataTemplate;
                }
                else if (item is Versiculo)
                {
                    return element.FindResource("VersiculoTemplate") as DataTemplate;
                }
            }
            
            return null;
        }
    }
}
```

## 9. Compilar y Ejecutar

Con estas correcciones, deberías poder compilar y ejecutar la aplicación sin errores. Ahora podrás:

1. Acceder a la gestión de títulos desde la ventana de gestión de contenido
2. Agregar títulos entre versículos específicos
3. Ver los títulos destacados en la interfaz principal cuando estás leyendo
4. Editar o eliminar títulos existentes

La funcionalidad permitirá organizar mejor el contenido bíblico, proporcionando encabezados entre secciones para mejorar la experiencia de lectura.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: 8. Crear VersiculoItemTemplateSelector.cs
donde lo creo?

GitHub Copilot: # Ubicación para VersiculoItemTemplateSelector.cs

Para crear el archivo `VersiculoItemTemplateSelector.cs`, debes seguir estos pasos:

## 1. Crear carpeta para templating

Lo más organizado es crear una nueva carpeta para este tipo de componentes:

1. Haz clic derecho en el proyecto BibliaApp en el Explorador de Soluciones
2. Selecciona `Agregar` > `Nueva carpeta`
3. Nombra la carpeta como `TemplateSelectors`

## 2. Crear el archivo en la nueva carpeta

1. Haz clic derecho en la carpeta `TemplateSelectors`
2. Selecciona `Agregar` > `Clase...`
3. Nombra el archivo como `VersiculoItemTemplateSelector.cs`

## 3. Contenido del archivo

```csharp
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;

namespace BibliaApp.TemplateSelectors
{
    public class VersiculoItemTemplateSelector : DataTemplateSelector
    {
        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            FrameworkElement element = container as FrameworkElement;
            
            if (element != null && item != null)
            {
                if (item is TituloBiblico)
                {
                    return element.FindResource("TituloTemplate") as DataTemplate;
                }
                else if (item is Versiculo)
                {
                    return element.FindResource("VersiculoTemplate") as DataTemplate;
                }
            }
            
            return null;
        }
    }
}
```

## 4. Actualizar referencias en XAML

Como has cambiado el namespace a `BibliaApp.TemplateSelectors`, debes actualizar el XAML en `MainWindow.xaml`:

```xml
<Window x:Class="BibliaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ts="clr-namespace:BibliaApp.TemplateSelectors"
        Title="BibliaApp" Height="600" Width="900">
    
    <Window.Resources>
        <ts:VersiculoItemTemplateSelector x:Key="VersiculoSelector"/>
    </Window.Resources>
    
    <!-- En la definición del ListView: -->
    <ListView x:Name="VersiculosListView" ItemTemplateSelector="{StaticResource VersiculoSelector}">
        <!-- Resto del contenido -->
    </ListView>
</Window>
```

Esta estructura organizativa facilita el mantenimiento del código y sigue las buenas prácticas de desarrollo en WPF, separando claramente los selectores de plantillas de otras partes de la aplicación.

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionTitulosWindow.xaml(55,90): error MC3089: el objeto 'GroupBox' tiene ya un elemento secundario y no puede agregar 'ListView'. 'GroupBox' sólo puede aceptar un elemento secundario. Línea 55, posición 90.

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección del error en GestionTitulosWindow.xaml

El error que estás experimentando ocurre porque en el archivo `GestionTitulosWindow.xaml` estás intentando añadir múltiples elementos directamente a un `GroupBox`, pero un `GroupBox` solo puede tener un único elemento hijo directo.

## Solución:

Necesitas envolver el `ListView` dentro de un panel contenedor como `Grid` o `StackPanel`.

### Modifica la sección del GroupBox en GestionTitulosWindow.xaml:

```xml
<!-- Lista de títulos existentes -->
<GroupBox Grid.Row="1" Header="Títulos Existentes">
    <Grid> <!-- Añade este contenedor -->
        <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                    <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                </GridView>
            </ListView.View>
        </ListView>
    </Grid> <!-- Cierra el contenedor -->
</GroupBox>
```

## Explicación:

1. En WPF, controles como `GroupBox`, `Button`, `ScrollViewer`, etc., solo pueden tener un hijo directo.
2. Si necesitas colocar múltiples elementos dentro de estos controles, debes usar un panel contenedor (como `Grid`, `StackPanel`, `DockPanel`, etc.)
3. El panel contenedor actúa como el único hijo directo del `GroupBox` y puede contener todos los elementos que necesites.

## XAML Correcto Completo:

```xml
<Window x:Class="BibliaApp.Views.GestionTitulosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Títulos Bíblicos" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de información y selección -->
        <GroupBox Grid.Row="0" Header="Ubicación del Título" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
                    Indique después de qué versículo desea insertar el título.
                    <LineBreak/>
                    Por ejemplo, si desea insertar un título entre los versículos 5 y 6, seleccione el versículo 5.
                </TextBlock>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Label Grid.Column="0" Content="Versículo:" VerticalAlignment="Center"/>
                    <ComboBox x:Name="cbxVersiculos" Grid.Column="1" Margin="5,0,15,0" SelectionChanged="cbxVersiculos_SelectionChanged"/>
                    
                    <Label Grid.Column="2" Content="Título:" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTitulo" Grid.Column="3" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Lista de títulos existentes -->
        <GroupBox Grid.Row="1" Header="Títulos Existentes">
            <Grid> <!-- Contenedor añadido -->
                <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                            <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </GroupBox>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="btnAgregar" Content="Agregar Título" Width="100" Margin="0,0,10,0" Click="btnAgregar_Click"/>
            <Button x:Name="btnActualizar" Content="Actualizar" Width="100" Margin="0,0,10,0" Click="btnActualizar_Click" IsEnabled="False"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Width="100" Margin="0,0,10,0" Click="btnEliminar_Click" IsEnabled="False"/>
            <Button x:Name="btnCerrar" Content="Cerrar" Width="100" Click="btnCerrar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

Con esta corrección, el error debería resolverse y podrás ver correctamente la ventana de gestión de títulos.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionTitulosWindow.xaml(55,90): error MC3089: el objeto 'GroupBox' tiene ya un elemento secundario y no puede agregar 'ListView'. 'GroupBox' sólo puede aceptar un elemento secundario. Línea 55, posición 90.

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto----------- dame el codigo completo de GestionTitulosWindow

GitHub Copilot: # Código completo para GestionTitulosWindow.xaml

Parece que estás teniendo un error porque el archivo GestionContenidoWindow.xaml contiene el código de `GestionTitulosWindow.xaml`. Vamos a crear correctamente ambos archivos.

## 1. Primero, crea un nuevo archivo llamado GestionTitulosWindow.xaml:

```xml
<Window x:Class="BibliaApp.Views.GestionTitulosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Títulos Bíblicos" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de información y selección -->
        <GroupBox Grid.Row="0" Header="Ubicación del Título" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
                    Indique después de qué versículo desea insertar el título.
                    <LineBreak/>
                    Por ejemplo, si desea insertar un título entre los versículos 5 y 6, seleccione el versículo 5.
                </TextBlock>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Label Grid.Column="0" Content="Versículo:" VerticalAlignment="Center"/>
                    <ComboBox x:Name="cbxVersiculos" Grid.Column="1" Margin="5,0,15,0" SelectionChanged="cbxVersiculos_SelectionChanged"/>
                    
                    <Label Grid.Column="2" Content="Título:" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTitulo" Grid.Column="3" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Lista de títulos existentes -->
        <GroupBox Grid.Row="1" Header="Títulos Existentes">
            <Grid>
                <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                            <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </GroupBox>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="btnAgregar" Content="Agregar Título" Width="100" Margin="0,0,10,0" Click="btnAgregar_Click"/>
            <Button x:Name="btnActualizar" Content="Actualizar" Width="100" Margin="0,0,10,0" Click="btnActualizar_Click" IsEnabled="False"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Width="100" Margin="0,0,10,0" Click="btnEliminar_Click" IsEnabled="False"/>
            <Button x:Name="btnCerrar" Content="Cerrar" Width="100" Click="btnCerrar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 2. Ahora, crea el archivo code-behind GestionTitulosWindow.xaml.cs:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionTitulosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private List<Versiculo> _versiculos;
        private TituloBiblico? _tituloSeleccionado;
        
        public GestionTitulosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            _versiculos = new List<Versiculo>();
            
            Title = $"Gestión de Títulos - {_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}";
            
            // Cargar versículos
            CargarVersiculos();
            
            // Cargar títulos existentes
            CargarTitulos();
        }
        
        private void CargarVersiculos()
        {
            _versiculos = _bibliaService.ObtenerVersiculos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            cbxVersiculos.ItemsSource = _versiculos;
            cbxVersiculos.DisplayMemberPath = "Numero";
            cbxVersiculos.SelectedValuePath = "Id";
            
            if (_versiculos.Any())
            {
                cbxVersiculos.SelectedIndex = 0;
            }
        }
        
        private void CargarTitulos()
        {
            var titulos = _bibliaService.ObtenerTitulos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            lstTitulos.ItemsSource = titulos;
            
            // Limpiar selección
            _tituloSeleccionado = null;
            btnActualizar.IsEnabled = false;
            btnEliminar.IsEnabled = false;
        }
        
        private void lstTitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _tituloSeleccionado = lstTitulos.SelectedItem as TituloBiblico;
            
            if (_tituloSeleccionado != null)
            {
                // Establecer los valores en los controles
                txtTitulo.Text = _tituloSeleccionado.Texto;
                
                // Seleccionar el versículo en el combo
                var versiculo = _versiculos.FirstOrDefault(v => v.Numero == _tituloSeleccionado.PosicionPrevia);
                if (versiculo != null)
                {
                    cbxVersiculos.SelectedItem = versiculo;
                }
                
                // Habilitar botones de edición
                btnActualizar.IsEnabled = true;
                btnEliminar.IsEnabled = true;
            }
            else
            {
                btnActualizar.IsEnabled = false;
                btnEliminar.IsEnabled = false;
            }
        }
        
        private void cbxVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Este método está vacío, pero se necesita porque está referenciado en el XAML
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var nuevoTitulo = new TituloBiblico
                {
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.AgregarTitulo(nuevoTitulo);
                
                MessageBox.Show("Título agregado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Limpiar campo
                txtTitulo.Text = string.Empty;
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnActualizar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var tituloActualizado = new TituloBiblico
                {
                    Id = _tituloSeleccionado.Id,
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.ActualizarTitulo(tituloActualizado);
                
                MessageBox.Show("Título actualizado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al actualizar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            var resultado = MessageBox.Show("¿Está seguro de que desea eliminar este título?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarTitulo(_tituloSeleccionado.Id);
                    
                    MessageBox.Show("Título eliminado correctamente.", 
                        "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Limpiar campo
                    txtTitulo.Text = string.Empty;
                    
                    // Recargar lista
                    CargarTitulos();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar título: {ex.Message}", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnCerrar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = true;
            Close();
        }
    }
}
```

## 3. Además, tienes que asegurarte de que GestionContenidoWindow.xaml tenga la definición correcta:

```xml
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido" Height="600" Width="800"
        WindowStartupLocation="CenterOwner">

    <!-- Aquí va el contenido de GestionContenidoWindow, que parece estar confundido con GestionTitulosWindow -->
    
</Window>
```

El problema principal es que tenías el código de `GestionTitulosWindow` dentro del archivo GestionContenidoWindow.xaml, lo que estaba causando conflictos. Al separar correctamente los archivos, todo debería funcionar sin errores.

Código similar encontrado con 1 tipo de licencia

RafaelG1986: error CS1061: "GestionContenidoWindow" no contiene una definición para "btnCerrar_Click" ni un método de extensión accesible "btnCerrar_Click" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de los archivos XAML y sus eventos

El problema es que el contenido de `GestionTitulosWindow.xaml` se ha copiado incorrectamente en GestionContenidoWindow.xaml. Vamos a corregir esto creando los archivos correctamente.

## 1. Primero, arregla el archivo GestionContenidoWindow.xaml

Reemplaza todo el contenido actual de GestionContenidoWindow.xaml con este:

```xml
<Window x:Class="BibliaApp.Views.GestionContenidoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Contenido Bíblico" Height="600" Width="900"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de selección de versión/libro/capítulo -->
        <GroupBox Header="Selección" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                
                <Label Grid.Column="0" Content="Versión:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cmbVersiones" Grid.Column="1" Margin="5,0" 
                          SelectionChanged="cmbVersiones_SelectionChanged"
                          DisplayMemberPath="Nombre"/>
                
                <Label Grid.Column="2" Content="Libro:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cmbLibros" Grid.Column="3" Margin="5,0" 
                          SelectionChanged="cmbLibros_SelectionChanged"
                          DisplayMemberPath="Nombre"/>
                
                <Label Grid.Column="4" Content="Capítulo:" VerticalAlignment="Center"/>
                <ComboBox x:Name="cmbCapitulos" Grid.Column="5" Margin="5,0" 
                          SelectionChanged="cmbCapitulos_SelectionChanged"
                          DisplayMemberPath="Numero"/>
            </Grid>
        </GroupBox>
        
        <!-- Pestañas de gestión -->
        <TabControl Grid.Row="1">
            <!-- Pestaña de gestión de versículos -->
            <TabItem Header="Versículos">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Barra de herramientas de versículos -->
                    <DockPanel DockPanel.Dock="Top" Margin="0,0,0,5">
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
                            <Button x:Name="btnGestionarTitulos" Content="Gestionar Títulos" Width="120" Click="btnGestionarTitulos_Click" Margin="0,0,10,0"/>
                            <Button x:Name="btnAgregarMultiplesVersiculos" Content="Agregar Múltiples" Width="120" Click="btnAgregarMultiplesVersiculos_Click" Margin="0,0,10,0"/>
                            <Button x:Name="btnAgregarVersiculo" Content="Agregar Versículo" Width="120" Click="btnAgregarVersiculo_Click"/>
                        </StackPanel>
                        <TextBlock Text="Versículos:" VerticalAlignment="Center"/>
                    </DockPanel>
                    
                    <!-- Lista de versículos -->
                    <ListView x:Name="lstVersiculos" Grid.Row="1" SelectionChanged="lstVersiculos_SelectionChanged">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Número" DisplayMemberBinding="{Binding Numero}" Width="60"/>
                                <GridViewColumn Header="Texto" DisplayMemberBinding="{Binding Texto}" Width="600"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                    
                    <!-- Panel de edición de versículo -->
                    <Grid Grid.Row="2" Margin="0,10,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="60"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        
                        <Label Grid.Column="0" Content="Número:" VerticalAlignment="Top"/>
                        <TextBox x:Name="txtNumeroVersiculo" Grid.Column="1" VerticalAlignment="Top"/>
                        
                        <Label Grid.Column="2" Content="Texto:" VerticalAlignment="Top" Margin="10,0,0,0"/>
                        <TextBox x:Name="txtTextoVersiculo" Grid.Column="3" TextWrapping="Wrap" AcceptsReturn="True" 
                                 Height="80" VerticalScrollBarVisibility="Auto"/>
                        
                        <StackPanel Grid.Column="4" Margin="10,0,0,0">
                            <Button x:Name="btnGuardarVersiculo" Content="Guardar" Width="100" Margin="0,0,0,5" Click="btnGuardarVersiculo_Click"/>
                            <Button x:Name="btnEliminarVersiculo" Content="Eliminar" Width="100" Click="btnEliminarVersiculo_Click"/>
                        </StackPanel>
                    </Grid>
                </Grid>
            </TabItem>
            
            <!-- Pestaña de gestión de libros -->
            <TabItem Header="Libros">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <!-- Lista de libros existentes -->
                    <GroupBox Header="Libros Existentes" Margin="0,0,5,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            
                            <ListView x:Name="lstLibrosExistentes" SelectionChanged="lstLibrosExistentes_SelectionChanged">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Número" DisplayMemberBinding="{Binding Numero}" Width="60"/>
                                        <GridViewColumn Header="Nombre" DisplayMemberBinding="{Binding Nombre}" Width="150"/>
                                        <GridViewColumn Header="Abreviatura" DisplayMemberBinding="{Binding Abreviatura}" Width="80"/>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                            
                            <Button Grid.Row="1" Content="Eliminar Libro" Margin="0,5,0,0" Click="btnEliminarLibro_Click"/>
                        </Grid>
                    </GroupBox>
                    
                    <!-- Separador -->
                    <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Center" VerticalAlignment="Stretch"/>
                    
                    <!-- Panel de agregar/editar libro -->
                    <GroupBox Grid.Column="2" Header="Agregar/Editar Libro" Margin="5,0,0,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            
                            <Label Grid.Row="0" Content="Número:"/>
                            <TextBox x:Name="txtNumeroLibro" Grid.Row="1" Margin="0,0,0,10"/>
                            
                            <Label Grid.Row="2" Content="Nombre:"/>
                            <TextBox x:Name="txtNombreLibro" Grid.Row="3" Margin="0,0,0,10"/>
                            
                            <StackPanel Grid.Row="4" VerticalAlignment="Top">
                                <Label Content="Abreviatura:"/>
                                <TextBox x:Name="txtAbreviaturaLibro"/>
                            </StackPanel>
                            
                            <StackPanel Grid.Row="5" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Content="Limpiar" Width="80" Margin="0,0,10,0" Click="btnLimpiarLibro_Click"/>
                                <Button Content="Guardar" Width="80" Click="btnGuardarLibro_Click"/>
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                </Grid>
            </TabItem>
            
            <!-- Pestaña de gestión de capítulos -->
            <TabItem Header="Capítulos">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Barra de herramientas de capítulos -->
                    <DockPanel Margin="0,0,0,5">
                        <Button x:Name="btnAgregarCapitulo" Content="Agregar Capítulo" Width="120" Click="btnAgregarCapitulo_Click" DockPanel.Dock="Right"/>
                        <TextBlock Text="Capítulos:" VerticalAlignment="Center"/>
                    </DockPanel>
                    
                    <!-- Lista de capítulos -->
                    <ListView x:Name="lstCapitulosGestion" Grid.Row="1" SelectionChanged="lstCapitulosGestion_SelectionChanged">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Número" DisplayMemberBinding="{Binding Numero}" Width="100"/>
                                <GridViewColumn Header="Versículos" DisplayMemberBinding="{Binding CantidadVersiculos}" Width="100"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                    
                    <!-- Panel de eliminar capítulo -->
                    <Button Grid.Row="2" Content="Eliminar Capítulo" Width="120" HorizontalAlignment="Right" 
                            Margin="0,5,0,0" Click="btnEliminarCapitulo_Click"/>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
```

## 2. Crea un nuevo archivo GestionTitulosWindow.xaml

Crea un nuevo archivo XAML en la carpeta Views y nómbralo `GestionTitulosWindow.xaml`. Luego copia este contenido:

```xml
<Window x:Class="BibliaApp.Views.GestionTitulosWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Gestión de Títulos Bíblicos" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Panel de información y selección -->
        <GroupBox Grid.Row="0" Header="Ubicación del Título" Margin="0,0,0,10">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <TextBlock Grid.Row="0" TextWrapping="Wrap" Margin="0,0,0,10">
                    Indique después de qué versículo desea insertar el título.
                    <LineBreak/>
                    Por ejemplo, si desea insertar un título entre los versículos 5 y 6, seleccione el versículo 5.
                </TextBlock>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <Label Grid.Column="0" Content="Versículo:" VerticalAlignment="Center"/>
                    <ComboBox x:Name="cbxVersiculos" Grid.Column="1" Margin="5,0,15,0" SelectionChanged="cbxVersiculos_SelectionChanged"/>
                    
                    <Label Grid.Column="2" Content="Título:" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTitulo" Grid.Column="3" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </GroupBox>
        
        <!-- Lista de títulos existentes -->
        <GroupBox Grid.Row="1" Header="Títulos Existentes">
            <Grid>
                <ListView x:Name="lstTitulos" SelectionChanged="lstTitulos_SelectionChanged">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Después de Versículo" DisplayMemberBinding="{Binding PosicionPrevia}" Width="120"/>
                            <GridViewColumn Header="Título" DisplayMemberBinding="{Binding Texto}" Width="400"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </GroupBox>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="btnAgregar" Content="Agregar Título" Width="100" Margin="0,0,10,0" Click="btnAgregar_Click"/>
            <Button x:Name="btnActualizar" Content="Actualizar" Width="100" Margin="0,0,10,0" Click="btnActualizar_Click" IsEnabled="False"/>
            <Button x:Name="btnEliminar" Content="Eliminar" Width="100" Margin="0,0,10,0" Click="btnEliminar_Click" IsEnabled="False"/>
            <Button x:Name="btnCerrar" Content="Cerrar" Width="100" Click="btnCerrar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 3. Crea el archivo GestionTitulosWindow.xaml.cs

Crea un nuevo archivo C# en la carpeta Views y nómbralo `GestionTitulosWindow.xaml.cs`. Luego copia este contenido:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionTitulosWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private List<Versiculo> _versiculos;
        private TituloBiblico? _tituloSeleccionado;
        
        public GestionTitulosWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            _versiculos = new List<Versiculo>();
            
            Title = $"Gestión de Títulos - {_libroSeleccionado.Nombre} {_capituloSeleccionado.Numero}";
            
            // Cargar versículos
            CargarVersiculos();
            
            // Cargar títulos existentes
            CargarTitulos();
        }
        
        private void CargarVersiculos()
        {
            _versiculos = _bibliaService.ObtenerVersiculos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            cbxVersiculos.ItemsSource = _versiculos;
            cbxVersiculos.DisplayMemberPath = "Numero";
            cbxVersiculos.SelectedValuePath = "Id";
            
            if (_versiculos.Any())
            {
                cbxVersiculos.SelectedIndex = 0;
            }
        }
        
        private void CargarTitulos()
        {
            var titulos = _bibliaService.ObtenerTitulos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            lstTitulos.ItemsSource = titulos;
            
            // Limpiar selección
            _tituloSeleccionado = null;
            btnActualizar.IsEnabled = false;
            btnEliminar.IsEnabled = false;
        }
        
        private void lstTitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _tituloSeleccionado = lstTitulos.SelectedItem as TituloBiblico;
            
            if (_tituloSeleccionado != null)
            {
                // Establecer los valores en los controles
                txtTitulo.Text = _tituloSeleccionado.Texto;
                
                // Seleccionar el versículo en el combo
                var versiculo = _versiculos.FirstOrDefault(v => v.Numero == _tituloSeleccionado.PosicionPrevia);
                if (versiculo != null)
                {
                    cbxVersiculos.SelectedItem = versiculo;
                }
                
                // Habilitar botones de edición
                btnActualizar.IsEnabled = true;
                btnEliminar.IsEnabled = true;
            }
            else
            {
                btnActualizar.IsEnabled = false;
                btnEliminar.IsEnabled = false;
            }
        }
        
        private void cbxVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Este método está vacío, pero se necesita porque está referenciado en el XAML
        }
        
        private void btnAgregar_Click(object sender, RoutedEventArgs e)
        {
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var nuevoTitulo = new TituloBiblico
                {
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.AgregarTitulo(nuevoTitulo);
                
                MessageBox.Show("Título agregado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Limpiar campo
                txtTitulo.Text = string.Empty;
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al agregar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnActualizar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            if (cbxVersiculos.SelectedItem == null)
            {
                MessageBox.Show("Debe seleccionar un versículo para posicionar el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTitulo.Text))
            {
                MessageBox.Show("Debe ingresar un texto para el título.", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTitulo.Focus();
                return;
            }
            
            try
            {
                var versiculo = cbxVersiculos.SelectedItem as Versiculo;
                
                var tituloActualizado = new TituloBiblico
                {
                    Id = _tituloSeleccionado.Id,
                    Texto = txtTitulo.Text.Trim(),
                    VersionId = _versionSeleccionada.Id,
                    LibroId = _libroSeleccionado.Id,
                    CapituloId = _capituloSeleccionado.Id,
                    PosicionPrevia = versiculo.Numero
                };
                
                _bibliaService.ActualizarTitulo(tituloActualizado);
                
                MessageBox.Show("Título actualizado correctamente.", 
                    "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                
                // Recargar lista
                CargarTitulos();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al actualizar título: {ex.Message}", 
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminar_Click(object sender, RoutedEventArgs e)
        {
            if (_tituloSeleccionado == null) return;
            
            var resultado = MessageBox.Show("¿Está seguro de que desea eliminar este título?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarTitulo(_tituloSeleccionado.Id);
                    
                    MessageBox.Show("Título eliminado correctamente.", 
                        "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Limpiar campo
                    txtTitulo.Text = string.Empty;
                    
                    // Recargar lista
                    CargarTitulos();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar título: {ex.Message}", 
                        "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnCerrar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = true;
            Close();
        }
    }
}
```

Con estas correcciones, deberías poder compilar y ejecutar la aplicación correctamente. Asegúrate de que:

1. GestionContenidoWindow.xaml tiene el contenido correcto para la gestión general
2. GestionTitulosWindow.xaml y GestionTitulosWindow.xaml.cs existen como archivos separados
3. La clase TituloBiblico está definida en Models/TituloBiblico.cs
4. BibliaService incluye los métodos para trabajar con títulos

De esta manera, la funcionalidad de gestionar títulos entre versículos estará correctamente implementada.

Código similar encontrado con 3 tipos de licencias

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(190,108): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "btnEliminarCapitulo_Click" ni un método de extensión accesible "btnEliminarCapitulo_Click" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o 
una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Agregando el método btnEliminarCapitulo_Click en GestionContenidoWindow

El error indica que estás utilizando un manejador de eventos `btnEliminarCapitulo_Click` en el XAML pero no está definido en el code-behind. Debes agregar este método a tu archivo `GestionContenidoWindow.xaml.cs`.

## Solución: Agrega el siguiente método a GestionContenidoWindow.xaml.cs

```csharp
private void btnEliminarCapitulo_Click(object sender, RoutedEventArgs e)
{
    if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
    
    var mensaje = $"¿Está seguro de que desea eliminar el capítulo {_capituloSeleccionado.Numero}? Esta operación eliminará también todos sus versículos.";
    var resultado = MessageBox.Show(mensaje, "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
    
    if (resultado == MessageBoxResult.Yes)
    {
        try
        {
            _bibliaService.EliminarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, _capituloSeleccionado.Id);
            
            MessageBox.Show("Capítulo eliminado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
            
            // Recargar capítulos
            CargarCapitulos();
            
            // Limpiar selección
            _capituloSeleccionado = null;
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Error al eliminar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
}
```

Este método se encarga de:

1. Verificar que exista un capítulo seleccionado
2. Pedir confirmación al usuario antes de eliminar
3. Utilizar el servicio BibliaService para eliminar el capítulo
4. Actualizar la interfaz de usuario
5. Manejar posibles errores durante el proceso

Agregar este método debería resolver el error de compilación actual. Asegúrate de agregar el método dentro de la clase `GestionContenidoWindow`, junto con los otros manejadores de eventos que ya tienes definidos.

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(179,120): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "lstCapitulosGestion_SelectionChanged" ni un método de extensión accesible "lstCapitulosGestion_SelectionChanged" que acepte 
un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Agregando el método lstCapitulosGestion_SelectionChanged a GestionContenidoWindow

Necesitas implementar el método `lstCapitulosGestion_SelectionChanged` en tu archivo GestionContenidoWindow.xaml.cs. Este método está referenciado en el XAML pero no está implementado en el code-behind.

## Agrega el siguiente método a GestionContenidoWindow.xaml.cs:

```csharp
private void lstCapitulosGestion_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    // Actualizar el capítulo seleccionado desde la lista de gestión de capítulos
    var capituloSeleccionado = lstCapitulosGestion.SelectedItem as Capitulo;
    
    // Habilitar o deshabilitar el botón de eliminar capítulo según haya selección
    if (capituloSeleccionado != null)
    {
        // Aquí podrías actualizar información adicional sobre el capítulo si es necesario
        
        // Nota: No establecemos _capituloSeleccionado aquí para no interferir con
        // la selección en el ComboBox principal (cmbCapitulos)
    }
}
```

## Explicación:

1. Este método se activa cuando cambia la selección en el ListView de gestión de capítulos (`lstCapitulosGestion`).
2. Obtiene el capítulo seleccionado del ListView.
3. Puedes agregar más lógica dentro de este método si necesitas realizar otras operaciones cuando se selecciona un capítulo en la vista de gestión de capítulos.

## Ubicación en el archivo:

Debes agregar este método dentro de la clase `GestionContenidoWindow`, junto a los otros manejadores de eventos. Por ejemplo, puedes añadirlo cerca de `btnEliminarCapitulo_Click` ya que ambos están relacionados con la gestión de capítulos.

Después de agregar este método, deberías poder compilar y ejecutar la aplicación sin errores.

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(156,108): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "btnGuardarLibro_Click" ni un método de extensión accesible 
"btnGuardarLibro_Click" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Agregando el método btnGuardarLibro_Click a GestionContenidoWindow

El error indica que estás utilizando un manejador de eventos `btnGuardarLibro_Click` en el XAML (línea 156) pero este método no está definido en el code-behind.

## Solución: Agrega el siguiente método a GestionContenidoWindow.xaml.cs

```csharp
private void btnGuardarLibro_Click(object sender, RoutedEventArgs e)
{
    if (_versionSeleccionada == null) return;
    
    // Validar los datos
    if (string.IsNullOrWhiteSpace(txtNombreLibro.Text))
    {
        MessageBox.Show("Debe ingresar un nombre para el libro.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        txtNombreLibro.Focus();
        return;
    }
    
    if (string.IsNullOrWhiteSpace(txtAbreviaturaLibro.Text))
    {
        MessageBox.Show("Debe ingresar una abreviatura para el libro.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        txtAbreviaturaLibro.Focus();
        return;
    }
    
    if (!int.TryParse(txtNumeroLibro.Text, out int numero) || numero <= 0)
    {
        MessageBox.Show("El número de libro debe ser un valor numérico positivo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        txtNumeroLibro.Focus();
        return;
    }
    
    try
    {
        // Crear objeto libro
        var libro = new Libro
        {
            Nombre = txtNombreLibro.Text.Trim(),
            Abreviatura = txtAbreviaturaLibro.Text.Trim(),
            Numero = numero
        };
        
        // Determinar si es un libro nuevo o actualización
        var libroExistente = lstLibrosExistentes.SelectedItem as Libro;
        
        if (libroExistente != null)
        {
            // Actualización
            libro.Id = libroExistente.Id;
            _bibliaService.ActualizarLibro(_versionSeleccionada.Id, libro);
            MessageBox.Show("Libro actualizado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        else
        {
            // Nuevo libro
            _bibliaService.AgregarLibro(_versionSeleccionada.Id, libro);
            MessageBox.Show("Libro agregado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        
        // Recargar libros
        CargarLibros();
        
        // Limpiar campos
        txtNumeroLibro.Text = string.Empty;
        txtNombreLibro.Text = string.Empty;
        txtAbreviaturaLibro.Text = string.Empty;
        
        // Seleccionar el libro en la lista
        foreach (Libro l in cbxLibros.Items)
        {
            if (l.Nombre == libro.Nombre)
            {
                cbxLibros.SelectedItem = l;
                break;
            }
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error al guardar el libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
```

## Características de este método:

1. **Validación de datos**: Verifica que el nombre, abreviatura y número del libro sean válidos.
2. **Modo dual**: Puede tanto agregar un nuevo libro como actualizar uno existente.
3. **Retroalimentación**: Muestra mensajes de éxito o error al usuario.
4. **Integración**: Trabaja con la selección de la lista de libros existentes y actualiza la interfaz apropiadamente.

Agrega este método al archivo GestionContenidoWindow.xaml.cs junto a los otros manejadores de eventos relacionados con libros. Después de implementar este método, el error debería desaparecer y podrás guardar libros correctamente en tu aplicación.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run    
C:\Biblia\BibliaApp\TemplateSelectors\VersiculoItemTemplateSelector.cs(11,40): warning CS8600: Se va a convertir un literal nulo o un posible valor nulo en un tipo que no acepta valores NULL     
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(34,13): 
error CS0103: El nombre 'cbxVersiones' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(35,13): 
error CS0103: El nombre 'cbxVersiones' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(36,13): 
error CS0103: El nombre 'cbxVersiones' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(40,17): 
error CS0103: El nombre 'cbxVersiones' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(49,13): 
error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(50,13): 
error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(51,13): 
error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(55,17): 
error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(59,17): 
error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(60,17): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(70,13): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(71,13): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(72,13): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(76,17): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(80,17): 
error CS0103: El nombre 'cbxCapitulos' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(105,13): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(106,13): error CS0103: El nombre 'cbxCapitulos' no existe en el contexto 
actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(108,13): error CS0103: El nombre 'btnAgregarLibro' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(130,36): error CS0103: El nombre 'cbxVersiones' no existe en el contexto 
actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(141,34): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(151,37): error CS0103: El nombre 'cbxCapitulos' no existe en el contexto 
actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(202,25): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(202,50): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(236,25): error CS0103: El nombre 'cbxCapitulos' no existe en el contexto 
actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(236,53): error CS0103: El nombre 'cbxCapitulos' no existe en el contexto 
actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(405,36): error CS1061: "BibliaService" no contiene una definición para "EliminarCapitulo" ni un método de extensión accesible "EliminarCapitulo" que acepte un primer argumento del tipo "BibliaService" (¿falta alguna directiva using o una referencia de ensamblado?)    
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(470,21): error CS0117: 'Libro' no contiene una definición para 'Numero'  
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(480,36): error CS1061: "BibliaService" no contiene una definición para "ActualizarLibro" ni un método de extensión accesible "ActualizarLibro" que acepte un primer argumento del tipo "BibliaService" (¿falta alguna directiva using o una referencia de ensamblado?)      
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(499,37): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(503,25): error CS0103: El nombre 'cbxLibros' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(26,113): error CS1061: "GestionContenidoWindow" no contiene una definición para "cmbVersiones_SelectionChanged" ni un método de extensión accesible "cmbVersiones_SelectionChanged" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(31,110): error CS1061: "GestionContenidoWindow" no contiene una definición para "cmbLibros_SelectionChanged" ni un método de extensión accesible "cmbLibros_SelectionChanged" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(36,113): error CS1061: "GestionContenidoWindow" no contiene una definición para "cmbCapitulos_SelectionChanged" ni un método de extensión accesible "cmbCapitulos_SelectionChanged" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(114,120): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "lstLibrosExistentes_SelectionChanged" ni un método de extensión accesible "lstLibrosExistentes_SelectionChanged" que acepte 
un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(124,108): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "btnEliminarLibro_Click" ni un método de extensión accesible "btnEliminarLibro_Click" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml(155,108): error CS1061: "GestionContenidoWindow" no contiene una definición 
para "btnLimpiarLibro_Click" ni un método de extensión accesible 
"btnLimpiarLibro_Click" que acepte un primer argumento del tipo "GestionContenidoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de errores en el proyecto BibliaApp

Parece que hay varios errores en tu proyecto que impiden que se compile. Vamos a solucionarlos paso a paso:

## 1. Corregir la discrepancia de nombres entre XAML y code-behind

En tu código hay una discrepancia entre los nombres de los controles que usas en el XAML (`cmbVersiones`, `cmbLibros`, etc.) y los nombres a los que haces referencia en el code-behind (`cbxVersiones`, `cbxLibros`, etc.). Debes cambiarlos para que coincidan.

Reemplaza en tu archivo GestionContenidoWindow.xaml.cs todas las instancias de:

- `cbxVersiones` por `cmbVersiones`
- `cbxLibros` por `cmbLibros`
- `cbxCapitulos` por `cmbCapitulos`
- `btnAgregarLibro` por los nombres correctos según tu XAML

## 2. Agregar los manejadores de eventos faltantes

Necesitas implementar estos métodos que están siendo referenciados en el XAML pero no existen en el code-behind:

```csharp
private void cmbVersiones_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    _versionSeleccionada = cmbVersiones.SelectedItem as VersionBiblia;
    _libroSeleccionado = null;
    _capituloSeleccionado = null;
    
    CargarLibros();
    LimpiarPanelEdicion();
    ActualizarEstadoControles();
}

private void cmbLibros_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    _libroSeleccionado = cmbLibros.SelectedItem as Libro;
    _capituloSeleccionado = null;
    
    CargarCapitulos();
    LimpiarPanelEdicion();
    ActualizarEstadoControles();
}

private void cmbCapitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    _capituloSeleccionado = cmbCapitulos.SelectedItem as Capitulo;
    
    CargarVersiculos();
    LimpiarPanelEdicion();
    ActualizarEstadoControles();
}

private void lstLibrosExistentes_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    var libroSeleccionado = lstLibrosExistentes.SelectedItem as Libro;
    
    if (libroSeleccionado != null)
    {
        txtNumeroLibro.Text = libroSeleccionado.Numero.ToString();
        txtNombreLibro.Text = libroSeleccionado.Nombre;
        txtAbreviaturaLibro.Text = libroSeleccionado.Abreviatura;
    }
}

private void btnEliminarLibro_Click(object sender, RoutedEventArgs e)
{
    if (_versionSeleccionada == null) return;
    
    var libroSeleccionado = lstLibrosExistentes.SelectedItem as Libro;
    if (libroSeleccionado == null) return;
    
    var resultado = MessageBox.Show($"¿Está seguro de que desea eliminar el libro {libroSeleccionado.Nombre}?", 
        "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
        
    if (resultado == MessageBoxResult.Yes)
    {
        try
        {
            _bibliaService.EliminarLibro(_versionSeleccionada.Id, libroSeleccionado.Id);
            CargarLibros();
            
            // Limpiar campos
            txtNumeroLibro.Text = string.Empty;
            txtNombreLibro.Text = string.Empty;
            txtAbreviaturaLibro.Text = string.Empty;
            
            MessageBox.Show("Libro eliminado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Error al eliminar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
}

private void btnLimpiarLibro_Click(object sender, RoutedEventArgs e)
{
    txtNumeroLibro.Text = string.Empty;
    txtNombreLibro.Text = string.Empty;
    txtAbreviaturaLibro.Text = string.Empty;
    lstLibrosExistentes.SelectedItem = null;
}
```

## 3. Añadir los métodos faltantes a BibliaService

Es necesario agregar los métodos `EliminarCapitulo` y `ActualizarLibro` a la clase BibliaService:

```csharp
// Agregar en BibliaService.cs
public void EliminarCapitulo(string versionId, int libroId, int capituloId)
{
    var capitulo = _capitulos.FirstOrDefault(c => c.Id == capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    // Eliminar primero todos los versículos del capítulo
    var versiculosDelCapitulo = _versiculos.Where(v => v.CapituloId == capituloId).ToList();
    foreach (var versiculo in versiculosDelCapitulo)
    {
        _versiculos.Remove(versiculo);
    }
    
    // Eliminar el capítulo
    _capitulos.Remove(capitulo);
    
    // Guardar cambios
    GuardarCapitulos();
    GuardarVersiculos();
}

public void ActualizarLibro(string versionId, Libro libro)
{
    var libroExistente = _libros.FirstOrDefault(l => l.Id == libro.Id);
    if (libroExistente == null)
        throw new Exception($"No se encontró el libro con ID {libro.Id}");
    
    // Actualizar propiedades
    libroExistente.Nombre = libro.Nombre;
    libroExistente.Abreviatura = libro.Abreviatura;
    libroExistente.Numero = libro.Numero;
    
    // Guardar cambios
    GuardarLibros();
}
```

## 4. Asegurarse de que la clase Libro tenga la propiedad Numero

Verifica que la clase Libro tenga definida correctamente la propiedad Numero:

```csharp
// Models/Libro.cs
public class Libro
{
    public int Id { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string Abreviatura { get; set; } = string.Empty;
    public int Numero { get; set; } // Esta propiedad debe existir
    // Otras propiedades...
}
```

## 5. Corregir la advertencia en VersiculoItemTemplateSelector.cs

Para resolver la advertencia de valor nulo en `VersiculoItemTemplateSelector.cs`, modifica la línea 11:

```csharp
FrameworkElement? element = container as FrameworkElement;
```

Para que la clase funcione correctamente con valores nulos.

## Resumen de los cambios:

1. Corregir los nombres de controles en el code-behind para que coincidan con el XAML
2. Implementar los manejadores de eventos faltantes
3. Añadir los métodos necesarios a BibliaService
4. Asegurar que la clase Libro tenga la propiedad Numero
5. Corregir el aviso de nulos en el selector de plantillas

Realiza estos cambios y deberías poder compilar y ejecutar el proyecto correctamente.

RafaelG1986: dame el contenido completo de GestionContenidoWindow.xaml.cs cambiando cbx por cmb primeramente

GitHub Copilot: # Contenido completo de GestionContenidoWindow.xaml.cs

Aquí tienes el contenido completo del archivo con los cambios de `cbx` a `cmb`:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class GestionContenidoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private VersionBiblia? _versionSeleccionada;
        private Libro? _libroSeleccionado;
        private Capitulo? _capituloSeleccionado;
        private Versiculo? _versiculoSeleccionado;

        public GestionContenidoWindow(BibliaService bibliaService)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            
            // Cargar datos iniciales
            CargarVersiones();
            
            // Actualizar estado de los controles
            ActualizarEstadoControles();
        }
        
        private void CargarVersiones()
        {
            var versiones = _bibliaService.ObtenerVersiones();
            cmbVersiones.ItemsSource = versiones;
            
            if (versiones.Any())
            {
                cmbVersiones.SelectedIndex = 0;
            }
            else
            {
                MessageBox.Show("No hay versiones disponibles. Por favor, cree una versión primero.", 
                    "Sin versiones", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void CargarLibros()
        {
            if (_versionSeleccionada == null) return;
            
            var libros = _bibliaService.ObtenerLibros(_versionSeleccionada.Id);
            cmbLibros.ItemsSource = libros;
            lstLibrosExistentes.ItemsSource = libros;
            
            if (libros.Any())
            {
                cmbLibros.SelectedIndex = 0;
            }
            else
            {
                cmbLibros.ItemsSource = null;
                cmbCapitulos.ItemsSource = null;
                
                _libroSeleccionado = null;
                _capituloSeleccionado = null;
                
                MessageBox.Show("No hay libros disponibles en esta versión. Puede añadir un nuevo libro en la pestaña 'Libros'.", 
                    "Sin libros", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void CargarCapitulos()
        {
            if (_versionSeleccionada == null || _libroSeleccionado == null) return;
            
            var capitulos = _bibliaService.ObtenerCapitulos(_versionSeleccionada.Id, _libroSeleccionado.Id);
            cmbCapitulos.ItemsSource = capitulos;
            lstCapitulosGestion.ItemsSource = capitulos;
            
            if (capitulos.Any())
            {
                cmbCapitulos.SelectedIndex = 0;
            }
            else
            {
                cmbCapitulos.ItemsSource = null;
                
                _capituloSeleccionado = null;
                
                MessageBox.Show("No hay capítulos disponibles en este libro. Puede añadir un nuevo capítulo en la pestaña 'Capítulos'.", 
                    "Sin capítulos", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        
        private void CargarVersiculos()
        {
            if (_versionSeleccionada == null || _libroSeleccionado == null || _capituloSeleccionado == null) return;
            
            var versiculos = _bibliaService.ObtenerVersiculos(
                _versionSeleccionada.Id, 
                _libroSeleccionado.Id, 
                _capituloSeleccionado.Id);
                
            lstVersiculos.ItemsSource = versiculos;
        }
        
        private void LimpiarPanelEdicion()
        {
            _versiculoSeleccionado = null;
            txtNumeroVersiculo.Text = string.Empty;
            txtTextoVersiculo.Text = string.Empty;
            
            lstVersiculos.SelectedItem = null;
            
            // Otras limpiezas según las pestañas activas
            if (cmbLibros.SelectedItem == null)
            {
                cmbCapitulos.ItemsSource = null;
                lstVersiculos.ItemsSource = null;
            }
            
            if (cmbCapitulos.SelectedItem == null)
            {
                lstVersiculos.ItemsSource = null;
            }
        }
        
        private void ActualizarEstadoControles()
        {
            // Desactivar controles según selecciones
            bool tieneVersion = _versionSeleccionada != null;
            bool tieneLibro = _libroSeleccionado != null;
            bool tieneCapitulo = _capituloSeleccionado != null;
            
            // Actualizar estado de controles en pestañas
        }
        
        private void cmbVersiones_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versionSeleccionada = cmbVersiones.SelectedItem as VersionBiblia;
            _libroSeleccionado = null;
            _capituloSeleccionado = null;
            
            CargarLibros();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cmbLibros_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _libroSeleccionado = cmbLibros.SelectedItem as Libro;
            _capituloSeleccionado = null;
            
            CargarCapitulos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void cmbCapitulos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _capituloSeleccionado = cmbCapitulos.SelectedItem as Capitulo;
            
            CargarVersiculos();
            LimpiarPanelEdicion();
            ActualizarEstadoControles();
        }
        
        private void lstVersiculos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _versiculoSeleccionado = lstVersiculos.SelectedItem as Versiculo;
            
            if (_versiculoSeleccionado != null)
            {
                txtNumeroVersiculo.Text = _versiculoSeleccionado.Numero.ToString();
                txtTextoVersiculo.Text = _versiculoSeleccionado.Texto;
            }
        }
        
        private void btnAgregarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            // Abrir ventana para agregar versículo
            var ventana = new AgregarEditarVersiculoWindow(_bibliaService, _versionSeleccionada, _libroSeleccionado, _capituloSeleccionado);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                // Recargar la lista de versículos
                CargarVersiculos();
            }
        }
        
        private void btnGuardarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            // Validar datos
            if (string.IsNullOrWhiteSpace(txtNumeroVersiculo.Text))
            {
                MessageBox.Show("Debe ingresar un número de versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumeroVersiculo.Focus();
                return;
            }
            
            if (!int.TryParse(txtNumeroVersiculo.Text, out int numero) || numero <= 0)
            {
                MessageBox.Show("El número de versículo debe ser un valor numérico positivo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumeroVersiculo.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTextoVersiculo.Text))
            {
                MessageBox.Show("Debe ingresar el texto del versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTextoVersiculo.Focus();
                return;
            }
            
            try
            {
                if (_versiculoSeleccionado != null)
                {
                    // Actualizar versículo existente
                    var versiculo = new Versiculo
                    {
                        Id = _versiculoSeleccionado.Id,
                        Numero = numero,
                        Texto = txtTextoVersiculo.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.ActualizarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                        
                    MessageBox.Show("Versículo actualizado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    // Nuevo versículo
                    var versiculo = new Versiculo
                    {
                        Numero = numero,
                        Texto = txtTextoVersiculo.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.AgregarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                        
                    MessageBox.Show("Versículo agregado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                
                // Recargar y limpiar
                CargarVersiculos();
                LimpiarPanelEdicion();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnEliminarVersiculo_Click(object sender, RoutedEventArgs e)
        {
            if (_versiculoSeleccionado == null || _capituloSeleccionado == null || 
                _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var mensaje = $"¿Está seguro de que desea eliminar el versículo {_versiculoSeleccionado.Numero}?";
            var resultado = MessageBox.Show(mensaje, "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
            
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarVersiculo(
                        _versionSeleccionada.Id,
                        _libroSeleccionado.Id,
                        _capituloSeleccionado.Id,
                        _versiculoSeleccionado.Id);
                        
                    MessageBox.Show("Versículo eliminado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Recargar y limpiar
                    CargarVersiculos();
                    LimpiarPanelEdicion();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        
        private void btnAgregarCapitulo_Click(object sender, RoutedEventArgs e)
        {
            if (_libroSeleccionado == null || _versionSeleccionada == null) return;
            
            try
            {
                // Obtener el último número de capítulo
                var capitulos = _bibliaService.ObtenerCapitulos(_versionSeleccionada.Id, _libroSeleccionado.Id);
                int siguienteNumero = capitulos.Count > 0 ? capitulos.Max(c => c.Numero) + 1 : 1;
                
                // Solicitar confirmación
                var mensaje = $"Se creará el capítulo {siguienteNumero} para el libro {_libroSeleccionado.Nombre}. ¿Desea continuar?";
                var resultado = MessageBox.Show(mensaje, "Confirmar", MessageBoxButton.YesNo, MessageBoxImage.Question);
                
                if (resultado == MessageBoxResult.Yes)
                {
                    // Crear capítulo
                    var nuevoCapitulo = new Capitulo
                    {
                        Numero = siguienteNumero,
                        LibroId = _libroSeleccionado.Id
                    };
                    
                    _bibliaService.AgregarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, nuevoCapitulo);
                    
                    MessageBox.Show($"Capítulo {siguienteNumero} creado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Recargar capítulos
                    CargarCapitulos();
                    
                    // Seleccionar el nuevo capítulo en la lista
                    foreach (Capitulo c in cmbCapitulos.Items)
                    {
                        if (c.Numero == siguienteNumero)
                        {
                            cmbCapitulos.SelectedItem = c;
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al crear capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnAgregarMultiplesVersiculos_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var ventana = new MultipleVersiculosWindow(_bibliaService, _versionSeleccionada, _libroSeleccionado, _capituloSeleccionado);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                // Recargar la lista de versículos
                CargarVersiculos();
            }
        }

        private void btnGestionarTitulos_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var ventana = new GestionTitulosWindow(_bibliaService, _versionSeleccionada, _libroSeleccionado, _capituloSeleccionado);
            ventana.Owner = this;
            
            if (ventana.ShowDialog() == true)
            {
                // Recargar la lista de versículos para reflejar los cambios de títulos
                CargarVersiculos();
            }
        }

        private void btnEliminarCapitulo_Click(object sender, RoutedEventArgs e)
        {
            if (_capituloSeleccionado == null || _libroSeleccionado == null || _versionSeleccionada == null) return;
            
            var mensaje = $"¿Está seguro de que desea eliminar el capítulo {_capituloSeleccionado.Numero}? Esta operación eliminará también todos sus versículos.";
            var resultado = MessageBox.Show(mensaje, "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
            
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarCapitulo(_versionSeleccionada.Id, _libroSeleccionado.Id, _capituloSeleccionado.Id);
                    
                    MessageBox.Show("Capítulo eliminado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                    
                    // Recargar capítulos
                    CargarCapitulos();
                    
                    // Limpiar selección
                    _capituloSeleccionado = null;
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar capítulo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void lstCapitulosGestion_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Actualizar el capítulo seleccionado desde la lista de gestión de capítulos
            var capituloSeleccionado = lstCapitulosGestion.SelectedItem as Capitulo;
            
            // Habilitar o deshabilitar el botón de eliminar capítulo según haya selección
            if (capituloSeleccionado != null)
            {
                // Aquí podrías actualizar información adicional sobre el capítulo si es necesario
                
                // Nota: No establecemos _capituloSeleccionado aquí para no interferir con
                // la selección en el ComboBox principal (cmbCapitulos)
            }
        }

        private void btnGuardarLibro_Click(object sender, RoutedEventArgs e)
        {
            if (_versionSeleccionada == null) return;
            
            // Validar los datos
            if (string.IsNullOrWhiteSpace(txtNombreLibro.Text))
            {
                MessageBox.Show("Debe ingresar un nombre para el libro.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNombreLibro.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtAbreviaturaLibro.Text))
            {
                MessageBox.Show("Debe ingresar una abreviatura para el libro.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtAbreviaturaLibro.Focus();
                return;
            }
            
            if (!int.TryParse(txtNumeroLibro.Text, out int numero) || numero <= 0)
            {
                MessageBox.Show("El número de libro debe ser un valor numérico positivo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumeroLibro.Focus();
                return;
            }
            
            try
            {
                // Crear objeto libro
                var libro = new Libro
                {
                    Nombre = txtNombreLibro.Text.Trim(),
                    Abreviatura = txtAbreviaturaLibro.Text.Trim(),
                    Numero = numero
                };
                
                // Determinar si es un libro nuevo o actualización
                var libroExistente = lstLibrosExistentes.SelectedItem as Libro;
                
                if (libroExistente != null)
                {
                    // Actualización
                    libro.Id = libroExistente.Id;
                    _bibliaService.ActualizarLibro(_versionSeleccionada.Id, libro);
                    MessageBox.Show("Libro actualizado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    // Nuevo libro
                    _bibliaService.AgregarLibro(_versionSeleccionada.Id, libro);
                    MessageBox.Show("Libro agregado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                
                // Recargar libros
                CargarLibros();
                
                // Limpiar campos
                txtNumeroLibro.Text = string.Empty;
                txtNombreLibro.Text = string.Empty;
                txtAbreviaturaLibro.Text = string.Empty;
                
                // Seleccionar el libro en la lista
                foreach (Libro l in cmbLibros.Items)
                {
                    if (l.Nombre == libro.Nombre)
                    {
                        cmbLibros.SelectedItem = l;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar el libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void lstLibrosExistentes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var libroSeleccionado = lstLibrosExistentes.SelectedItem as Libro;
            
            if (libroSeleccionado != null)
            {
                txtNumeroLibro.Text = libroSeleccionado.Numero.ToString();
                txtNombreLibro.Text = libroSeleccionado.Nombre;
                txtAbreviaturaLibro.Text = libroSeleccionado.Abreviatura;
            }
        }

        private void btnEliminarLibro_Click(object sender, RoutedEventArgs e)
        {
            if (_versionSeleccionada == null) return;
            
            var libroSeleccionado = lstLibrosExistentes.SelectedItem as Libro;
            if (libroSeleccionado == null) return;
            
            var resultado = MessageBox.Show($"¿Está seguro de que desea eliminar el libro {libroSeleccionado.Nombre}?", 
                "Confirmar eliminación", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                
            if (resultado == MessageBoxResult.Yes)
            {
                try
                {
                    _bibliaService.EliminarLibro(_versionSeleccionada.Id, libroSeleccionado.Id);
                    CargarLibros();
                    
                    // Limpiar campos
                    txtNumeroLibro.Text = string.Empty;
                    txtNombreLibro.Text = string.Empty;
                    txtAbreviaturaLibro.Text = string.Empty;
                    
                    MessageBox.Show("Libro eliminado correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al eliminar libro: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void btnLimpiarLibro_Click(object sender, RoutedEventArgs e)
        {
            txtNumeroLibro.Text = string.Empty;
            txtNombreLibro.Text = string.Empty;
            txtAbreviaturaLibro.Text = string.Empty;
            lstLibrosExistentes.SelectedItem = null;
        }
    }
}
```

Este código incluye:

1. Todos los nombres de controles cambiados de `cbx` a `cmb`
2. Implementación completa de todos los manejadores de eventos referenciados en el XAML
3. Métodos para cargar datos y manejar la interfaz de usuario
4. Lógica de negocio para gestionar versículos, capítulos y libros

Recuerda también agregar los métodos `EliminarCapitulo` y `ActualizarLibro` a tu clase BibliaService, y asegurarte de que la clase Libro tenga una propiedad `Numero`.

RafaelG1986: C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(185,31): error CS0246: El nombre del tipo o del espacio de nombres 'AgregarEditarVersiculoWindow' no se encontró (¿falta una directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(388,36): error CS1061: "BibliaService" no contiene una definición para "EliminarCapitulo" ni un método de extensión accesible "EliminarCapitulo" que acepte un primer argumento del tipo "BibliaService" (¿falta alguna directiva using o una referencia de ensamblado?)    
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(453,21): error CS0117: 'Libro' no contiene una definición para 'Numero'  
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(463,36): error CS1061: "BibliaService" no contiene una definición para "ActualizarLibro" ni un método de extensión accesible "ActualizarLibro" que acepte un primer argumento del tipo "BibliaService" (¿falta alguna directiva using o una referencia de ensamblado?)      
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(503,57): error CS1061: "Libro" no contiene una definición para "Numero" ni un método de extensión accesible "Numero" que acepte un primer 
argumento del tipo "Libro" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(523,36): error CS1061: "BibliaService" no contiene una definición para "EliminarLibro" ni un método de extensión accesible "EliminarLibro" que acepte un primer argumento del tipo "BibliaService" (¿falta 
alguna directiva using o una referencia de ensamblado?)

No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Solución de errores para BibliaApp

Necesitas corregir varios componentes en tu proyecto para resolver los errores de compilación. Aquí está todo lo que necesitas agregar:

## 1. Primero, modifica el modelo Libro.cs para incluir la propiedad Numero:

```csharp
// Models/Libro.cs
using System.Collections.Generic;

namespace BibliaApp.Models
{
    public class Libro
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Abreviatura { get; set; } = string.Empty;
        public int Numero { get; set; } // Propiedad añadida que faltaba
        public int VersionId { get; set; }
        public List<Capitulo> Capitulos { get; set; } = new List<Capitulo>();
    }
}
```

## 2. Agrega los métodos faltantes a BibliaService:

```csharp
// En BibliaService.cs, agrega estos métodos:

public void EliminarCapitulo(string versionId, int libroId, int capituloId)
{
    var capitulo = _capitulos.FirstOrDefault(c => c.Id == capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    // Eliminar primero todos los versículos del capítulo
    var versiculosDelCapitulo = _versiculos.Where(v => v.CapituloId == capituloId).ToList();
    foreach (var versiculo in versiculosDelCapitulo)
    {
        _versiculos.Remove(versiculo);
    }
    
    // Eliminar también los títulos asociados al capítulo
    var titulosDelCapitulo = _titulos.Where(t => t.CapituloId == capituloId).ToList();
    foreach (var titulo in titulosDelCapitulo)
    {
        _titulos.Remove(titulo);
    }
    
    // Eliminar el capítulo
    _capitulos.Remove(capitulo);
    
    // Guardar cambios
    GuardarCapitulos();
    GuardarVersiculos();
    GuardarTitulos();
}

public void ActualizarLibro(string versionId, Libro libro)
{
    var libroExistente = _libros.FirstOrDefault(l => l.Id == libro.Id);
    if (libroExistente == null)
        throw new Exception($"No se encontró el libro con ID {libro.Id}");
    
    // Actualizar propiedades
    libroExistente.Nombre = libro.Nombre;
    libroExistente.Abreviatura = libro.Abreviatura;
    libroExistente.Numero = libro.Numero;
    
    // Guardar cambios
    GuardarLibros();
}

public void EliminarLibro(string versionId, int libroId)
{
    var libro = _libros.FirstOrDefault(l => l.Id == libroId);
    if (libro == null)
        throw new Exception($"No se encontró el libro con ID {libroId}");
    
    // Primero, necesitamos eliminar todos los capítulos (y por ende, los versículos)
    var capitulosDelLibro = _capitulos.Where(c => c.LibroId == libroId).ToList();
    foreach (var capitulo in capitulosDelLibro)
    {
        EliminarCapitulo(versionId, libroId, capitulo.Id);
    }
    
    // Eliminar el libro
    _libros.Remove(libro);
    
    // Guardar cambios
    GuardarLibros();
}
```

## 3. Crea la ventana AgregarEditarVersiculoWindow que falta:

```csharp
// Views/AgregarEditarVersiculoWindow.xaml.cs
using System;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarEditarVersiculoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private Versiculo? _versiculoExistente;
        
        public AgregarEditarVersiculoWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo, Versiculo? versiculo = null)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            _versiculoExistente = versiculo;
            
            // Configurar título de la ventana
            Title = _versiculoExistente == null 
                ? $"Agregar Versículo - {libro.Nombre} {capitulo.Numero}" 
                : $"Editar Versículo - {libro.Nombre} {capitulo.Numero}:{_versiculoExistente.Numero}";
                
            // Cargar datos si es edición
            if (_versiculoExistente != null)
            {
                txtNumero.Text = _versiculoExistente.Numero.ToString();
                txtTexto.Text = _versiculoExistente.Texto;
            }
            else
            {
                // Determinar siguiente número de versículo
                var versiculos = _bibliaService.ObtenerVersiculos(
                    _versionSeleccionada.Id, 
                    _libroSeleccionado.Id, 
                    _capituloSeleccionado.Id);
                    
                int siguienteNumero = versiculos.Count > 0 ? versiculos.Max(v => v.Numero) + 1 : 1;
                txtNumero.Text = siguienteNumero.ToString();
            }
            
            // Establecer el foco en el campo de texto
            if (_versiculoExistente == null)
            {
                txtTexto.Focus();
            }
        }
        
        private void btnGuardar_Click(object sender, RoutedEventArgs e)
        {
            // Validar datos
            if (string.IsNullOrWhiteSpace(txtNumero.Text))
            {
                MessageBox.Show("Debe ingresar un número de versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumero.Focus();
                return;
            }
            
            if (!int.TryParse(txtNumero.Text, out int numero) || numero <= 0)
            {
                MessageBox.Show("El número de versículo debe ser un valor numérico positivo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumero.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTexto.Text))
            {
                MessageBox.Show("Debe ingresar el texto del versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTexto.Focus();
                return;
            }
            
            try
            {
                if (_versiculoExistente != null)
                {
                    // Actualizar versículo existente
                    var versiculo = new Versiculo
                    {
                        Id = _versiculoExistente.Id,
                        Numero = numero,
                        Texto = txtTexto.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.ActualizarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                }
                else
                {
                    // Nuevo versículo
                    var versiculo = new Versiculo
                    {
                        Numero = numero,
                        Texto = txtTexto.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.AgregarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                }
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
```

## 4. Crea el archivo XAML para AgregarEditarVersiculoWindow:

```xml
<Window x:Class="BibliaApp.Views.AgregarEditarVersiculoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar/Editar Versículo" Height="300" Width="500"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Número de versículo -->
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="80"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <Label Grid.Column="0" Content="Número:" VerticalAlignment="Center"/>
            <TextBox x:Name="txtNumero" Grid.Column="1" Margin="5,0,0,0"/>
        </Grid>
        
        <!-- Texto del versículo -->
        <Grid Grid.Row="1" Margin="0,10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <Label Grid.Row="0" Content="Texto:" VerticalAlignment="Top"/>
            <TextBox x:Name="txtTexto" Grid.Row="1" TextWrapping="Wrap" AcceptsReturn="True" 
                     VerticalScrollBarVisibility="Auto" Margin="0,5,0,0"/>
        </Grid>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="btnGuardar" Content="Guardar" Width="100" Margin="0,0,10,0" Click="btnGuardar_Click"/>
            <Button x:Name="btnCancelar" Content="Cancelar" Width="100" Click="btnCancelar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

Con estas modificaciones, deberías poder solucionar todos los errores de compilación y hacer que tu aplicación funcione correctamente. 

Recuerda que:
1. El modelo Libro ahora incluye la propiedad Numero
2. BibliaService tiene los métodos EliminarCapitulo, ActualizarLibro y EliminarLibro
3. Se ha creado la ventana AgregarEditarVersiculoWindow para agregar o editar versículos

Asegúrate de compilar y probar tu aplicación después de realizar estos cambios.

RafaelG1986: PS C:\Biblia\BibliaApp> dotnet run
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml(40,81): error CS1061: "AgregarEditarVersiculoWindow" no contiene una definición para "btnGuardar_Click" ni un método de extensión accesible "btnGuardar_Click" que acepte un primer argumento del tipo "AgregarEditarVersiculoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml(41,82): error CS1061: "AgregarEditarVersiculoWindow" no contiene una definición para "btnCancelar_Click" ni un método de extensión accesible "btnCancelar_Click" que acepte un primer argumento del tipo "AgregarEditarVersiculoWindow" (¿falta alguna directiva using o una referencia de ensamblado?)
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(14,13): error CS0103: El nombre 'InitializeComponent' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(27,43): error CS0103: El nombre 'IdTextBox' no existe en el contexto actualC:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(30,17): error CS0103: El nombre 'IdTextBox' no existe en el contexto actualC:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(34,43): error CS0103: El nombre 'NombreTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(37,17): error CS0103: El nombre 'NombreTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(41,43): error CS0103: El nombre 'IdiomaTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(44,17): error CS0103: El nombre 'IdiomaTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(53,26): error CS0103: El nombre 'IdTextBox' no existe en el contexto actualC:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(54,30): error CS0103: El nombre 'NombreTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(55,30): error CS0103: El nombre 'IdiomaTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Views\AgregarVersionWindow.xaml.cs(56,35): error CS0103: El nombre 'DescripcionTextBox' no existe en el contexto actual
C:\Biblia\BibliaApp\Services\BibliaService.cs(212,34): error CS0103: El nombre '_libros' no existe en el contexto actual
C:\Biblia\BibliaApp\Services\BibliaService.cs(222,13): error CS0103: El nombre 'GuardarLibros' no existe en el contexto actual    
C:\Biblia\BibliaApp\Services\BibliaService.cs(227,25): error CS0103: El nombre '_libros' no existe en el contexto actual
C:\Biblia\BibliaApp\Services\BibliaService.cs(232,37): error CS0103: El nombre '_capitulos' no existe en el contexto actual       
C:\Biblia\BibliaApp\Services\BibliaService.cs(239,13): error CS0103: El nombre '_libros' no existe en el contexto actual
C:\Biblia\BibliaApp\Services\BibliaService.cs(242,13): error CS0103: El nombre 'GuardarLibros' no existe en el contexto actual    
C:\Biblia\BibliaApp\Views\GestionContenidoWindow.xaml.cs(185,31): error CS1729: 'AgregarEditarVersiculoWindow' no contiene un constructor que tome 4 argumentos
C:\Biblia\BibliaApp\Services\BibliaService.cs(274,28): error CS0103: El nombre '_capitulos' no existe en el contexto actual       
C:\Biblia\BibliaApp\Services\BibliaService.cs(279,41): error CS0103: El nombre '_versiculos' no existe en el contexto actual      
C:\Biblia\BibliaApp\Services\BibliaService.cs(282,17): error CS0103: El nombre '_versiculos' no existe en el contexto actual      
C:\Biblia\BibliaApp\Services\BibliaService.cs(293,13): error CS0103: El nombre '_capitulos' no existe en el contexto actual       
C:\Biblia\BibliaApp\Services\BibliaService.cs(296,13): error CS0103: El nombre 'GuardarCapitulos' no existe en el contexto actual 
C:\Biblia\BibliaApp\Services\BibliaService.cs(297,13): error CS0103: El nombre 'GuardarVersiculos' no existe en el contexto actual
No se pudo llevar a cabo la compilación. Corrija los errores de compilación y vuelva a ejecutar el proyecto.

GitHub Copilot: # Corrección de errores en BibliaApp

Tienes varios problemas en tu proyecto que están causando errores de compilación. Vamos a solucionarlos paso a paso:

## 1. Corregir AgregarVersionWindow.xaml

El archivo `AgregarVersionWindow.xaml` tiene un encabezado incorrecto. Está configurado como `AgregarEditarVersiculoWindow` pero debería ser `AgregarVersionWindow`. Reemplaza su contenido con:

```xml
<Window x:Class="BibliaApp.Views.AgregarVersionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar Versión" Height="350" Width="500"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- ID de versión -->
        <DockPanel Grid.Row="0" Margin="0,0,0,10">
            <Label Content="ID:" Width="100"/>
            <TextBox x:Name="IdTextBox"/>
        </DockPanel>
        
        <!-- Nombre de versión -->
        <DockPanel Grid.Row="1" Margin="0,0,0,10">
            <Label Content="Nombre:" Width="100"/>
            <TextBox x:Name="NombreTextBox"/>
        </DockPanel>
        
        <!-- Idioma de versión -->
        <DockPanel Grid.Row="2" Margin="0,0,0,10">
            <Label Content="Idioma:" Width="100"/>
            <TextBox x:Name="IdiomaTextBox"/>
        </DockPanel>
        
        <!-- Descripción de versión -->
        <DockPanel Grid.Row="3" Margin="0,0,0,10">
            <Label Content="Descripción:" Width="100" VerticalAlignment="Top"/>
            <TextBox x:Name="DescripcionTextBox" AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
        </DockPanel>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="Guardar" Width="100" Margin="0,0,10,0" Click="btnGuardar_Click"/>
            <Button Content="Cancelar" Width="100" Click="btnCancelar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 2. Crear AgregarEditarVersiculoWindow.xaml correctamente

Crea un nuevo archivo XAML en la carpeta Views llamado `AgregarEditarVersiculoWindow.xaml` con este contenido:

```xml
<Window x:Class="BibliaApp.Views.AgregarEditarVersiculoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Agregar/Editar Versículo" Height="300" Width="500"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- Número de versículo -->
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="80"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            
            <Label Grid.Column="0" Content="Número:" VerticalAlignment="Center"/>
            <TextBox x:Name="txtNumero" Grid.Column="1" Margin="5,0,0,0"/>
        </Grid>
        
        <!-- Texto del versículo -->
        <Grid Grid.Row="1" Margin="0,10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <Label Grid.Row="0" Content="Texto:" VerticalAlignment="Top"/>
            <TextBox x:Name="txtTexto" Grid.Row="1" TextWrapping="Wrap" AcceptsReturn="True" 
                     VerticalScrollBarVisibility="Auto" Margin="0,5,0,0"/>
        </Grid>
        
        <!-- Botones de acción -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="btnGuardar" Content="Guardar" Width="100" Margin="0,0,10,0" Click="btnGuardar_Click"/>
            <Button x:Name="btnCancelar" Content="Cancelar" Width="100" Click="btnCancelar_Click"/>
        </StackPanel>
    </Grid>
</Window>
```

## 3. Corregir AgregarEditarVersiculoWindow.xaml.cs

Crea este archivo en la carpeta Views:

```csharp
using System;
using System.Linq;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarEditarVersiculoWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia _versionSeleccionada;
        private readonly Libro _libroSeleccionado;
        private readonly Capitulo _capituloSeleccionado;
        private Versiculo? _versiculoExistente;
        
        public AgregarEditarVersiculoWindow(BibliaService bibliaService, VersionBiblia version, Libro libro, Capitulo capitulo, Versiculo? versiculo = null)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionSeleccionada = version;
            _libroSeleccionado = libro;
            _capituloSeleccionado = capitulo;
            _versiculoExistente = versiculo;
            
            // Configurar título de la ventana
            Title = _versiculoExistente == null 
                ? $"Agregar Versículo - {libro.Nombre} {capitulo.Numero}" 
                : $"Editar Versículo - {libro.Nombre} {capitulo.Numero}:{_versiculoExistente.Numero}";
                
            // Cargar datos si es edición
            if (_versiculoExistente != null)
            {
                txtNumero.Text = _versiculoExistente.Numero.ToString();
                txtTexto.Text = _versiculoExistente.Texto;
            }
            else
            {
                // Determinar siguiente número de versículo
                var versiculos = _bibliaService.ObtenerVersiculos(
                    _versionSeleccionada.Id, 
                    _libroSeleccionado.Id, 
                    _capituloSeleccionado.Id);
                    
                int siguienteNumero = versiculos.Count > 0 ? versiculos.Max(v => v.Numero) + 1 : 1;
                txtNumero.Text = siguienteNumero.ToString();
            }
            
            // Establecer el foco en el campo de texto
            if (_versiculoExistente == null)
            {
                txtTexto.Focus();
            }
        }
        
        private void btnGuardar_Click(object sender, RoutedEventArgs e)
        {
            // Validar datos
            if (string.IsNullOrWhiteSpace(txtNumero.Text))
            {
                MessageBox.Show("Debe ingresar un número de versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumero.Focus();
                return;
            }
            
            if (!int.TryParse(txtNumero.Text, out int numero) || numero <= 0)
            {
                MessageBox.Show("El número de versículo debe ser un valor numérico positivo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtNumero.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(txtTexto.Text))
            {
                MessageBox.Show("Debe ingresar el texto del versículo.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                txtTexto.Focus();
                return;
            }
            
            try
            {
                if (_versiculoExistente != null)
                {
                    // Actualizar versículo existente
                    var versiculo = new Versiculo
                    {
                        Id = _versiculoExistente.Id,
                        Numero = numero,
                        Texto = txtTexto.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.ActualizarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                }
                else
                {
                    // Nuevo versículo
                    var versiculo = new Versiculo
                    {
                        Numero = numero,
                        Texto = txtTexto.Text.Trim(),
                        CapituloId = _capituloSeleccionado.Id
                    };
                    
                    _bibliaService.AgregarVersiculo(
                        _versionSeleccionada.Id, 
                        _libroSeleccionado.Id, 
                        _capituloSeleccionado.Id, 
                        versiculo);
                }
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar versículo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
```

## 4. Corregir AgregarVersionWindow.xaml.cs

Asegúrate de que el archivo contenga:

```csharp
using System;
using System.Linq;
using System.Windows;
using BibliaApp.Models;
using BibliaApp.Services;

namespace BibliaApp.Views
{
    public partial class AgregarVersionWindow : Window
    {
        private readonly BibliaService _bibliaService;
        private readonly VersionBiblia? _versionExistente;
        
        public AgregarVersionWindow(BibliaService bibliaService, VersionBiblia? version = null)
        {
            InitializeComponent();
            
            _bibliaService = bibliaService;
            _versionExistente = version;
            
            // Configurar título de la ventana
            Title = _versionExistente == null ? "Agregar Versión" : "Editar Versión";
            
            // Cargar datos si es edición
            if (_versionExistente != null)
            {
                IdTextBox.Text = _versionExistente.Id;
                IdTextBox.IsEnabled = false; // No permitir cambiar el ID
                
                NombreTextBox.Text = _versionExistente.Nombre;
                IdiomaTextBox.Text = _versionExistente.Idioma;
                DescripcionTextBox.Text = _versionExistente.Descripcion;
            }
        }
        
        private void btnGuardar_Click(object sender, RoutedEventArgs e)
        {
            // Validar datos
            if (string.IsNullOrWhiteSpace(IdTextBox.Text))
            {
                MessageBox.Show("Debe ingresar un ID para la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                IdTextBox.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(NombreTextBox.Text))
            {
                MessageBox.Show("Debe ingresar un nombre para la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                NombreTextBox.Focus();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(IdiomaTextBox.Text))
            {
                MessageBox.Show("Debe ingresar el idioma de la versión.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                IdiomaTextBox.Focus();
                return;
            }
            
            try
            {
                // Crear nueva versión o actualizar existente
                var version = new VersionBiblia
                {
                    Id = IdTextBox.Text.Trim(),
                    Nombre = NombreTextBox.Text.Trim(),
                    Idioma = IdiomaTextBox.Text.Trim(),
                    Descripcion = DescripcionTextBox.Text?.Trim() ?? string.Empty
                };
                
                if (_versionExistente == null)
                {
                    // Verificar que no exista ya una versión con el mismo ID
                    var versiones = _bibliaService.ObtenerVersiones();
                    if (versiones.Any(v => v.Id.Equals(version.Id, StringComparison.OrdinalIgnoreCase)))
                    {
                        MessageBox.Show($"Ya existe una versión con el ID '{version.Id}'.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        IdTextBox.Focus();
                        return;
                    }
                    
                    _bibliaService.AgregarVersion(version);
                    MessageBox.Show("Versión agregada correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    _bibliaService.ActualizarVersion(version);
                    MessageBox.Show("Versión actualizada correctamente.", "Éxito", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                
                DialogResult = true;
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al guardar versión: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btnCancelar_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
```

## 5. Corregir BibliaService.cs

Asegúrate de que tu clase BibliaService tenga las siguientes variables y métodos:

```csharp
// Propiedades para almacenar datos
private List<VersionBiblia> _versiones;
private List<Libro> _libros;
private List<Capitulo> _capitulos;
private List<Versiculo> _versiculos;
private List<TituloBiblico> _titulos;

// Rutas de archivos
private readonly string _archivoVersiones;
private readonly string _archivoLibros;
private readonly string _archivoCapitulos;
private readonly string _archivoVersiculos;
private readonly string _archivoTitulos;
```

Y añade o completa los métodos faltantes:

```csharp
private void GuardarLibros()
{
    try
    {
        string json = JsonSerializer.Serialize(_libros, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoLibros, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar libros: {ex.Message}");
    }
}

private void GuardarCapitulos()
{
    try
    {
        string json = JsonSerializer.Serialize(_capitulos, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoCapitulos, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar capítulos: {ex.Message}");
    }
}

private void GuardarVersiculos()
{
    try
    {
        string json = JsonSerializer.Serialize(_versiculos, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoVersiculos, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar versículos: {ex.Message}");
    }
}

private void GuardarTitulos()
{
    try
    {
        string json = JsonSerializer.Serialize(_titulos, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(_archivoTitulos, json);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar títulos: {ex.Message}");
    }
}

public void ActualizarLibro(string versionId, Libro libro)
{
    var libroExistente = _libros.FirstOrDefault(l => l.Id == libro.Id);
    if (libroExistente == null)
        throw new Exception($"No se encontró el libro con ID {libro.Id}");
    
    // Actualizar propiedades
    libroExistente.Nombre = libro.Nombre;
    libroExistente.Abreviatura = libro.Abreviatura;
    libroExistente.Numero = libro.Numero;
    
    // Guardar cambios
    GuardarLibros();
}

public void EliminarLibro(string versionId, int libroId)
{
    var libro = _libros.FirstOrDefault(l => l.Id == libroId);
    if (libro == null)
        throw new Exception($"No se encontró el libro con ID {libroId}");
    
    // Primero, necesitamos eliminar todos los capítulos (y por ende, los versículos)
    var capitulosDelLibro = _capitulos.Where(c => c.LibroId == libroId).ToList();
    foreach (var capitulo in capitulosDelLibro)
    {
        EliminarCapitulo(versionId, libroId, capitulo.Id);
    }
    
    // Eliminar el libro
    _libros.Remove(libro);
    
    // Guardar cambios
    GuardarLibros();
}

public void EliminarCapitulo(string versionId, int libroId, int capituloId)
{
    var capitulo = _capitulos.FirstOrDefault(c => c.Id == capituloId);
    if (capitulo == null)
        throw new Exception($"No se encontró el capítulo con ID {capituloId}");
    
    // Eliminar primero todos los versículos del capítulo
    var versiculosDelCapitulo = _versiculos.Where(v => v.CapituloId == capituloId).ToList();
    foreach (var versiculo in versiculosDelCapitulo)
    {
        _versiculos.Remove(versiculo);
    }
    
    // Eliminar también los títulos asociados al capítulo
    var titulosDelCapitulo = _titulos.Where(t => t.CapituloId == capituloId).ToList();
    foreach (var titulo in titulosDelCapitulo)
    {
        _titulos.Remove(titulo);
    }
    
    // Eliminar el capítulo
    _capitulos.Remove(capitulo);
    
    // Guardar cambios
    GuardarCapitulos();
    GuardarVersiculos();
    GuardarTitulos();
}
```

## 6. Corregir el modelo Libro.cs

Asegúrate de que la clase Libro tenga la propiedad Numero:

```csharp
public class Libro
{
    public int Id { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string Abreviatura { get; set; } = string.Empty;
    public int Numero { get; set; } // Esta propiedad debe existir
}
```

Con estas correcciones, los errores deberían desaparecer y podrás compilar y ejecutar el proyecto correctamente. Si persisten algunos errores, asegúrate de revisar detenidamente los mensajes de error y hacer las correcciones necesarias.

Código similar encontrado con 3 tipos de licencias
